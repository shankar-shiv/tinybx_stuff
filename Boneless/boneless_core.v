/* Generated by Yosys 0.8+308 (git sha1 7682629b, clang 7.0.1-4 -fPIC -Os) */

(* generator = "nMigen" *)
module alu(s_a, s_b, s_o, c_sel);
  wire [15:0] \$1 ;
  wire [15:0] \$11 ;
  wire [15:0] \$13 ;
  wire [15:0] \$15 ;
  wire [17:0] \$17 ;
  wire [17:0] \$18 ;
  wire [16:0] \$20 ;
  wire [17:0] \$22 ;
  wire [17:0] \$24 ;
  wire [15:0] \$3 ;
  wire [15:0] \$5 ;
  wire [15:0] \$7 ;
  wire [15:0] \$9 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:68" *)
  reg [16:0] \$next\s_m1n0 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:66" *)
  reg [15:0] \$next\s_m2n0 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:67" *)
  reg [15:0] \$next\s_m2n1 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:64" *)
  reg [15:0] \$next\s_m3n0 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:65" *)
  reg [15:0] \$next\s_m3n1 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:53" *)
  reg [16:0] \$next\s_o ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:55" *)
  input [3:0] c_sel;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:51" *)
  input [15:0] s_a;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:52" *)
  input [15:0] s_b;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:68" *)
  wire [16:0] s_m1n0;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:66" *)
  wire [15:0] s_m2n0;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:67" *)
  wire [15:0] s_m2n1;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:64" *)
  wire [15:0] s_m3n0;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:65" *)
  wire [15:0] s_m3n1;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:53" *)
  output [16:0] s_o;
  assign \$9  = c_sel[0] ? (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:22" *) s_a : \$7 ;
  assign \$11  = c_sel[1] ? (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:22" *) s_m3n1 : s_m3n0;
  assign \$13  = ~ (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:74" *) s_b;
  assign \$15  = c_sel[2] ? (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:22" *) \$13  : s_b;
  assign \$18  = + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:66" *) s_m2n0;
  assign \$1  = s_a | (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:71" *) s_b;
  assign \$20  = s_m2n0 + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:75" *) s_m2n1;
  assign \$22  = \$20  + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:75" *) c_sel[2];
  assign \$24  = c_sel[3] ? (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:22" *) \$18  : \$22 ;
  assign \$3  = s_a & (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:71" *) s_b;
  assign \$5  = c_sel[0] ? (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:22" *) \$1  : \$3 ;
  assign \$7  = s_a ^ (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:72" *) s_b;
  always @* begin
    \$next\s_m3n0  = 16'h0000;
    \$next\s_m3n0  = \$5 ;
  end
  always @* begin
    \$next\s_m3n1  = 16'h0000;
    \$next\s_m3n1  = \$9 ;
  end
  always @* begin
    \$next\s_m2n0  = 16'h0000;
    \$next\s_m2n0  = \$11 ;
  end
  always @* begin
    \$next\s_m2n1  = 16'h0000;
    \$next\s_m2n1  = \$15 ;
  end
  always @* begin
    \$next\s_m1n0  = 17'h00000;
    \$next\s_m1n0  = \$17 [16:0];
  end
  always @* begin
    \$next\s_o  = 17'h00000;
    \$next\s_o  = s_m1n0;
  end
  assign \$17  = \$24 ;
  assign s_o = \$next\s_o ;
  assign s_m1n0 = \$next\s_m1n0 ;
  assign s_m2n1 = \$next\s_m2n1 ;
  assign s_m2n0 = \$next\s_m2n0 ;
  assign s_m3n1 = \$next\s_m3n1 ;
  assign s_m3n0 = \$next\s_m3n0 ;
endmodule

(* top =  1  *)
(* generator = "nMigen" *)
module boneless_core(usb_out_data, rst, clk, r_win, pins, usb_out_control);
  wire \$2 ;
  wire \$4 ;
  wire \$6 ;
  wire \$8 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:33" *)
  reg [15:0] \$next\core_ext_r_data ;
  (* src = "processor.py:13" *)
  reg [15:0] \$next\pins ;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:31" *)
  wire [15:0] core_ext_addr;
  (* init = 16'h0000 *)
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:33" *)
  reg [15:0] core_ext_r_data = 16'h0000;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:32" *)
  wire core_ext_r_en;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:35" *)
  wire [15:0] core_ext_w_data;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:34" *)
  wire core_ext_w_en;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:81" *)
  wire [8:0] mem_rdport_memory_r_addr;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:83" *)
  wire [15:0] mem_rdport_memory_r_data;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:85" *)
  wire mem_rdport_memory_r_en;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:146" *)
  wire [8:0] mem_wrport_memory_w_addr;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:148" *)
  wire [15:0] mem_wrport_memory_w_data;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:150" *)
  wire mem_wrport_memory_w_en;
  (* init = 16'h0000 *)
  (* src = "processor.py:13" *)
  output [15:0] pins;
  reg [15:0] pins = 16'h0000;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:144" *)
  input [5:0] r_win;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:304" *)
  input rst;
  (* src = "processor.py:17" *)
  input [15:0] usb_out_control;
  (* src = "processor.py:18" *)
  input [15:0] usb_out_data;
  assign \$2  = core_ext_addr == (* src = "processor.py:29" *) 1'h0;
  assign \$4  = core_ext_addr == (* src = "processor.py:36" *) 9'h100;
  assign \$6  = core_ext_addr == (* src = "processor.py:40" *) 8'hff;
  assign \$8  = core_ext_addr == (* src = "processor.py:29" *) 1'h0;
  always @(posedge clk)
      pins <= \$next\pins ;
  always @(posedge clk)
      core_ext_r_data <= \$next\core_ext_r_data ;
  core core (
    .clk(clk),
    .ext_addr(core_ext_addr),
    .ext_r_data(core_ext_r_data),
    .ext_r_en(core_ext_r_en),
    .ext_w_data(core_ext_w_data),
    .ext_w_en(core_ext_w_en),
    .memory_r_addr(mem_rdport_memory_r_addr),
    .memory_r_data(mem_rdport_memory_r_data),
    .memory_r_en(mem_rdport_memory_r_en),
    .memory_w_addr(mem_wrport_memory_w_addr),
    .memory_w_data(mem_wrport_memory_w_data),
    .memory_w_en(mem_wrport_memory_w_en),
    .r_win(r_win),
    .rst(rst)
  );
  reg [15:0] memory [511:0];
  initial begin
    memory[0] = 16'h0000;
    memory[1] = 16'h0000;
    memory[2] = 16'h0000;
    memory[3] = 16'h0000;
    memory[4] = 16'h0000;
    memory[5] = 16'h0000;
    memory[6] = 16'h0000;
    memory[7] = 16'h0000;
    memory[8] = 16'h8006;
    memory[9] = 16'h4200;
    memory[10] = 16'h5a01;
    memory[11] = 16'h0846;
    memory[12] = 16'h9801;
    memory[13] = 16'h87fc;
    memory[14] = 16'h7f00;
    memory[15] = 16'h499c;
    memory[16] = 16'h5940;
    memory[17] = 16'h5801;
    memory[18] = 16'h3880;
    memory[19] = 16'h77f5;
    memory[20] = 16'h77f4;
    memory[21] = 16'h77f3;
    memory[22] = 16'h77f2;
    memory[23] = 16'h4300;
    memory[24] = 16'h3b80;
    memory[25] = 16'h77ef;
    memory[26] = 16'h77ee;
    memory[27] = 16'h77ed;
    memory[28] = 16'h77ec;
    memory[29] = 16'h87f3;
    memory[30] = 16'h0000;
    memory[31] = 16'h0000;
    memory[32] = 16'h0000;
    memory[33] = 16'h0000;
    memory[34] = 16'h0000;
    memory[35] = 16'h0000;
    memory[36] = 16'h0000;
    memory[37] = 16'h0000;
    memory[38] = 16'h0000;
    memory[39] = 16'h0000;
    memory[40] = 16'h0000;
    memory[41] = 16'h0000;
    memory[42] = 16'h0000;
    memory[43] = 16'h0000;
    memory[44] = 16'h0000;
    memory[45] = 16'h0000;
    memory[46] = 16'h0000;
    memory[47] = 16'h0000;
    memory[48] = 16'h0000;
    memory[49] = 16'h0000;
    memory[50] = 16'h0000;
    memory[51] = 16'h0000;
    memory[52] = 16'h0000;
    memory[53] = 16'h0000;
    memory[54] = 16'h0000;
    memory[55] = 16'h0000;
    memory[56] = 16'h0000;
    memory[57] = 16'h0000;
    memory[58] = 16'h0000;
    memory[59] = 16'h0000;
    memory[60] = 16'h0000;
    memory[61] = 16'h0000;
    memory[62] = 16'h0000;
    memory[63] = 16'h0000;
    memory[64] = 16'h0000;
    memory[65] = 16'h0000;
    memory[66] = 16'h0000;
    memory[67] = 16'h0000;
    memory[68] = 16'h0000;
    memory[69] = 16'h0000;
    memory[70] = 16'h0000;
    memory[71] = 16'h0000;
    memory[72] = 16'h0000;
    memory[73] = 16'h0000;
    memory[74] = 16'h0000;
    memory[75] = 16'h0000;
    memory[76] = 16'h0000;
    memory[77] = 16'h0000;
    memory[78] = 16'h0000;
    memory[79] = 16'h0000;
    memory[80] = 16'h0000;
    memory[81] = 16'h0000;
    memory[82] = 16'h0000;
    memory[83] = 16'h0000;
    memory[84] = 16'h0000;
    memory[85] = 16'h0000;
    memory[86] = 16'h0000;
    memory[87] = 16'h0000;
    memory[88] = 16'h0000;
    memory[89] = 16'h0000;
    memory[90] = 16'h0000;
    memory[91] = 16'h0000;
    memory[92] = 16'h0000;
    memory[93] = 16'h0000;
    memory[94] = 16'h0000;
    memory[95] = 16'h0000;
    memory[96] = 16'h0000;
    memory[97] = 16'h0000;
    memory[98] = 16'h0000;
    memory[99] = 16'h0000;
    memory[100] = 16'h0000;
    memory[101] = 16'h0000;
    memory[102] = 16'h0000;
    memory[103] = 16'h0000;
    memory[104] = 16'h0000;
    memory[105] = 16'h0000;
    memory[106] = 16'h0000;
    memory[107] = 16'h0000;
    memory[108] = 16'h0000;
    memory[109] = 16'h0000;
    memory[110] = 16'h0000;
    memory[111] = 16'h0000;
    memory[112] = 16'h0000;
    memory[113] = 16'h0000;
    memory[114] = 16'h0000;
    memory[115] = 16'h0000;
    memory[116] = 16'h0000;
    memory[117] = 16'h0000;
    memory[118] = 16'h0000;
    memory[119] = 16'h0000;
    memory[120] = 16'h0000;
    memory[121] = 16'h0000;
    memory[122] = 16'h0000;
    memory[123] = 16'h0000;
    memory[124] = 16'h0000;
    memory[125] = 16'h0000;
    memory[126] = 16'h0000;
    memory[127] = 16'h0000;
    memory[128] = 16'h0000;
    memory[129] = 16'h0000;
    memory[130] = 16'h0000;
    memory[131] = 16'h0000;
    memory[132] = 16'h0000;
    memory[133] = 16'h0000;
    memory[134] = 16'h0000;
    memory[135] = 16'h0000;
    memory[136] = 16'h0000;
    memory[137] = 16'h0000;
    memory[138] = 16'h0000;
    memory[139] = 16'h0000;
    memory[140] = 16'h0000;
    memory[141] = 16'h0000;
    memory[142] = 16'h0000;
    memory[143] = 16'h0000;
    memory[144] = 16'h0000;
    memory[145] = 16'h0000;
    memory[146] = 16'h0000;
    memory[147] = 16'h0000;
    memory[148] = 16'h0000;
    memory[149] = 16'h0000;
    memory[150] = 16'h0000;
    memory[151] = 16'h0000;
    memory[152] = 16'h0000;
    memory[153] = 16'h0000;
    memory[154] = 16'h0000;
    memory[155] = 16'h0000;
    memory[156] = 16'h0000;
    memory[157] = 16'h0000;
    memory[158] = 16'h0000;
    memory[159] = 16'h0000;
    memory[160] = 16'h0000;
    memory[161] = 16'h0000;
    memory[162] = 16'h0000;
    memory[163] = 16'h0000;
    memory[164] = 16'h0000;
    memory[165] = 16'h0000;
    memory[166] = 16'h0000;
    memory[167] = 16'h0000;
    memory[168] = 16'h0000;
    memory[169] = 16'h0000;
    memory[170] = 16'h0000;
    memory[171] = 16'h0000;
    memory[172] = 16'h0000;
    memory[173] = 16'h0000;
    memory[174] = 16'h0000;
    memory[175] = 16'h0000;
    memory[176] = 16'h0000;
    memory[177] = 16'h0000;
    memory[178] = 16'h0000;
    memory[179] = 16'h0000;
    memory[180] = 16'h0000;
    memory[181] = 16'h0000;
    memory[182] = 16'h0000;
    memory[183] = 16'h0000;
    memory[184] = 16'h0000;
    memory[185] = 16'h0000;
    memory[186] = 16'h0000;
    memory[187] = 16'h0000;
    memory[188] = 16'h0000;
    memory[189] = 16'h0000;
    memory[190] = 16'h0000;
    memory[191] = 16'h0000;
    memory[192] = 16'h0000;
    memory[193] = 16'h0000;
    memory[194] = 16'h0000;
    memory[195] = 16'h0000;
    memory[196] = 16'h0000;
    memory[197] = 16'h0000;
    memory[198] = 16'h0000;
    memory[199] = 16'h0000;
    memory[200] = 16'h0000;
    memory[201] = 16'h0000;
    memory[202] = 16'h0000;
    memory[203] = 16'h0000;
    memory[204] = 16'h0000;
    memory[205] = 16'h0000;
    memory[206] = 16'h0000;
    memory[207] = 16'h0000;
    memory[208] = 16'h0000;
    memory[209] = 16'h0000;
    memory[210] = 16'h0000;
    memory[211] = 16'h0000;
    memory[212] = 16'h0000;
    memory[213] = 16'h0000;
    memory[214] = 16'h0000;
    memory[215] = 16'h0000;
    memory[216] = 16'h0000;
    memory[217] = 16'h0000;
    memory[218] = 16'h0000;
    memory[219] = 16'h0000;
    memory[220] = 16'h0000;
    memory[221] = 16'h0000;
    memory[222] = 16'h0000;
    memory[223] = 16'h0000;
    memory[224] = 16'h0000;
    memory[225] = 16'h0000;
    memory[226] = 16'h0000;
    memory[227] = 16'h0000;
    memory[228] = 16'h0000;
    memory[229] = 16'h0000;
    memory[230] = 16'h0000;
    memory[231] = 16'h0000;
    memory[232] = 16'h0000;
    memory[233] = 16'h0000;
    memory[234] = 16'h0000;
    memory[235] = 16'h0000;
    memory[236] = 16'h0000;
    memory[237] = 16'h0000;
    memory[238] = 16'h0000;
    memory[239] = 16'h0000;
    memory[240] = 16'h0000;
    memory[241] = 16'h0000;
    memory[242] = 16'h0000;
    memory[243] = 16'h0000;
    memory[244] = 16'h0000;
    memory[245] = 16'h0000;
    memory[246] = 16'h0000;
    memory[247] = 16'h0000;
    memory[248] = 16'h0000;
    memory[249] = 16'h0000;
    memory[250] = 16'h0000;
    memory[251] = 16'h0000;
    memory[252] = 16'h0000;
    memory[253] = 16'h0000;
    memory[254] = 16'h0000;
    memory[255] = 16'h0000;
    memory[256] = 16'h0000;
    memory[257] = 16'h0000;
    memory[258] = 16'h0000;
    memory[259] = 16'h0000;
    memory[260] = 16'h0000;
    memory[261] = 16'h0000;
    memory[262] = 16'h0000;
    memory[263] = 16'h0000;
    memory[264] = 16'h0000;
    memory[265] = 16'h0000;
    memory[266] = 16'h0000;
    memory[267] = 16'h0000;
    memory[268] = 16'h0000;
    memory[269] = 16'h0000;
    memory[270] = 16'h0000;
    memory[271] = 16'h0000;
    memory[272] = 16'h0000;
    memory[273] = 16'h0000;
    memory[274] = 16'h0000;
    memory[275] = 16'h0000;
    memory[276] = 16'h0000;
    memory[277] = 16'h0000;
    memory[278] = 16'h0000;
    memory[279] = 16'h0000;
    memory[280] = 16'h0000;
    memory[281] = 16'h0000;
    memory[282] = 16'h0000;
    memory[283] = 16'h0000;
    memory[284] = 16'h0000;
    memory[285] = 16'h0000;
    memory[286] = 16'h0000;
    memory[287] = 16'h0000;
    memory[288] = 16'h0000;
    memory[289] = 16'h0000;
    memory[290] = 16'h0000;
    memory[291] = 16'h0000;
    memory[292] = 16'h0000;
    memory[293] = 16'h0000;
    memory[294] = 16'h0000;
    memory[295] = 16'h0000;
    memory[296] = 16'h0000;
    memory[297] = 16'h0000;
    memory[298] = 16'h0000;
    memory[299] = 16'h0000;
    memory[300] = 16'h0000;
    memory[301] = 16'h0000;
    memory[302] = 16'h0000;
    memory[303] = 16'h0000;
    memory[304] = 16'h0000;
    memory[305] = 16'h0000;
    memory[306] = 16'h0000;
    memory[307] = 16'h0000;
    memory[308] = 16'h0000;
    memory[309] = 16'h0000;
    memory[310] = 16'h0000;
    memory[311] = 16'h0000;
    memory[312] = 16'h0000;
    memory[313] = 16'h0000;
    memory[314] = 16'h0000;
    memory[315] = 16'h0000;
    memory[316] = 16'h0000;
    memory[317] = 16'h0000;
    memory[318] = 16'h0000;
    memory[319] = 16'h0000;
    memory[320] = 16'h0000;
    memory[321] = 16'h0000;
    memory[322] = 16'h0000;
    memory[323] = 16'h0000;
    memory[324] = 16'h0000;
    memory[325] = 16'h0000;
    memory[326] = 16'h0000;
    memory[327] = 16'h0000;
    memory[328] = 16'h0000;
    memory[329] = 16'h0000;
    memory[330] = 16'h0000;
    memory[331] = 16'h0000;
    memory[332] = 16'h0000;
    memory[333] = 16'h0000;
    memory[334] = 16'h0000;
    memory[335] = 16'h0000;
    memory[336] = 16'h0000;
    memory[337] = 16'h0000;
    memory[338] = 16'h0000;
    memory[339] = 16'h0000;
    memory[340] = 16'h0000;
    memory[341] = 16'h0000;
    memory[342] = 16'h0000;
    memory[343] = 16'h0000;
    memory[344] = 16'h0000;
    memory[345] = 16'h0000;
    memory[346] = 16'h0000;
    memory[347] = 16'h0000;
    memory[348] = 16'h0000;
    memory[349] = 16'h0000;
    memory[350] = 16'h0000;
    memory[351] = 16'h0000;
    memory[352] = 16'h0000;
    memory[353] = 16'h0000;
    memory[354] = 16'h0000;
    memory[355] = 16'h0000;
    memory[356] = 16'h0000;
    memory[357] = 16'h0000;
    memory[358] = 16'h0000;
    memory[359] = 16'h0000;
    memory[360] = 16'h0000;
    memory[361] = 16'h0000;
    memory[362] = 16'h0000;
    memory[363] = 16'h0000;
    memory[364] = 16'h0000;
    memory[365] = 16'h0000;
    memory[366] = 16'h0000;
    memory[367] = 16'h0000;
    memory[368] = 16'h0000;
    memory[369] = 16'h0000;
    memory[370] = 16'h0000;
    memory[371] = 16'h0000;
    memory[372] = 16'h0000;
    memory[373] = 16'h0000;
    memory[374] = 16'h0000;
    memory[375] = 16'h0000;
    memory[376] = 16'h0000;
    memory[377] = 16'h0000;
    memory[378] = 16'h0000;
    memory[379] = 16'h0000;
    memory[380] = 16'h0000;
    memory[381] = 16'h0000;
    memory[382] = 16'h0000;
    memory[383] = 16'h0000;
    memory[384] = 16'h0000;
    memory[385] = 16'h0000;
    memory[386] = 16'h0000;
    memory[387] = 16'h0000;
    memory[388] = 16'h0000;
    memory[389] = 16'h0000;
    memory[390] = 16'h0000;
    memory[391] = 16'h0000;
    memory[392] = 16'h0000;
    memory[393] = 16'h0000;
    memory[394] = 16'h0000;
    memory[395] = 16'h0000;
    memory[396] = 16'h0000;
    memory[397] = 16'h0000;
    memory[398] = 16'h0000;
    memory[399] = 16'h0000;
    memory[400] = 16'h0000;
    memory[401] = 16'h0000;
    memory[402] = 16'h0000;
    memory[403] = 16'h0000;
    memory[404] = 16'h0000;
    memory[405] = 16'h0000;
    memory[406] = 16'h0000;
    memory[407] = 16'h0000;
    memory[408] = 16'h0000;
    memory[409] = 16'h0000;
    memory[410] = 16'h0000;
    memory[411] = 16'h0000;
    memory[412] = 16'h0000;
    memory[413] = 16'h0000;
    memory[414] = 16'h0000;
    memory[415] = 16'h0000;
    memory[416] = 16'h0000;
    memory[417] = 16'h0000;
    memory[418] = 16'h0000;
    memory[419] = 16'h0000;
    memory[420] = 16'h0000;
    memory[421] = 16'h0000;
    memory[422] = 16'h0000;
    memory[423] = 16'h0000;
    memory[424] = 16'h0000;
    memory[425] = 16'h0000;
    memory[426] = 16'h0000;
    memory[427] = 16'h0000;
    memory[428] = 16'h0000;
    memory[429] = 16'h0000;
    memory[430] = 16'h0000;
    memory[431] = 16'h0000;
    memory[432] = 16'h0000;
    memory[433] = 16'h0000;
    memory[434] = 16'h0000;
    memory[435] = 16'h0000;
    memory[436] = 16'h0000;
    memory[437] = 16'h0000;
    memory[438] = 16'h0000;
    memory[439] = 16'h0000;
    memory[440] = 16'h0000;
    memory[441] = 16'h0000;
    memory[442] = 16'h0000;
    memory[443] = 16'h0000;
    memory[444] = 16'h0000;
    memory[445] = 16'h0000;
    memory[446] = 16'h0000;
    memory[447] = 16'h0000;
    memory[448] = 16'h0000;
    memory[449] = 16'h0000;
    memory[450] = 16'h0000;
    memory[451] = 16'h0000;
    memory[452] = 16'h0000;
    memory[453] = 16'h0000;
    memory[454] = 16'h0000;
    memory[455] = 16'h0000;
    memory[456] = 16'h0000;
    memory[457] = 16'h0000;
    memory[458] = 16'h0000;
    memory[459] = 16'h0000;
    memory[460] = 16'h0000;
    memory[461] = 16'h0000;
    memory[462] = 16'h0000;
    memory[463] = 16'h0000;
    memory[464] = 16'h0000;
    memory[465] = 16'h0000;
    memory[466] = 16'h0000;
    memory[467] = 16'h0000;
    memory[468] = 16'h0000;
    memory[469] = 16'h0000;
    memory[470] = 16'h0000;
    memory[471] = 16'h0000;
    memory[472] = 16'h0000;
    memory[473] = 16'h0000;
    memory[474] = 16'h0000;
    memory[475] = 16'h0000;
    memory[476] = 16'h0000;
    memory[477] = 16'h0000;
    memory[478] = 16'h0000;
    memory[479] = 16'h0000;
    memory[480] = 16'h0000;
    memory[481] = 16'h0000;
    memory[482] = 16'h0000;
    memory[483] = 16'h0000;
    memory[484] = 16'h0000;
    memory[485] = 16'h0000;
    memory[486] = 16'h0000;
    memory[487] = 16'h0000;
    memory[488] = 16'h0000;
    memory[489] = 16'h0000;
    memory[490] = 16'h0000;
    memory[491] = 16'h0000;
    memory[492] = 16'h0000;
    memory[493] = 16'h0000;
    memory[494] = 16'h0000;
    memory[495] = 16'h0000;
    memory[496] = 16'h0000;
    memory[497] = 16'h0000;
    memory[498] = 16'h0000;
    memory[499] = 16'h0000;
    memory[500] = 16'h0000;
    memory[501] = 16'h0000;
    memory[502] = 16'h0000;
    memory[503] = 16'h0000;
    memory[504] = 16'h0000;
    memory[505] = 16'h0000;
    memory[506] = 16'h0000;
    memory[507] = 16'h0000;
    memory[508] = 16'h0000;
    memory[509] = 16'h0000;
    memory[510] = 16'h0000;
    memory[511] = 16'h0000;
  end
  reg [15:0] _0_;
  always @(posedge clk) begin
    if (mem_rdport_memory_r_en) _0_ <= memory[mem_rdport_memory_r_addr];
    if (mem_wrport_memory_w_en) memory[mem_wrport_memory_w_addr] <= mem_wrport_memory_w_data;
  end
  assign mem_rdport_memory_r_data = _0_;
  always @* begin
    \$next\core_ext_r_data  = core_ext_r_data;
    casez (\$2 )
      1'h1:
          casez (core_ext_r_en)
            1'h1:
                \$next\core_ext_r_data  = pins;
          endcase
    endcase
    casez (\$4 )
      1'h1:
          casez (core_ext_r_en)
            1'h1:
                \$next\core_ext_r_data  = usb_out_control;
          endcase
    endcase
    casez (\$6 )
      1'h1:
          casez (core_ext_r_en)
            1'h1:
                \$next\core_ext_r_data  = usb_out_data;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\core_ext_r_data  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\pins  = pins;
    casez (\$8 )
      1'h1:
          casez (core_ext_w_en)
            1'h1:
                \$next\pins  = core_ext_w_data;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\pins  = 16'h0000;
    endcase
  end
endmodule

(* generator = "nMigen" *)
module core(r_win, ext_r_data, rst, clk, memory_r_addr, memory_r_en, memory_w_addr, memory_w_data, memory_w_en, ext_addr, ext_r_en, ext_w_data, ext_w_en, memory_r_data);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire [15:0] \$27 ;
  wire \$28 ;
  wire \$3 ;
  wire \$31 ;
  wire [15:0] \$33 ;
  wire [9:0] \$35 ;
  wire [9:0] \$36 ;
  wire \$38 ;
  wire [11:0] \$40 ;
  wire [11:0] \$41 ;
  wire [9:0] \$43 ;
  wire [9:0] \$44 ;
  wire [16:0] \$46 ;
  wire [16:0] \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire \$51 ;
  wire [16:0] \$53 ;
  wire [15:0] \$55 ;
  wire [15:0] \$57 ;
  wire [9:0] \$58 ;
  wire [15:0] \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire \$67 ;
  wire [4:0] \$69 ;
  wire \$7 ;
  wire [5:0] \$71 ;
  wire [5:0] \$72 ;
  wire [15:0] \$74 ;
  wire [9:0] \$75 ;
  wire [16:0] \$78 ;
  wire [16:0] \$79 ;
  wire [15:0] \$81 ;
  wire [9:0] \$82 ;
  wire [16:0] \$85 ;
  wire [16:0] \$86 ;
  wire \$9 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:55" *)
  reg [3:0] \$next\alu_c_sel ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:51" *)
  reg [15:0] \$next\alu_s_a ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:52" *)
  reg [15:0] \$next\alu_s_b ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:205" *)
  reg \$next\c_flags ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:31" *)
  reg [15:0] \$next\ext_addr ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:32" *)
  reg \$next\ext_r_en ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:35" *)
  reg [15:0] \$next\ext_w_data ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:34" *)
  reg \$next\ext_w_en ;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:18" *)
  reg [3:0] \$next\fi_flags ;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:16" *)
  reg [15:0] \$next\fi_insn ;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:15" *)
  reg [15:0] \$next\fi_pc ;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:13" *)
  reg \$next\fi_stb ;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/dsl.py:244" *)
  reg [3:0] \$next\fsm_state ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:124" *)
  reg \$next\halted ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:182" *)
  reg \$next\i_clsA ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:186" *)
  reg \$next\i_clsC ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:185" *)
  reg \$next\i_clsI ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:184" *)
  reg \$next\i_clsM ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:183" *)
  reg \$next\i_clsS ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:173" *)
  reg \$next\i_code1 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:174" *)
  reg [1:0] \$next\i_code2 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:175" *)
  reg [2:0] \$next\i_code3 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:176" *)
  reg [4:0] \$next\i_code5 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:180" *)
  reg [2:0] \$next\i_cond ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:178" *)
  reg \$next\i_ext ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:179" *)
  reg \$next\i_flag ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:169" *)
  reg [10:0] \$next\i_imm11 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:167" *)
  reg [4:0] \$next\i_imm5 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:168" *)
  reg [7:0] \$next\i_imm8 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:170" *)
  reg [2:0] \$next\i_regX ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:171" *)
  reg [2:0] \$next\i_regY ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:172" *)
  reg [2:0] \$next\i_regZ ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:166" *)
  reg [3:0] \$next\i_shift ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:177" *)
  reg \$next\i_store ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:164" *)
  reg \$next\i_type1 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:165" *)
  reg [1:0] \$next\i_type2 ;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:81" *)
  reg [8:0] \$next\memory_r_addr ;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:85" *)
  reg \$next\memory_r_en ;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:146" *)
  reg [8:0] \$next\memory_w_addr ;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:148" *)
  reg [15:0] \$next\memory_w_data ;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:150" *)
  reg \$next\memory_w_en ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:156" *)
  reg [15:0] \$next\r_addr ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:147" *)
  reg \$next\r_c ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:142" *)
  reg [15:0] \$next\r_insn ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:150" *)
  reg [15:0] \$next\r_opA ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:143" *)
  reg [8:0] \$next\r_pc ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:146" *)
  reg \$next\r_s ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:152" *)
  reg [4:0] \$next\r_shift ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:148" *)
  reg \$next\r_v ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:145" *)
  reg \$next\r_z ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:155" *)
  reg [15:0] \$next\s_addr ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:201" *)
  reg \$next\s_c ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:204" *)
  reg \$next\s_cmp ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:188" *)
  reg \$next\s_cond ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:158" *)
  reg [15:0] \$next\s_insn ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:151" *)
  reg [15:0] \$next\s_opB ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:153" *)
  reg [16:0] \$next\s_res ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:200" *)
  reg \$next\s_s ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:203" *)
  reg \$next\s_sub ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:202" *)
  reg \$next\s_v ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:199" *)
  reg \$next\s_z ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:93" *)
  reg \$next\sru_c_dir ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:92" *)
  reg \$next\sru_c_ld ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:89" *)
  reg \$next\sru_s_c ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:88" *)
  reg [15:0] \$next\sru_s_i ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:55" *)
  wire [3:0] alu_c_sel;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:51" *)
  wire [15:0] alu_s_a;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:52" *)
  wire [15:0] alu_s_b;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:53" *)
  wire [16:0] alu_s_o;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:205" *)
  wire c_flags;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:160" *)
  input clk;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:31" *)
  output [15:0] ext_addr;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:33" *)
  input [15:0] ext_r_data;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:32" *)
  output ext_r_en;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:35" *)
  output [15:0] ext_w_data;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:34" *)
  output ext_w_en;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:18" *)
  wire [3:0] fi_flags;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:16" *)
  wire [15:0] fi_insn;
  (* init = 16'h0000 *)
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:15" *)
  reg [15:0] fi_pc = 16'h0000;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:13" *)
  wire fi_stb;
  (* init = 4'h0 *)
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/dsl.py:244" *)
  reg [3:0] fsm_state = 4'h0;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:124" *)
  wire halted;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:182" *)
  wire i_clsA;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:186" *)
  wire i_clsC;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:185" *)
  wire i_clsI;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:184" *)
  wire i_clsM;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:183" *)
  wire i_clsS;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:173" *)
  wire i_code1;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:174" *)
  wire [1:0] i_code2;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:175" *)
  wire [2:0] i_code3;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:176" *)
  wire [4:0] i_code5;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:180" *)
  wire [2:0] i_cond;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:178" *)
  wire i_ext;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:179" *)
  wire i_flag;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:169" *)
  wire [10:0] i_imm11;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:167" *)
  wire [4:0] i_imm5;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:168" *)
  wire [7:0] i_imm8;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:170" *)
  wire [2:0] i_regX;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:171" *)
  wire [2:0] i_regY;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:172" *)
  wire [2:0] i_regZ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:166" *)
  wire [3:0] i_shift;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:177" *)
  wire i_store;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:164" *)
  wire i_type1;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:165" *)
  wire [1:0] i_type2;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:81" *)
  output [8:0] memory_r_addr;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:83" *)
  input [15:0] memory_r_data;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:85" *)
  output memory_r_en;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:146" *)
  output [8:0] memory_w_addr;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:148" *)
  output [15:0] memory_w_data;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:150" *)
  output memory_w_en;
  (* init = 16'h0000 *)
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:156" *)
  reg [15:0] r_addr = 16'h0000;
  (* init = 1'h0 *)
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:147" *)
  reg r_c = 1'h0;
  (* init = 16'h0000 *)
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:142" *)
  reg [15:0] r_insn = 16'h0000;
  (* init = 16'h0000 *)
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:150" *)
  reg [15:0] r_opA = 16'h0000;
  (* init = 9'h008 *)
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:143" *)
  reg [8:0] r_pc = 9'h008;
  (* init = 1'h0 *)
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:146" *)
  reg r_s = 1'h0;
  (* init = 5'h00 *)
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:152" *)
  reg [4:0] r_shift = 5'h00;
  (* init = 1'h0 *)
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:148" *)
  reg r_v = 1'h0;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:144" *)
  input [5:0] r_win;
  (* init = 1'h0 *)
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:145" *)
  reg r_z = 1'h0;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:304" *)
  input rst;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:155" *)
  wire [15:0] s_addr;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:201" *)
  wire s_c;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:204" *)
  wire s_cmp;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:188" *)
  wire s_cond;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:158" *)
  wire [15:0] s_insn;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:151" *)
  wire [15:0] s_opB;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:153" *)
  wire [16:0] s_res;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:200" *)
  wire s_s;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:203" *)
  wire s_sub;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:202" *)
  wire s_v;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:199" *)
  wire s_z;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:93" *)
  wire sru_c_dir;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:92" *)
  wire sru_c_ld;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:90" *)
  wire [15:0] sru_r_o;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:89" *)
  wire sru_s_c;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:88" *)
  wire [15:0] sru_s_i;
  assign \$9  = i_code5[4:3] == (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:185" *) 1'h1;
  assign \$11  = i_code5[4] == (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:186" *) 1'h1;
  assign \$13  = ~ (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:195" *) r_c;
  assign \$15  = \$13  | (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:195" *) r_z;
  assign \$17  = r_s ^ (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:196" *) r_v;
  assign \$1  = s_insn == (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:160" *) 16'h87ff;
  assign \$19  = r_s ^ (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:197" *) r_v;
  assign \$21  = \$19  | (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:197" *) r_z;
  assign \$23  = s_res[15:0] == (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:207" *) 1'h0;
  assign \$25  = s_sub | (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:212" *) s_cmp;
  assign \$28  = fsm_state == (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/dsl.py:109" *) 1'h1;
  assign \$27  = \$28  ? (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:22" *) memory_r_data : r_insn;
  assign \$31  = ~ (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:367" *) i_ext;
  assign \$33  = + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:143" *) r_pc;
  assign \$36  = r_pc + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:255" *) 1'h1;
  assign \$38  = s_cond == (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:302" *) i_flag;
  assign \$3  = i_code5[4:1] == (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:182" *) 1'h0;
  assign \$41  = r_pc + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:14" *) i_imm11;
  assign \$44  = r_pc + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:16" *) { i_imm8[7], i_imm8 };
  assign \$47  = memory_r_data + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:16" *) { i_imm8[7], i_imm8[7], i_imm8[7], i_imm8[7], i_imm8[7], i_imm8[7], i_imm8[7], i_imm8[7], i_imm8 };
  assign \$49  = r_shift == (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:353" *) 1'h0;
  assign \$51  = r_shift == (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:353" *) 1'h0;
  assign \$53  = + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:90" *) sru_r_o;
  assign \$55  = i_ext ? (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:22" *) ext_r_data : memory_r_data;
  assign \$58  = r_pc + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:16" *) { i_imm8[7], i_imm8 };
  assign \$5  = i_code5[4:1] == (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:183" *) 1'h1;
  assign \$57  = + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:16" *) \$58 ;
  assign \$61  = + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:143" *) r_pc;
  assign \$63  = ~ (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:322" *) s_cmp;
  assign \$65  = r_shift == (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:353" *) 1'h0;
  assign \$67  = ~ (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:395" *) i_ext;
  assign \$69  = + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:166" *) i_shift;
  assign \$72  = r_shift - (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:352" *) 1'h1;
  assign \$75  = r_pc + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:16" *) { i_imm8[7], i_imm8 };
  assign \$74  = + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:16" *) \$75 ;
  assign \$7  = i_code5[4:2] == (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:184" *) 1'h1;
  assign \$79  = memory_r_data + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:16" *) { i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5 };
  assign \$82  = r_pc + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:16" *) { i_imm8[7], i_imm8 };
  assign \$81  = + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:16" *) \$82 ;
  assign \$86  = memory_r_data + (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:16" *) { i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5[4], i_imm5 };
  always @(posedge clk)
      r_z <= \$next\r_z ;
  always @(posedge clk)
      r_s <= \$next\r_s ;
  always @(posedge clk)
      r_c <= \$next\r_c ;
  always @(posedge clk)
      r_v <= \$next\r_v ;
  always @(posedge clk)
      r_addr <= \$next\r_addr ;
  always @(posedge clk)
      r_shift <= \$next\r_shift ;
  always @(posedge clk)
      r_opA <= \$next\r_opA ;
  always @(posedge clk)
      r_insn <= \$next\r_insn ;
  always @(posedge clk)
      fsm_state <= \$next\fsm_state ;
  always @(posedge clk)
      r_pc <= \$next\r_pc ;
  always @(posedge clk)
      fi_pc <= \$next\fi_pc ;
  alu alu (
    .c_sel(alu_c_sel),
    .s_a(alu_s_a),
    .s_b(alu_s_b),
    .s_o(alu_s_o)
  );
  formal formal (
    .ext_addr(ext_addr),
    .ext_r_data(ext_r_data),
    .ext_r_en(ext_r_en),
    .ext_w_data(ext_w_data),
    .ext_w_en(ext_w_en),
    .memory_w_addr(memory_w_addr),
    .memory_w_data(memory_w_data),
    .memory_w_en(memory_w_en)
  );
  sru sru (
    .c_dir(sru_c_dir),
    .c_ld(sru_c_ld),
    .clk(clk),
    .r_o(sru_r_o),
    .rst(rst),
    .s_c(sru_s_c),
    .s_i(sru_s_i)
  );
  always @* begin
    \$next\halted  = 1'h0;
    \$next\halted  = \$1 ;
  end
  always @* begin
    \$next\fi_insn  = 16'h0000;
    \$next\fi_insn  = s_insn;
  end
  always @* begin
    \$next\i_regZ  = 3'h0;
    \$next\i_regZ  = s_insn[10:8];
  end
  always @* begin
    \$next\i_code1  = 1'h0;
    \$next\i_code1  = s_insn[11];
  end
  always @* begin
    \$next\i_code2  = 2'h0;
    \$next\i_code2  = s_insn[12:11];
  end
  always @* begin
    \$next\i_code3  = 3'h0;
    \$next\i_code3  = s_insn[13:11];
  end
  always @* begin
    \$next\i_code5  = 5'h00;
    \$next\i_code5  = s_insn[15:11];
  end
  always @* begin
    \$next\i_store  = 1'h0;
    \$next\i_store  = s_insn[11];
  end
  always @* begin
    \$next\i_ext  = 1'h0;
    \$next\i_ext  = s_insn[12];
  end
  always @* begin
    \$next\i_flag  = 1'h0;
    \$next\i_flag  = s_insn[11];
  end
  always @* begin
    \$next\i_cond  = 3'h0;
    \$next\i_cond  = s_insn[14:12];
  end
  always @* begin
    \$next\i_clsA  = 1'h0;
    \$next\i_clsA  = \$3 ;
  end
  always @* begin
    \$next\i_type1  = 1'h0;
    \$next\i_type1  = s_insn[0];
  end
  always @* begin
    \$next\i_clsS  = 1'h0;
    \$next\i_clsS  = \$5 ;
  end
  always @* begin
    \$next\i_clsM  = 1'h0;
    \$next\i_clsM  = \$7 ;
  end
  always @* begin
    \$next\i_clsI  = 1'h0;
    \$next\i_clsI  = \$9 ;
  end
  always @* begin
    \$next\i_clsC  = 1'h0;
    \$next\i_clsC  = \$11 ;
  end
  always @* begin
    \$next\s_cond  = 1'h0;
    casez ({ 1'h1, i_cond })
      4'h8:
          \$next\s_cond  = 1'h0;
      4'h9:
          \$next\s_cond  = r_z;
      4'ha:
          \$next\s_cond  = r_s;
      4'hc:
          \$next\s_cond  = r_v;
      4'hb:
          \$next\s_cond  = r_c;
      4'hd:
          \$next\s_cond  = \$15 ;
      4'he:
          \$next\s_cond  = \$17 ;
      4'hf:
          \$next\s_cond  = \$21 ;
    endcase
  end
  always @* begin
    \$next\s_z  = 1'h0;
    \$next\s_z  = \$23 ;
  end
  always @* begin
    \$next\s_s  = 1'h0;
    \$next\s_s  = s_res[15];
  end
  always @* begin
    \$next\s_c  = 1'h0;
    \$next\s_c  = s_res[16];
  end
  always @* begin
    \$next\s_v  = 1'h0;
    casez ({ s_res[15], s_opB[15], r_opA[15], \$25  })
      4'h8:
          \$next\s_v  = 1'h1;
      4'h6:
          \$next\s_v  = 1'h1;
      4'hd:
          \$next\s_v  = 1'h1;
      4'h3:
          \$next\s_v  = 1'h1;
    endcase
  end
  always @* begin
    \$next\fi_flags  = 4'h0;
    \$next\fi_flags  = { r_v, r_c, r_s, r_z };
    casez (c_flags)
      1'h1:
          \$next\fi_flags  = { s_v, s_c, s_s, s_z };
    endcase
  end
  always @* begin
    \$next\i_type2  = 2'h0;
    \$next\i_type2  = s_insn[1:0];
  end
  always @* begin
    \$next\r_z  = r_z;
    \$next\r_s  = r_s;
    \$next\r_c  = r_c;
    \$next\r_v  = r_v;
    casez (c_flags)
      1'h1:
          { \$next\r_v , \$next\r_c , \$next\r_s , \$next\r_z  } = { s_v, s_c, s_s, s_z };
    endcase
    casez (rst)
      1'h1:
        begin
          \$next\r_z  = 1'h0;
          \$next\r_s  = 1'h0;
          \$next\r_c  = 1'h0;
          \$next\r_v  = 1'h0;
        end
    endcase
  end
  always @* begin
    \$next\alu_s_a  = 16'h0000;
    \$next\alu_s_a  = r_opA;
  end
  always @* begin
    \$next\alu_s_b  = 16'h0000;
    \$next\alu_s_b  = s_opB;
  end
  always @* begin
    \$next\alu_c_sel  = 4'h0;
    casez (i_code5)
      5'h00:
          casez (i_type2)
            2'h0:
                \$next\alu_c_sel  = 4'h8;
            2'h1:
                \$next\alu_c_sel  = 4'h9;
            2'h2:
                \$next\alu_c_sel  = 4'ha;
          endcase
      5'h01:
          casez (i_type2)
            2'h0:
                \$next\alu_c_sel  = 4'h3;
            2'h1:
                \$next\alu_c_sel  = 4'h7;
            2'h2:
                \$next\alu_c_sel  = 4'h7;
          endcase
      5'h0b:
          \$next\alu_c_sel  = 4'h3;
    endcase
  end
  always @* begin
    \$next\s_sub  = 1'h0;
    casez (i_code5)
      5'h01:
          casez (i_type2)
            2'h1:
                \$next\s_sub  = 1'h1;
          endcase
    endcase
  end
  always @* begin
    \$next\s_cmp  = 1'h0;
    casez (i_code5)
      5'h01:
          casez (i_type2)
            2'h2:
                \$next\s_cmp  = 1'h1;
          endcase
    endcase
  end
  always @* begin
    \$next\sru_s_i  = 16'h0000;
    \$next\sru_s_i  = memory_r_data;
  end
  always @* begin
    \$next\i_shift  = 4'h0;
    \$next\i_shift  = s_insn[4:1];
  end
  always @* begin
    \$next\s_insn  = 16'h0000;
    \$next\s_insn  = \$27 ;
  end
  always @* begin
    \$next\memory_r_addr  = 9'h000;
    casez (fsm_state)
      4'h0:
          \$next\memory_r_addr  = r_pc;
      4'h1:
          casez ({ i_clsC, i_clsI, i_clsM, i_clsS, i_clsA })
            5'bzzzz1:
                \$next\memory_r_addr  = { r_win, i_regY };
            5'bzzz1z:
                \$next\memory_r_addr  = { r_win, i_regY };
            5'bzz1zz:
                \$next\memory_r_addr  = { r_win, i_regY };
            5'bz1zzz:
                \$next\memory_r_addr  = { r_win, i_regZ };
          endcase
      4'h2:
          \$next\memory_r_addr  = { r_win, i_regX };
      4'h5:
          \$next\memory_r_addr  = s_addr[8:0];
      4'h4:
          \$next\memory_r_addr  = { r_win, i_regZ };
    endcase
  end
  always @* begin
    \$next\memory_r_en  = 1'h0;
    casez (fsm_state)
      4'h0:
          \$next\memory_r_en  = 1'h1;
      4'h1:
          casez ({ i_clsC, i_clsI, i_clsM, i_clsS, i_clsA })
            5'bzzzz1:
                \$next\memory_r_en  = 1'h1;
            5'bzzz1z:
                \$next\memory_r_en  = 1'h1;
            5'bzz1zz:
                \$next\memory_r_en  = 1'h1;
            5'bz1zzz:
                \$next\memory_r_en  = 1'h1;
          endcase
      4'h2:
          \$next\memory_r_en  = 1'h1;
      4'h5:
          \$next\memory_r_en  = \$31 ;
      4'h4:
          \$next\memory_r_en  = 1'h1;
    endcase
  end
  always @* begin
    \$next\fi_pc  = fi_pc;
    casez (fsm_state)
      4'h0:
          \$next\fi_pc  = \$33 ;
    endcase
    casez (rst)
      1'h1:
          \$next\fi_pc  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\r_pc  = r_pc;
    casez (fsm_state)
      4'h0:
          \$next\r_pc  = \$35 [8:0];
      4'h1:
          casez ({ i_clsC, i_clsI, i_clsM, i_clsS, i_clsA })
            5'bzzzz1:
                /* empty */;
            5'bzzz1z:
                /* empty */;
            5'bzz1zz:
                /* empty */;
            5'bz1zzz:
                /* empty */;
            5'h1z:
                casez (\$38 )
                  1'h1:
                      \$next\r_pc  = \$40 [8:0];
                endcase
          endcase
      4'h8:
          \$next\r_pc  = \$43 [8:0];
      4'h9:
          \$next\r_pc  = \$46 [8:0];
    endcase
    casez (rst)
      1'h1:
          \$next\r_pc  = 9'h008;
    endcase
  end
  always @* begin
    \$next\fsm_state  = fsm_state;
    casez (fsm_state)
      4'h0:
          \$next\fsm_state  = 4'h1;
      4'h1:
          casez ({ i_clsC, i_clsI, i_clsM, i_clsS, i_clsA })
            5'bzzzz1:
                \$next\fsm_state  = 4'h2;
            5'bzzz1z:
                \$next\fsm_state  = 4'h3;
            5'bzz1zz:
                casez (i_store)
                  1'h1:
                      \$next\fsm_state  = 4'h4;
                  1'hz:
                      \$next\fsm_state  = 4'h5;
                endcase
            5'bz1zzz:
                casez ({ 2'h1, i_code3 })
                  5'h08:
                      \$next\fsm_state  = 4'h6;
                  5'h09:
                      \$next\fsm_state  = 4'h6;
                  5'h0a:
                      \$next\fsm_state  = 4'h6;
                  5'h0b:
                      \$next\fsm_state  = 4'h7;
                  5'h0c:
                      \$next\fsm_state  = 4'h5;
                  5'h0d:
                      \$next\fsm_state  = 4'h4;
                  5'h0e:
                      \$next\fsm_state  = 4'h8;
                  5'h0f:
                      \$next\fsm_state  = 4'h9;
                endcase
            5'h1z:
                \$next\fsm_state  = 4'h0;
          endcase
      4'h2:
          \$next\fsm_state  = 4'ha;
      4'ha:
          \$next\fsm_state  = 4'h0;
      4'h3:
          \$next\fsm_state  = 4'hb;
      4'hb:
          casez (\$49 )
            1'h1:
                \$next\fsm_state  = 4'h0;
          endcase
      4'h5:
          \$next\fsm_state  = 4'hc;
      4'hc:
          \$next\fsm_state  = 4'h0;
      4'h4:
          \$next\fsm_state  = 4'hd;
      4'hd:
          \$next\fsm_state  = 4'h0;
      4'h6:
          \$next\fsm_state  = 4'h0;
      4'h7:
          \$next\fsm_state  = 4'he;
      4'he:
          \$next\fsm_state  = 4'h0;
      4'h8:
          \$next\fsm_state  = 4'h0;
      4'h9:
          \$next\fsm_state  = 4'h0;
    endcase
    casez (rst)
      1'h1:
          \$next\fsm_state  = 4'h0;
    endcase
  end
  always @* begin
    \$next\r_insn  = r_insn;
    casez (fsm_state)
      4'h1:
          \$next\r_insn  = memory_r_data;
    endcase
    casez (rst)
      1'h1:
          \$next\r_insn  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\fi_stb  = 1'h0;
    casez (fsm_state)
      4'h1:
          casez ({ i_clsC, i_clsI, i_clsM, i_clsS, i_clsA })
            5'bzzzz1:
                /* empty */;
            5'bzzz1z:
                /* empty */;
            5'bzz1zz:
                /* empty */;
            5'bz1zzz:
                /* empty */;
            5'h1z:
                \$next\fi_stb  = 1'h1;
          endcase
      4'ha:
          \$next\fi_stb  = 1'h1;
      4'hb:
          casez (\$51 )
            1'h1:
                \$next\fi_stb  = 1'h1;
          endcase
      4'hc:
          \$next\fi_stb  = 1'h1;
      4'hd:
          \$next\fi_stb  = 1'h1;
      4'h6:
          \$next\fi_stb  = 1'h1;
      4'he:
          \$next\fi_stb  = 1'h1;
      4'h8:
          \$next\fi_stb  = 1'h1;
      4'h9:
          \$next\fi_stb  = 1'h1;
    endcase
  end
  always @* begin
    \$next\r_opA  = r_opA;
    casez (fsm_state)
      4'h2:
          \$next\r_opA  = memory_r_data;
      4'h7:
          \$next\r_opA  = memory_r_data;
    endcase
    casez (rst)
      1'h1:
          \$next\r_opA  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\s_opB  = 16'h0000;
    casez (fsm_state)
      4'ha:
          \$next\s_opB  = memory_r_data;
      4'he:
          \$next\s_opB  = { i_imm8[7], i_imm8[7], i_imm8[7], i_imm8[7], i_imm8[7], i_imm8[7], i_imm8[7], i_imm8[7], i_imm8 };
    endcase
  end
  always @* begin
    \$next\i_imm5  = 5'h00;
    \$next\i_imm5  = s_insn[4:0];
  end
  always @* begin
    \$next\s_res  = 17'h00000;
    casez (fsm_state)
      4'ha:
          \$next\s_res  = alu_s_o;
      4'hb:
          \$next\s_res  = \$53 ;
      4'he:
          \$next\s_res  = alu_s_o;
    endcase
  end
  always @* begin
    \$next\memory_w_addr  = 9'h000;
    casez (fsm_state)
      4'ha:
          \$next\memory_w_addr  = { r_win, i_regZ };
      4'hb:
          \$next\memory_w_addr  = { r_win, i_regZ };
      4'hc:
          \$next\memory_w_addr  = { r_win, i_regZ };
      4'hd:
          \$next\memory_w_addr  = r_addr[8:0];
      4'h6:
          \$next\memory_w_addr  = { r_win, i_regZ };
      4'he:
          \$next\memory_w_addr  = { r_win, i_regZ };
      4'h8:
          \$next\memory_w_addr  = { r_win, i_regZ };
    endcase
  end
  always @* begin
    \$next\memory_w_data  = 16'h0000;
    casez (fsm_state)
      4'ha:
          \$next\memory_w_data  = s_res[15:0];
      4'hb:
          \$next\memory_w_data  = s_res[15:0];
      4'hc:
          \$next\memory_w_data  = \$55 ;
      4'hd:
          \$next\memory_w_data  = memory_r_data;
      4'h6:
          casez ({ 3'h2, i_code2 })
            5'h08:
                \$next\memory_w_data  = { 8'h00, i_imm8 };
            5'h09:
                \$next\memory_w_data  = { i_imm8, 8'h00 };
            5'h0a:
                \$next\memory_w_data  = \$57 ;
          endcase
      4'he:
          \$next\memory_w_data  = s_res[15:0];
      4'h8:
          \$next\memory_w_data  = \$61 ;
    endcase
  end
  always @* begin
    \$next\memory_w_en  = 1'h0;
    casez (fsm_state)
      4'ha:
          \$next\memory_w_en  = \$63 ;
      4'hb:
          casez (\$65 )
            1'h1:
                \$next\memory_w_en  = 1'h1;
          endcase
      4'hc:
          \$next\memory_w_en  = 1'h1;
      4'hd:
          \$next\memory_w_en  = \$67 ;
      4'h6:
          \$next\memory_w_en  = 1'h1;
      4'he:
          \$next\memory_w_en  = 1'h1;
      4'h8:
          \$next\memory_w_en  = 1'h1;
    endcase
  end
  always @* begin
    \$next\c_flags  = 1'h0;
    casez (fsm_state)
      4'ha:
          \$next\c_flags  = 1'h1;
      4'hb:
          \$next\c_flags  = 1'h1;
      4'he:
          \$next\c_flags  = 1'h1;
    endcase
  end
  always @* begin
    \$next\sru_c_ld  = 1'h0;
    casez (fsm_state)
      4'h3:
          \$next\sru_c_ld  = 1'h1;
    endcase
  end
  always @* begin
    \$next\r_shift  = r_shift;
    casez (fsm_state)
      4'h3:
          \$next\r_shift  = \$69 ;
      4'hb:
          \$next\r_shift  = \$71 [4:0];
    endcase
    casez (rst)
      1'h1:
          \$next\r_shift  = 5'h00;
    endcase
  end
  always @* begin
    \$next\sru_c_dir  = 1'h0;
    casez (fsm_state)
      4'hb:
          casez ({ 4'h1, i_code1 })
            5'h02:
                casez (i_type1)
                  1'h0:
                      \$next\sru_c_dir  = 1'h0;
                  1'h1:
                      \$next\sru_c_dir  = 1'h0;
                endcase
            5'h03:
                casez (i_type1)
                  1'h0:
                      \$next\sru_c_dir  = 1'h1;
                  1'h1:
                      \$next\sru_c_dir  = 1'h1;
                endcase
          endcase
    endcase
  end
  always @* begin
    \$next\sru_s_c  = 1'h0;
    casez (fsm_state)
      4'hb:
          casez ({ 4'h1, i_code1 })
            5'h02:
                casez (i_type1)
                  1'h0:
                      \$next\sru_s_c  = 1'h0;
                  1'h1:
                      \$next\sru_s_c  = sru_r_o[15];
                endcase
            5'h03:
                casez (i_type1)
                  1'h0:
                      \$next\sru_s_c  = 1'h0;
                  1'h1:
                      \$next\sru_s_c  = sru_r_o[15];
                endcase
          endcase
    endcase
  end
  always @* begin
    \$next\s_addr  = 16'h0000;
    casez (fsm_state)
      4'h5:
          casez (i_clsI)
            1'h1:
                \$next\s_addr  = \$74 ;
            1'hz:
                \$next\s_addr  = \$78 [15:0];
          endcase
    endcase
  end
  always @* begin
    \$next\i_imm8  = 8'h00;
    \$next\i_imm8  = s_insn[7:0];
  end
  always @* begin
    \$next\ext_addr  = 16'h0000;
    casez (fsm_state)
      4'h5:
          \$next\ext_addr  = s_addr;
      4'hd:
          \$next\ext_addr  = r_addr;
    endcase
  end
  always @* begin
    \$next\ext_r_en  = 1'h0;
    casez (fsm_state)
      4'h5:
          \$next\ext_r_en  = i_ext;
    endcase
  end
  always @* begin
    \$next\r_addr  = r_addr;
    casez (fsm_state)
      4'h4:
          casez (i_clsI)
            1'h1:
                \$next\r_addr  = \$81 ;
            1'hz:
                \$next\r_addr  = \$85 [15:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\r_addr  = 16'h0000;
    endcase
  end
  always @* begin
    \$next\ext_w_data  = 16'h0000;
    casez (fsm_state)
      4'hd:
          \$next\ext_w_data  = memory_r_data;
    endcase
  end
  always @* begin
    \$next\ext_w_en  = 1'h0;
    casez (fsm_state)
      4'hd:
          \$next\ext_w_en  = i_ext;
    endcase
  end
  always @* begin
    \$next\i_imm11  = 11'h000;
    \$next\i_imm11  = s_insn[10:0];
  end
  always @* begin
    \$next\i_regX  = 3'h0;
    \$next\i_regX  = s_insn[4:2];
  end
  always @* begin
    \$next\i_regY  = 3'h0;
    \$next\i_regY  = s_insn[7:5];
  end
  assign \$35  = \$36 ;
  assign \$40  = \$41 ;
  assign \$43  = \$44 ;
  assign \$46  = \$47 ;
  assign \$71  = \$72 ;
  assign \$78  = \$79 ;
  assign \$85  = \$86 ;
  assign ext_w_en = \$next\ext_w_en ;
  assign ext_w_data = \$next\ext_w_data ;
  assign ext_r_en = \$next\ext_r_en ;
  assign ext_addr = \$next\ext_addr ;
  assign s_addr = \$next\s_addr ;
  assign sru_s_c = \$next\sru_s_c ;
  assign sru_c_dir = \$next\sru_c_dir ;
  assign sru_c_ld = \$next\sru_c_ld ;
  assign c_flags = \$next\c_flags ;
  assign memory_w_en = \$next\memory_w_en ;
  assign memory_w_data = \$next\memory_w_data ;
  assign memory_w_addr = \$next\memory_w_addr ;
  assign s_res = \$next\s_res ;
  assign s_opB = \$next\s_opB ;
  assign fi_stb = \$next\fi_stb ;
  assign memory_r_en = \$next\memory_r_en ;
  assign memory_r_addr = \$next\memory_r_addr ;
  assign s_insn = \$next\s_insn ;
  assign sru_s_i = \$next\sru_s_i ;
  assign s_cmp = \$next\s_cmp ;
  assign s_sub = \$next\s_sub ;
  assign alu_c_sel = \$next\alu_c_sel ;
  assign alu_s_b = \$next\alu_s_b ;
  assign alu_s_a = \$next\alu_s_a ;
  assign fi_flags = \$next\fi_flags ;
  assign s_v = \$next\s_v ;
  assign s_c = \$next\s_c ;
  assign s_s = \$next\s_s ;
  assign s_z = \$next\s_z ;
  assign s_cond = \$next\s_cond ;
  assign i_clsC = \$next\i_clsC ;
  assign i_clsI = \$next\i_clsI ;
  assign i_clsM = \$next\i_clsM ;
  assign i_clsS = \$next\i_clsS ;
  assign i_clsA = \$next\i_clsA ;
  assign i_cond = \$next\i_cond ;
  assign i_flag = \$next\i_flag ;
  assign i_ext = \$next\i_ext ;
  assign i_store = \$next\i_store ;
  assign i_code5 = \$next\i_code5 ;
  assign i_code3 = \$next\i_code3 ;
  assign i_code2 = \$next\i_code2 ;
  assign i_code1 = \$next\i_code1 ;
  assign i_regZ = \$next\i_regZ ;
  assign i_regY = \$next\i_regY ;
  assign i_regX = \$next\i_regX ;
  assign i_imm11 = \$next\i_imm11 ;
  assign i_imm8 = \$next\i_imm8 ;
  assign i_imm5 = \$next\i_imm5 ;
  assign i_shift = \$next\i_shift ;
  assign i_type2 = \$next\i_type2 ;
  assign i_type1 = \$next\i_type1 ;
  assign fi_insn = \$next\fi_insn ;
  assign halted = \$next\halted ;
endmodule

(* generator = "nMigen" *)
module formal(memory_w_data, memory_w_en, ext_addr, ext_r_data, ext_r_en, ext_w_data, ext_w_en, memory_w_addr);
  wire [15:0] \$1 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:25" *)
  reg [15:0] \$next\fi_ext_addr ;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:26" *)
  reg [15:0] \$next\fi_ext_r_data ;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:27" *)
  reg \$next\fi_ext_r_en ;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:28" *)
  reg [15:0] \$next\fi_ext_w_data ;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:29" *)
  reg \$next\fi_ext_w_en ;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:20" *)
  reg [15:0] \$next\fi_mem_w_addr ;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:21" *)
  reg [15:0] \$next\fi_mem_w_data ;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:22" *)
  reg \$next\fi_mem_w_en ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:31" *)
  input [15:0] ext_addr;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:33" *)
  input [15:0] ext_r_data;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:32" *)
  input ext_r_en;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:35" *)
  input [15:0] ext_w_data;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:34" *)
  input ext_w_en;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:25" *)
  wire [15:0] fi_ext_addr;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:26" *)
  wire [15:0] fi_ext_r_data;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:27" *)
  wire fi_ext_r_en;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:28" *)
  wire [15:0] fi_ext_w_data;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:29" *)
  wire fi_ext_w_en;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:20" *)
  wire [15:0] fi_mem_w_addr;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:21" *)
  wire [15:0] fi_mem_w_data;
  (* src = "/usr/lib/python3.7/boneless/gateware/formal.py:22" *)
  wire fi_mem_w_en;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:146" *)
  input [8:0] memory_w_addr;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:148" *)
  input [15:0] memory_w_data;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:150" *)
  input memory_w_en;
  assign \$1  = + (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:146" *) memory_w_addr;
  always @* begin
    \$next\fi_mem_w_addr  = 16'h0000;
    \$next\fi_mem_w_addr  = \$1 ;
  end
  always @* begin
    \$next\fi_mem_w_data  = 16'h0000;
    \$next\fi_mem_w_data  = memory_w_data;
  end
  always @* begin
    \$next\fi_mem_w_en  = 1'h0;
    \$next\fi_mem_w_en  = memory_w_en;
  end
  always @* begin
    \$next\fi_ext_addr  = 16'h0000;
    \$next\fi_ext_addr  = ext_addr;
  end
  always @* begin
    \$next\fi_ext_r_data  = 16'h0000;
    \$next\fi_ext_r_data  = ext_r_data;
  end
  always @* begin
    \$next\fi_ext_r_en  = 1'h0;
    \$next\fi_ext_r_en  = ext_r_en;
  end
  always @* begin
    \$next\fi_ext_w_data  = 16'h0000;
    \$next\fi_ext_w_data  = ext_w_data;
  end
  always @* begin
    \$next\fi_ext_w_en  = 1'h0;
    \$next\fi_ext_w_en  = ext_w_en;
  end
  assign fi_ext_w_en = \$next\fi_ext_w_en ;
  assign fi_ext_w_data = \$next\fi_ext_w_data ;
  assign fi_ext_r_en = \$next\fi_ext_r_en ;
  assign fi_ext_r_data = \$next\fi_ext_r_data ;
  assign fi_ext_addr = \$next\fi_ext_addr ;
  assign fi_mem_w_en = \$next\fi_mem_w_en ;
  assign fi_mem_w_data = \$next\fi_mem_w_data ;
  assign fi_mem_w_addr = \$next\fi_mem_w_addr ;
endmodule

(* generator = "nMigen" *)
module sru(c_dir, c_ld, s_i, rst, clk, r_o, s_c);
  wire [15:0] \$1 ;
  wire [15:0] \$3 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:90" *)
  reg [15:0] \$next\r_o ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:99" *)
  reg [15:0] \$next\s_l ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:102" *)
  reg [15:0] \$next\s_m1n0 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:101" *)
  reg [15:0] \$next\s_m2n0 ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:100" *)
  reg [15:0] \$next\s_r ;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:93" *)
  input c_dir;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:92" *)
  input c_ld;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/mem.py:160" *)
  input clk;
  (* init = 16'h0000 *)
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:90" *)
  output [15:0] r_o;
  reg [15:0] r_o = 16'h0000;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:304" *)
  input rst;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:89" *)
  input s_c;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:88" *)
  input [15:0] s_i;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:99" *)
  wire [15:0] s_l;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:102" *)
  wire [15:0] s_m1n0;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:101" *)
  wire [15:0] s_m2n0;
  (* src = "/usr/lib/python3.7/boneless/gateware/core_fsm.py:100" *)
  wire [15:0] s_r;
  assign \$1  = c_dir ? (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:22" *) s_r : s_l;
  assign \$3  = c_ld ? (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:22" *) s_i : s_m2n0;
  always @(posedge clk)
      r_o <= \$next\r_o ;
  always @* begin
    \$next\s_l  = 16'h0000;
    \$next\s_l  = { r_o[14:0], s_c };
  end
  always @* begin
    \$next\s_r  = 16'h0000;
    \$next\s_r  = { s_c, r_o[15:1] };
  end
  always @* begin
    \$next\s_m2n0  = 16'h0000;
    \$next\s_m2n0  = \$1 ;
  end
  always @* begin
    \$next\s_m1n0  = 16'h0000;
    \$next\s_m1n0  = \$3 ;
  end
  always @* begin
    \$next\r_o  = r_o;
    \$next\r_o  = s_m1n0;
    casez (rst)
      1'h1:
          \$next\r_o  = 16'h0000;
    endcase
  end
  assign s_m1n0 = \$next\s_m1n0 ;
  assign s_m2n0 = \$next\s_m2n0 ;
  assign s_r = \$next\s_r ;
  assign s_l = \$next\s_l ;
endmodule
