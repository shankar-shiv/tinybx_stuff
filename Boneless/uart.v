/* Generated by Yosys 0.8+308 (git sha1 7682629b, clang 7.0.1-4 -fPIC -Os) */

(* \nmigen.hierarchy  = "top.rx.anonymous" *)
(* generator = "nMigen" *)
module anonymous(clk, rx, \rx$1 , rst);
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/lib/cdc.py:59" *)
  reg \$next\cdc0 ;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/lib/cdc.py:59" *)
  reg \$next\cdc1 ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:21" *)
  reg \$next\rx ;
  (* init = 1'h0 *)
  (* no_retiming = 32'd1 *)
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/lib/cdc.py:59" *)
  reg cdc0 = 1'h0;
  (* init = 1'h0 *)
  (* no_retiming = 32'd1 *)
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/lib/cdc.py:59" *)
  reg cdc1 = 1'h0;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:330" *)
  input clk;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:330" *)
  input rst;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:21" *)
  output rx;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:10" *)
  input \rx$1 ;
  always @(posedge clk)
      cdc0 <= \$next\cdc0 ;
  always @(posedge clk)
      cdc1 <= \$next\cdc1 ;
  always @* begin
    \$next\cdc0  = cdc0;
    \$next\cdc0  = \rx$1 ;
  end
  always @* begin
    \$next\cdc1  = cdc1;
    \$next\cdc1  = cdc0;
  end
  always @* begin
    \$next\rx  = 1'h0;
    \$next\rx  = cdc1;
  end
  assign rx = \$next\rx ;
endmodule

(* \nmigen.hierarchy  = "top.rx" *)
(* generator = "nMigen" *)
module rx(clk, rx, rst);
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire [4:0] \$25 ;
  wire [4:0] \$26 ;
  wire \$28 ;
  wire \$3 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire [32:0] \$40 ;
  wire \$5 ;
  wire \$7 ;
  wire \$9 ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:11" *)
  reg [7:0] \$next\data ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:19" *)
  reg [31:0] \$next\phase_accumulator_rx ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:25" *)
  reg [3:0] \$next\rx_bitcount ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:26" *)
  reg \$next\rx_busy ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:23" *)
  reg \$next\rx_r ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:24" *)
  reg [7:0] \$next\rx_reg ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:12" *)
  reg \$next\stb ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:18" *)
  reg \$next\uart_clk_rxen ;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:330" *)
  input clk;
  (* init = 8'h00 *)
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:11" *)
  reg [7:0] data = 8'h00;
  (* init = 32'd0 *)
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:19" *)
  reg [31:0] phase_accumulator_rx = 32'd0;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:330" *)
  input rst;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:10" *)
  input rx;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:21" *)
  wire \rx$1 ;
  (* init = 4'h0 *)
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:25" *)
  reg [3:0] rx_bitcount = 4'h0;
  (* init = 1'h0 *)
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:26" *)
  reg rx_busy = 1'h0;
  (* init = 1'h0 *)
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:23" *)
  reg rx_r = 1'h0;
  (* init = 8'h00 *)
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:24" *)
  reg [7:0] rx_reg = 8'h00;
  (* init = 1'h0 *)
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:12" *)
  reg stb = 1'h0;
  (* init = 1'h0 *)
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:18" *)
  reg uart_clk_rxen = 1'h0;
  assign \$9  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:33" *) rx_busy;
  assign \$11  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:34" *) \rx$1 ;
  assign \$13  = \$11  & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:34" *) rx_r;
  assign \$15  = rx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:42" *) 1'h0;
  assign \$17  = rx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:45" *) 4'h9;
  anonymous \$2  (
    .clk(clk),
    .rst(rst),
    .rx(\rx$1 ),
    .\rx$1 (rx)
  );
  assign \$19  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:33" *) rx_busy;
  assign \$21  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:34" *) \rx$1 ;
  assign \$23  = \$21  & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:34" *) rx_r;
  assign \$26  = rx_bitcount + (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:41" *) 1'h1;
  assign \$28  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:33" *) rx_busy;
  assign \$30  = rx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:42" *) 1'h0;
  assign \$32  = rx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:45" *) 4'h9;
  assign \$34  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:33" *) rx_busy;
  assign \$36  = rx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:42" *) 1'h0;
  assign \$38  = rx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:45" *) 4'h9;
  assign \$3  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:33" *) rx_busy;
  assign \$40  = phase_accumulator_rx + (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:55" *) 17'h1b774;
  assign \$5  = rx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:42" *) 1'h0;
  assign \$7  = rx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:45" *) 4'h9;
  always @(posedge clk)
      phase_accumulator_rx <= \$next\phase_accumulator_rx ;
  always @(posedge clk)
      uart_clk_rxen <= \$next\uart_clk_rxen ;
  always @(posedge clk)
      rx_reg <= \$next\rx_reg ;
  always @(posedge clk)
      data <= \$next\data ;
  always @(posedge clk)
      rx_bitcount <= \$next\rx_bitcount ;
  always @(posedge clk)
      rx_busy <= \$next\rx_busy ;
  always @(posedge clk)
      rx_r <= \$next\rx_r ;
  always @(posedge clk)
      stb <= \$next\stb ;
  always @* begin
    \$next\stb  = stb;
    \$next\stb  = 1'h0;
    casez (\$3 )
      1'h1:
          /* empty */;
      1'hz:
          casez (uart_clk_rxen)
            1'h1:
                casez ({ \$7 , \$5  })
                  2'bz1:
                      /* empty */;
                  2'b1z:
                      casez (\rx$1 )
                        1'h1:
                            \$next\stb  = 1'h1;
                      endcase
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\stb  = 1'h0;
    endcase
  end
  always @* begin
    \$next\rx_r  = rx_r;
    \$next\rx_r  = \rx$1 ;
    casez (rst)
      1'h1:
          \$next\rx_r  = 1'h0;
    endcase
  end
  always @* begin
    \$next\rx_busy  = rx_busy;
    casez (\$9 )
      1'h1:
          casez (\$13 )
            1'h1:
                \$next\rx_busy  = 1'h1;
          endcase
      1'hz:
          casez (uart_clk_rxen)
            1'h1:
                casez ({ \$17 , \$15  })
                  2'bz1:
                      casez (\rx$1 )
                        1'h1:
                            \$next\rx_busy  = 1'h0;
                      endcase
                  2'b1z:
                      \$next\rx_busy  = 1'h0;
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\rx_busy  = 1'h0;
    endcase
  end
  always @* begin
    \$next\rx_bitcount  = rx_bitcount;
    casez (\$19 )
      1'h1:
          casez (\$23 )
            1'h1:
                \$next\rx_bitcount  = 4'h0;
          endcase
      1'hz:
          casez (uart_clk_rxen)
            1'h1:
                \$next\rx_bitcount  = \$25 [3:0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\rx_bitcount  = 4'h0;
    endcase
  end
  always @* begin
    \$next\data  = data;
    casez (\$28 )
      1'h1:
          /* empty */;
      1'hz:
          casez (uart_clk_rxen)
            1'h1:
                casez ({ \$32 , \$30  })
                  2'bz1:
                      /* empty */;
                  2'b1z:
                      casez (\rx$1 )
                        1'h1:
                            \$next\data  = rx_reg;
                      endcase
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\data  = 8'h00;
    endcase
  end
  always @* begin
    \$next\rx_reg  = rx_reg;
    casez (\$34 )
      1'h1:
          /* empty */;
      1'hz:
          casez (uart_clk_rxen)
            1'h1:
                casez ({ \$38 , \$36  })
                  2'bz1:
                      /* empty */;
                  2'b1z:
                      /* empty */;
                  2'hz:
                      \$next\rx_reg  = { \rx$1 , rx_reg[7:1] };
                endcase
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\rx_reg  = 8'h00;
    endcase
  end
  always @* begin
    \$next\phase_accumulator_rx  = phase_accumulator_rx;
    \$next\uart_clk_rxen  = uart_clk_rxen;
    casez (rx_busy)
      1'h1:
          { \$next\uart_clk_rxen , \$next\phase_accumulator_rx  } = \$40 ;
      1'hz:
          { \$next\uart_clk_rxen , \$next\phase_accumulator_rx  } = 33'h080000000;
    endcase
    casez (rst)
      1'h1:
        begin
          \$next\phase_accumulator_rx  = 32'd0;
          \$next\uart_clk_rxen  = 1'h0;
        end
    endcase
  end
  assign \$25  = \$26 ;
endmodule

(* \nmigen.hierarchy  = "top" *)
(* top =  1  *)
(* generator = "nMigen" *)
module top(rx, clk, rst, tx);
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:330" *)
  input clk;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:330" *)
  input rst;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:10" *)
  input rx;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:72" *)
  output tx;
  rx \rx$2  (
    .clk(clk),
    .rst(rst),
    .rx(rx)
  );
  tx \tx$1  (
    .clk(clk),
    .rst(rst),
    .tx(tx)
  );
endmodule

(* \nmigen.hierarchy  = "top.tx" *)
(* generator = "nMigen" *)
module tx(rst, clk, tx);
  wire \$1 ;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire [4:0] \$39 ;
  wire [4:0] \$40 ;
  wire \$42 ;
  wire \$44 ;
  wire \$46 ;
  wire \$48 ;
  wire \$5 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire \$58 ;
  wire \$60 ;
  wire \$62 ;
  wire \$64 ;
  wire \$66 ;
  wire \$68 ;
  wire \$7 ;
  wire [32:0] \$70 ;
  wire \$9 ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:75" *)
  reg \$next\ack ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:82" *)
  reg [31:0] \$next\phase_accumulator_tx ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:72" *)
  reg \$next\tx ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:85" *)
  reg [3:0] \$next\tx_bitcount ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:86" *)
  reg \$next\tx_busy ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:84" *)
  reg [7:0] \$next\tx_reg ;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:81" *)
  reg \$next\uart_clk_txen ;
  (* init = 1'h0 *)
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:75" *)
  reg ack = 1'h0;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:330" *)
  input clk;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:73" *)
  wire [7:0] data;
  (* init = 32'd0 *)
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:82" *)
  reg [31:0] phase_accumulator_tx = 32'd0;
  (* src = "/usr/local/lib/python3.7/dist-packages/nmigen-0.1-py3.7.egg/nmigen/hdl/ir.py:330" *)
  input rst;
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:74" *)
  wire stb;
  (* init = 1'h1 *)
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:72" *)
  output tx;
  reg tx = 1'h1;
  (* init = 4'h0 *)
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:85" *)
  reg [3:0] tx_bitcount = 4'h0;
  (* init = 1'h0 *)
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:86" *)
  reg tx_busy = 1'h0;
  (* init = 8'h00 *)
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:84" *)
  reg [7:0] tx_reg = 8'h00;
  (* init = 1'h0 *)
  (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:81" *)
  reg uart_clk_txen = 1'h0;
  assign \$9  = uart_clk_txen & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:95" *) tx_busy;
  assign \$11  = tx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:97" *) 4'h8;
  assign \$13  = tx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:99" *) 4'h9;
  assign \$15  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) tx_busy;
  assign \$17  = stb & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) \$15 ;
  assign \$1  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) tx_busy;
  assign \$19  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) ack;
  assign \$21  = \$17  & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) \$19 ;
  assign \$23  = uart_clk_txen & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:95" *) tx_busy;
  assign \$25  = tx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:97" *) 4'h8;
  assign \$27  = tx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:99" *) 4'h9;
  assign \$29  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) tx_busy;
  assign \$31  = stb & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) \$29 ;
  assign \$33  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) ack;
  assign \$35  = \$31  & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) \$33 ;
  assign \$37  = uart_clk_txen & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:95" *) tx_busy;
  assign \$3  = stb & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) \$1 ;
  assign \$40  = tx_bitcount + (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:96" *) 1'h1;
  assign \$42  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) tx_busy;
  assign \$44  = stb & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) \$42 ;
  assign \$46  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) ack;
  assign \$48  = \$44  & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) \$46 ;
  assign \$50  = uart_clk_txen & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:95" *) tx_busy;
  assign \$52  = tx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:97" *) 4'h8;
  assign \$54  = tx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:99" *) 4'h9;
  assign \$56  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) tx_busy;
  assign \$58  = stb & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) \$56 ;
  assign \$5  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) ack;
  assign \$60  = ~ (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) ack;
  assign \$62  = \$58  & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) \$60 ;
  assign \$64  = uart_clk_txen & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:95" *) tx_busy;
  assign \$66  = tx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:97" *) 4'h8;
  assign \$68  = tx_bitcount == (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:99" *) 4'h9;
  assign \$70  = phase_accumulator_tx + (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:111" *) 17'h1b774;
  assign \$7  = \$3  & (* src = "/opt/FPGA/tinybx_stuff/Boneless/uart.py:88" *) \$5 ;
  always @(posedge clk)
      phase_accumulator_tx <= \$next\phase_accumulator_tx ;
  always @(posedge clk)
      uart_clk_txen <= \$next\uart_clk_txen ;
  always @(posedge clk)
      tx <= \$next\tx ;
  always @(posedge clk)
      tx_busy <= \$next\tx_busy ;
  always @(posedge clk)
      tx_bitcount <= \$next\tx_bitcount ;
  always @(posedge clk)
      tx_reg <= \$next\tx_reg ;
  always @(posedge clk)
      ack <= \$next\ack ;
  always @* begin
    \$next\ack  = ack;
    \$next\ack  = 1'h0;
    casez ({ \$9 , \$7  })
      2'bz1:
          /* empty */;
      2'b1z:
          casez ({ \$13 , \$11  })
            2'bz1:
                /* empty */;
            2'b1z:
                \$next\ack  = 1'h1;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\ack  = 1'h0;
    endcase
  end
  always @* begin
    \$next\tx_reg  = tx_reg;
    casez ({ \$23 , \$21  })
      2'bz1:
          \$next\tx_reg  = data;
      2'b1z:
          casez ({ \$27 , \$25  })
            2'bz1:
                /* empty */;
            2'b1z:
                /* empty */;
            2'hz:
                \$next\tx_reg  = { 1'h0, tx_reg[7:1] };
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\tx_reg  = 8'h00;
    endcase
  end
  always @* begin
    \$next\tx_bitcount  = tx_bitcount;
    casez ({ \$37 , \$35  })
      2'bz1:
          \$next\tx_bitcount  = 4'h0;
      2'b1z:
          \$next\tx_bitcount  = \$39 [3:0];
    endcase
    casez (rst)
      1'h1:
          \$next\tx_bitcount  = 4'h0;
    endcase
  end
  always @* begin
    \$next\tx_busy  = tx_busy;
    casez ({ \$50 , \$48  })
      2'bz1:
          \$next\tx_busy  = 1'h1;
      2'b1z:
          casez ({ \$54 , \$52  })
            2'bz1:
                /* empty */;
            2'b1z:
                \$next\tx_busy  = 1'h0;
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\tx_busy  = 1'h0;
    endcase
  end
  always @* begin
    \$next\tx  = tx;
    casez ({ \$64 , \$62  })
      2'bz1:
          \$next\tx  = 1'h0;
      2'b1z:
          casez ({ \$68 , \$66  })
            2'bz1:
                \$next\tx  = 1'h1;
            2'b1z:
                \$next\tx  = 1'h1;
            2'hz:
                \$next\tx  = tx_reg[0];
          endcase
    endcase
    casez (rst)
      1'h1:
          \$next\tx  = 1'h1;
    endcase
  end
  always @* begin
    \$next\phase_accumulator_tx  = phase_accumulator_tx;
    \$next\uart_clk_txen  = uart_clk_txen;
    casez (tx_busy)
      1'h1:
          { \$next\uart_clk_txen , \$next\phase_accumulator_tx  } = \$70 ;
      1'hz:
          { \$next\uart_clk_txen , \$next\phase_accumulator_tx  } = 33'h000000000;
    endcase
    casez (rst)
      1'h1:
        begin
          \$next\phase_accumulator_tx  = 32'd0;
          \$next\uart_clk_txen  = 1'h0;
        end
    endcase
  end
  assign \$39  = \$40 ;
  assign stb = 1'h0;
  assign data = 8'h00;
endmodule

