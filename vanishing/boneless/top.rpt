
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+510 (git sha1 36120fcc, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Executing script file `top.ys' --

1. Executing ILANG frontend.
Input filename: top.il

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \cpu
Used module:         \core
Used module:             \sru
Used module:             \alu
Used module:             \formal

2.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \cpu
Used module:         \core
Used module:             \sru
Used module:             \alu
Used module:             \formal
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $group_62 in module core.
Marked 1 switch rules as full_case in process $group_59 in module core.
Marked 3 switch rules as full_case in process $group_58 in module core.
Marked 3 switch rules as full_case in process $group_57 in module core.
Marked 2 switch rules as full_case in process $group_45 in module core.
Marked 1 switch rules as full_case in process $group_24 in module core.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\core.$group_62'.
  Set init value: \r_addr = 16'0000000000000000
Found init rule in `\core.$group_56'.
  Set init value: \r_shift = 5'00000
Found init rule in `\core.$group_48'.
  Set init value: \r_opA = 16'0000000000000000
Found init rule in `\core.$group_46'.
  Set init value: \r_insn = 16'0000000000000000
Found init rule in `\core.$group_45'.
  Set init value: \fsm_state = 4'0000
Found init rule in `\core.$group_44'.
  Set init value: \r_pc = 8'00001000
Found init rule in `\core.$group_43'.
  Set init value: \fi_pc = 16'0000000000000000
Found init rule in `\core.$group_30'.
  Set init value: \r_z = 1'0
  Set init value: \r_s = 1'0
  Set init value: \r_c = 1'0
  Set init value: \r_v = 1'0
Found init rule in `\sru.$group_4'.
  Set init value: \r_o = 16'0000000000000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$group_0'.
     1/1: $next\cpu_clk
Creating decoders for process `\core.$group_64'.
     1/1: $next\formal_ext_w_en
Creating decoders for process `\core.$group_63'.
     1/1: $next\formal_ext_w_data
Creating decoders for process `\core.$group_62'.
     1/1: $next\r_addr
Creating decoders for process `\core.$group_61'.
     1/1: $next\formal_ext_r_en
Creating decoders for process `\core.$group_60'.
     1/1: $next\formal_ext_addr
Creating decoders for process `\core.$group_59'.
     1/1: $next\s_addr
Creating decoders for process `\core.$group_58'.
     1/1: $next\sru_s_c
Creating decoders for process `\core.$group_57'.
     1/1: $next\sru_c_dir
Creating decoders for process `\core.$group_56'.
     1/1: $next\r_shift
Creating decoders for process `\core.$group_55'.
     1/1: $next\sru_c_ld
Creating decoders for process `\core.$group_54'.
     1/1: $next\c_flags
Creating decoders for process `\core.$group_53'.
     1/1: $next\memory_w_en
Creating decoders for process `\core.$group_52'.
     1/1: $next\memory_w_data
Creating decoders for process `\core.$group_51'.
     1/1: $next\memory_w_addr
Creating decoders for process `\core.$group_50'.
     1/1: $next\s_res
Creating decoders for process `\core.$group_49'.
     1/1: $next\s_opB
Creating decoders for process `\core.$group_48'.
     1/1: $next\r_opA
Creating decoders for process `\core.$group_47'.
     1/1: $next\fi_stb
Creating decoders for process `\core.$group_46'.
     1/1: $next\r_insn
Creating decoders for process `\core.$group_45'.
     1/1: $next\fsm_state
Creating decoders for process `\core.$group_44'.
     1/1: $next\r_pc
Creating decoders for process `\core.$group_43'.
     1/1: $next\fi_pc
Creating decoders for process `\core.$group_42'.
     1/1: $next\memory_r_en
Creating decoders for process `\core.$group_41'.
     1/1: $next\memory_r_addr
Creating decoders for process `\core.$group_40'.
     1/1: $next\s_insn
Creating decoders for process `\core.$group_39'.
     1/1: $next\sru_s_i
Creating decoders for process `\core.$group_38'.
     1/1: $next\s_cmp
Creating decoders for process `\core.$group_37'.
     1/1: $next\s_sub
Creating decoders for process `\core.$group_36'.
     1/1: $next\alu_c_sel
Creating decoders for process `\core.$group_35'.
     1/1: $next\alu_s_b
Creating decoders for process `\core.$group_34'.
     1/1: $next\alu_s_a
Creating decoders for process `\core.$group_30'.
     1/4: $next\r_v
     2/4: $next\r_s
     3/4: $next\r_z
     4/4: $next\r_c
Creating decoders for process `\core.$group_29'.
     1/1: $next\fi_flags
Creating decoders for process `\core.$group_28'.
     1/1: $next\s_v
Creating decoders for process `\core.$group_27'.
     1/1: $next\s_c
Creating decoders for process `\core.$group_26'.
     1/1: $next\s_s
Creating decoders for process `\core.$group_25'.
     1/1: $next\s_z
Creating decoders for process `\core.$group_24'.
     1/1: $next\s_cond
Creating decoders for process `\core.$group_23'.
     1/1: $next\i_clsC
Creating decoders for process `\core.$group_22'.
     1/1: $next\i_clsI
Creating decoders for process `\core.$group_21'.
     1/1: $next\i_clsM
Creating decoders for process `\core.$group_20'.
     1/1: $next\i_clsS
Creating decoders for process `\core.$group_19'.
     1/1: $next\i_clsA
Creating decoders for process `\core.$group_18'.
     1/1: $next\i_cond
Creating decoders for process `\core.$group_17'.
     1/1: $next\i_flag
Creating decoders for process `\core.$group_16'.
     1/1: $next\i_ext
Creating decoders for process `\core.$group_15'.
     1/1: $next\i_store
Creating decoders for process `\core.$group_14'.
     1/1: $next\i_code5
Creating decoders for process `\core.$group_13'.
     1/1: $next\i_code3
Creating decoders for process `\core.$group_12'.
     1/1: $next\i_code2
Creating decoders for process `\core.$group_11'.
     1/1: $next\i_code1
Creating decoders for process `\core.$group_10'.
     1/1: $next\i_regZ
Creating decoders for process `\core.$group_9'.
     1/1: $next\i_regY
Creating decoders for process `\core.$group_8'.
     1/1: $next\i_regX
Creating decoders for process `\core.$group_7'.
     1/1: $next\i_imm11
Creating decoders for process `\core.$group_6'.
     1/1: $next\i_imm8
Creating decoders for process `\core.$group_5'.
     1/1: $next\i_imm5
Creating decoders for process `\core.$group_4'.
     1/1: $next\i_shift
Creating decoders for process `\core.$group_3'.
     1/1: $next\i_type2
Creating decoders for process `\core.$group_2'.
     1/1: $next\i_type1
Creating decoders for process `\core.$group_1'.
     1/1: $next\fi_insn
Creating decoders for process `\core.$group_0'.
     1/1: $next\halted
Creating decoders for process `\sru.$group_4'.
     1/1: $next\r_o
Creating decoders for process `\sru.$group_3'.
     1/1: $next\s_m1n0
Creating decoders for process `\sru.$group_2'.
     1/1: $next\s_m2n0
Creating decoders for process `\sru.$group_1'.
     1/1: $next\s_r
Creating decoders for process `\sru.$group_0'.
     1/1: $next\s_l
Creating decoders for process `\alu.$group_5'.
     1/1: $next\s_o
Creating decoders for process `\alu.$group_4'.
     1/1: $next\s_m1n0
Creating decoders for process `\alu.$group_3'.
     1/1: $next\s_m2n1
Creating decoders for process `\alu.$group_2'.
     1/1: $next\s_m2n0
Creating decoders for process `\alu.$group_1'.
     1/1: $next\s_m3n1
Creating decoders for process `\alu.$group_0'.
     1/1: $next\s_m3n0
Creating decoders for process `\formal.$group_7'.
     1/1: $next\fi_ext_w_en
Creating decoders for process `\formal.$group_6'.
     1/1: $next\fi_ext_w_data
Creating decoders for process `\formal.$group_5'.
     1/1: $next\fi_ext_r_en
Creating decoders for process `\formal.$group_4'.
     1/1: $next\fi_ext_r_data
Creating decoders for process `\formal.$group_3'.
     1/1: $next\fi_ext_addr
Creating decoders for process `\formal.$group_2'.
     1/1: $next\fi_mem_w_en
Creating decoders for process `\formal.$group_1'.
     1/1: $next\fi_mem_w_data
Creating decoders for process `\formal.$group_0'.
     1/1: $next\fi_mem_w_addr

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\cpu_clk' from process `\top.$group_0'.
No latch inferred for signal `\core.\formal_ext_w_en' from process `\core.$group_64'.
No latch inferred for signal `\core.\formal_ext_w_data' from process `\core.$group_63'.
No latch inferred for signal `\core.\formal_ext_r_en' from process `\core.$group_61'.
No latch inferred for signal `\core.\formal_ext_addr' from process `\core.$group_60'.
No latch inferred for signal `\core.\s_addr' from process `\core.$group_59'.
No latch inferred for signal `\core.\sru_s_c' from process `\core.$group_58'.
No latch inferred for signal `\core.\sru_c_dir' from process `\core.$group_57'.
No latch inferred for signal `\core.\sru_c_ld' from process `\core.$group_55'.
No latch inferred for signal `\core.\c_flags' from process `\core.$group_54'.
No latch inferred for signal `\core.\memory_w_en' from process `\core.$group_53'.
No latch inferred for signal `\core.\memory_w_data' from process `\core.$group_52'.
No latch inferred for signal `\core.\memory_w_addr' from process `\core.$group_51'.
No latch inferred for signal `\core.\s_res' from process `\core.$group_50'.
No latch inferred for signal `\core.\s_opB' from process `\core.$group_49'.
No latch inferred for signal `\core.\fi_stb' from process `\core.$group_47'.
No latch inferred for signal `\core.\memory_r_en' from process `\core.$group_42'.
No latch inferred for signal `\core.\memory_r_addr' from process `\core.$group_41'.
No latch inferred for signal `\core.\s_insn' from process `\core.$group_40'.
No latch inferred for signal `\core.\sru_s_i' from process `\core.$group_39'.
No latch inferred for signal `\core.\s_cmp' from process `\core.$group_38'.
No latch inferred for signal `\core.\s_sub' from process `\core.$group_37'.
No latch inferred for signal `\core.\alu_c_sel' from process `\core.$group_36'.
No latch inferred for signal `\core.\alu_s_b' from process `\core.$group_35'.
No latch inferred for signal `\core.\alu_s_a' from process `\core.$group_34'.
No latch inferred for signal `\core.\fi_flags' from process `\core.$group_29'.
No latch inferred for signal `\core.\s_v' from process `\core.$group_28'.
No latch inferred for signal `\core.\s_c' from process `\core.$group_27'.
No latch inferred for signal `\core.\s_s' from process `\core.$group_26'.
No latch inferred for signal `\core.\s_z' from process `\core.$group_25'.
No latch inferred for signal `\core.\s_cond' from process `\core.$group_24'.
No latch inferred for signal `\core.\i_clsC' from process `\core.$group_23'.
No latch inferred for signal `\core.\i_clsI' from process `\core.$group_22'.
No latch inferred for signal `\core.\i_clsM' from process `\core.$group_21'.
No latch inferred for signal `\core.\i_clsS' from process `\core.$group_20'.
No latch inferred for signal `\core.\i_clsA' from process `\core.$group_19'.
No latch inferred for signal `\core.\i_cond' from process `\core.$group_18'.
No latch inferred for signal `\core.\i_flag' from process `\core.$group_17'.
No latch inferred for signal `\core.\i_ext' from process `\core.$group_16'.
No latch inferred for signal `\core.\i_store' from process `\core.$group_15'.
No latch inferred for signal `\core.\i_code5' from process `\core.$group_14'.
No latch inferred for signal `\core.\i_code3' from process `\core.$group_13'.
No latch inferred for signal `\core.\i_code2' from process `\core.$group_12'.
No latch inferred for signal `\core.\i_code1' from process `\core.$group_11'.
No latch inferred for signal `\core.\i_regZ' from process `\core.$group_10'.
No latch inferred for signal `\core.\i_regY' from process `\core.$group_9'.
No latch inferred for signal `\core.\i_regX' from process `\core.$group_8'.
No latch inferred for signal `\core.\i_imm11' from process `\core.$group_7'.
No latch inferred for signal `\core.\i_imm8' from process `\core.$group_6'.
No latch inferred for signal `\core.\i_imm5' from process `\core.$group_5'.
No latch inferred for signal `\core.\i_shift' from process `\core.$group_4'.
No latch inferred for signal `\core.\i_type2' from process `\core.$group_3'.
No latch inferred for signal `\core.\i_type1' from process `\core.$group_2'.
No latch inferred for signal `\core.\fi_insn' from process `\core.$group_1'.
No latch inferred for signal `\core.\halted' from process `\core.$group_0'.
No latch inferred for signal `\sru.\s_m1n0' from process `\sru.$group_3'.
No latch inferred for signal `\sru.\s_m2n0' from process `\sru.$group_2'.
No latch inferred for signal `\sru.\s_r' from process `\sru.$group_1'.
No latch inferred for signal `\sru.\s_l' from process `\sru.$group_0'.
No latch inferred for signal `\alu.\s_o' from process `\alu.$group_5'.
No latch inferred for signal `\alu.\s_m1n0' from process `\alu.$group_4'.
No latch inferred for signal `\alu.\s_m2n1' from process `\alu.$group_3'.
No latch inferred for signal `\alu.\s_m2n0' from process `\alu.$group_2'.
No latch inferred for signal `\alu.\s_m3n1' from process `\alu.$group_1'.
No latch inferred for signal `\alu.\s_m3n0' from process `\alu.$group_0'.
No latch inferred for signal `\formal.\fi_ext_w_en' from process `\formal.$group_7'.
No latch inferred for signal `\formal.\fi_ext_w_data' from process `\formal.$group_6'.
No latch inferred for signal `\formal.\fi_ext_r_en' from process `\formal.$group_5'.
No latch inferred for signal `\formal.\fi_ext_r_data' from process `\formal.$group_4'.
No latch inferred for signal `\formal.\fi_ext_addr' from process `\formal.$group_3'.
No latch inferred for signal `\formal.\fi_mem_w_en' from process `\formal.$group_2'.
No latch inferred for signal `\formal.\fi_mem_w_data' from process `\formal.$group_1'.
No latch inferred for signal `\formal.\fi_mem_w_addr' from process `\formal.$group_0'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\core.\r_addr' using process `\core.$group_62'.
  created $dff cell `$procdff$273' with positive edge clock.
Creating register for signal `\core.\r_shift' using process `\core.$group_56'.
  created $dff cell `$procdff$274' with positive edge clock.
Creating register for signal `\core.\r_opA' using process `\core.$group_48'.
  created $dff cell `$procdff$275' with positive edge clock.
Creating register for signal `\core.\r_insn' using process `\core.$group_46'.
  created $dff cell `$procdff$276' with positive edge clock.
Creating register for signal `\core.\fsm_state' using process `\core.$group_45'.
  created $dff cell `$procdff$277' with positive edge clock.
Creating register for signal `\core.\r_pc' using process `\core.$group_44'.
  created $dff cell `$procdff$278' with positive edge clock.
Creating register for signal `\core.\fi_pc' using process `\core.$group_43'.
  created $dff cell `$procdff$279' with positive edge clock.
Creating register for signal `\core.\r_z' using process `\core.$group_30'.
  created $dff cell `$procdff$280' with positive edge clock.
Creating register for signal `\core.\r_s' using process `\core.$group_30'.
  created $dff cell `$procdff$281' with positive edge clock.
Creating register for signal `\core.\r_c' using process `\core.$group_30'.
  created $dff cell `$procdff$282' with positive edge clock.
Creating register for signal `\core.\r_v' using process `\core.$group_30'.
  created $dff cell `$procdff$283' with positive edge clock.
Creating register for signal `\sru.\r_o' using process `\sru.$group_4'.
  created $dff cell `$procdff$284' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$group_0'.
Found and cleaned up 1 empty switch in `\core.$group_64'.
Removing empty process `core.$group_64'.
Found and cleaned up 1 empty switch in `\core.$group_63'.
Removing empty process `core.$group_63'.
Found and cleaned up 3 empty switches in `\core.$group_62'.
Removing empty process `core.$group_62'.
Found and cleaned up 1 empty switch in `\core.$group_61'.
Removing empty process `core.$group_61'.
Found and cleaned up 1 empty switch in `\core.$group_60'.
Removing empty process `core.$group_60'.
Found and cleaned up 2 empty switches in `\core.$group_59'.
Removing empty process `core.$group_59'.
Found and cleaned up 4 empty switches in `\core.$group_58'.
Removing empty process `core.$group_58'.
Found and cleaned up 4 empty switches in `\core.$group_57'.
Removing empty process `core.$group_57'.
Found and cleaned up 2 empty switches in `\core.$group_56'.
Removing empty process `core.$group_56'.
Found and cleaned up 1 empty switch in `\core.$group_55'.
Removing empty process `core.$group_55'.
Found and cleaned up 1 empty switch in `\core.$group_54'.
Removing empty process `core.$group_54'.
Found and cleaned up 2 empty switches in `\core.$group_53'.
Removing empty process `core.$group_53'.
Found and cleaned up 2 empty switches in `\core.$group_52'.
Removing empty process `core.$group_52'.
Found and cleaned up 1 empty switch in `\core.$group_51'.
Removing empty process `core.$group_51'.
Found and cleaned up 1 empty switch in `\core.$group_50'.
Removing empty process `core.$group_50'.
Found and cleaned up 1 empty switch in `\core.$group_49'.
Removing empty process `core.$group_49'.
Found and cleaned up 2 empty switches in `\core.$group_48'.
Removing empty process `core.$group_48'.
Found and cleaned up 3 empty switches in `\core.$group_47'.
Removing empty process `core.$group_47'.
Found and cleaned up 2 empty switches in `\core.$group_46'.
Removing empty process `core.$group_46'.
Found and cleaned up 6 empty switches in `\core.$group_45'.
Removing empty process `core.$group_45'.
Found and cleaned up 4 empty switches in `\core.$group_44'.
Removing empty process `core.$group_44'.
Found and cleaned up 2 empty switches in `\core.$group_43'.
Removing empty process `core.$group_43'.
Found and cleaned up 2 empty switches in `\core.$group_42'.
Removing empty process `core.$group_42'.
Found and cleaned up 2 empty switches in `\core.$group_41'.
Removing empty process `core.$group_41'.
Removing empty process `core.$group_40'.
Removing empty process `core.$group_39'.
Found and cleaned up 2 empty switches in `\core.$group_38'.
Removing empty process `core.$group_38'.
Found and cleaned up 2 empty switches in `\core.$group_37'.
Removing empty process `core.$group_37'.
Found and cleaned up 3 empty switches in `\core.$group_36'.
Removing empty process `core.$group_36'.
Removing empty process `core.$group_35'.
Removing empty process `core.$group_34'.
Found and cleaned up 2 empty switches in `\core.$group_30'.
Removing empty process `core.$group_30'.
Found and cleaned up 1 empty switch in `\core.$group_29'.
Removing empty process `core.$group_29'.
Found and cleaned up 1 empty switch in `\core.$group_28'.
Removing empty process `core.$group_28'.
Removing empty process `core.$group_27'.
Removing empty process `core.$group_26'.
Removing empty process `core.$group_25'.
Found and cleaned up 1 empty switch in `\core.$group_24'.
Removing empty process `core.$group_24'.
Removing empty process `core.$group_23'.
Removing empty process `core.$group_22'.
Removing empty process `core.$group_21'.
Removing empty process `core.$group_20'.
Removing empty process `core.$group_19'.
Removing empty process `core.$group_18'.
Removing empty process `core.$group_17'.
Removing empty process `core.$group_16'.
Removing empty process `core.$group_15'.
Removing empty process `core.$group_14'.
Removing empty process `core.$group_13'.
Removing empty process `core.$group_12'.
Removing empty process `core.$group_11'.
Removing empty process `core.$group_10'.
Removing empty process `core.$group_9'.
Removing empty process `core.$group_8'.
Removing empty process `core.$group_7'.
Removing empty process `core.$group_6'.
Removing empty process `core.$group_5'.
Removing empty process `core.$group_4'.
Removing empty process `core.$group_3'.
Removing empty process `core.$group_2'.
Removing empty process `core.$group_1'.
Removing empty process `core.$group_0'.
Found and cleaned up 1 empty switch in `\sru.$group_4'.
Removing empty process `sru.$group_4'.
Removing empty process `sru.$group_3'.
Removing empty process `sru.$group_2'.
Removing empty process `sru.$group_1'.
Removing empty process `sru.$group_0'.
Removing empty process `alu.$group_5'.
Removing empty process `alu.$group_4'.
Removing empty process `alu.$group_3'.
Removing empty process `alu.$group_2'.
Removing empty process `alu.$group_1'.
Removing empty process `alu.$group_0'.
Removing empty process `formal.$group_7'.
Removing empty process `formal.$group_6'.
Removing empty process `formal.$group_5'.
Removing empty process `formal.$group_4'.
Removing empty process `formal.$group_3'.
Removing empty process `formal.$group_2'.
Removing empty process `formal.$group_1'.
Removing empty process `formal.$group_0'.
Cleaned up 64 empty switches.

2.4. Executing FLATTEN pass (flatten design).
Using template cpu for cells of type cpu.
Using template core for cells of type core.
Using template sru for cells of type sru.
Using template alu for cells of type alu.
Using template formal for cells of type formal.
<suppressed ~5 debug messages>
No more expansions possible.
Deleting now unused module cpu.
Deleting now unused module core.
Deleting now unused module sru.
Deleting now unused module alu.
Deleting now unused module formal.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~37 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 31 unused cells and 230 unused wires.
<suppressed ~41 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~213 debug messages>
Removed a total of 71 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $techmap\cpu.core.$procmux$22.
Removed 1 multiplexer ports.
<suppressed ~28 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$191: { $techmap\cpu.core.$procmux$122_CMP $techmap\cpu.core.$procmux$134_CMP $auto$opt_reduce.cc:132:opt_mux$286 }
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$229: { $techmap\cpu.core.$procmux$232_CMP $auto$opt_reduce.cc:132:opt_mux$288 }
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$257: $auto$opt_reduce.cc:132:opt_mux$290
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$35: $auto$opt_reduce.cc:132:opt_mux$292
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$40: $auto$opt_reduce.cc:132:opt_mux$294
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$53: $auto$opt_reduce.cc:132:opt_mux$296
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$57: { $techmap\cpu.core.$procmux$139_CMP $techmap\cpu.core.$procmux$137_CMP $techmap\cpu.core.$procmux$131_CMP $auto$opt_reduce.cc:132:opt_mux$298 }
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$125: { $techmap\cpu.core.$procmux$165_CMP $techmap\cpu.core.$procmux$122_CMP $techmap\cpu.core.$procmux$140_CMP $techmap\cpu.core.$procmux$138_CMP $techmap\cpu.core.$procmux$137_CMP $techmap\cpu.core.$procmux$134_CMP $techmap\cpu.core.$procmux$10_CMP $techmap\cpu.core.$procmux$129_CMP $auto$opt_reduce.cc:132:opt_mux$300 }
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$67: { $techmap\cpu.core.$procmux$133_CMP $techmap\cpu.core.$procmux$131_CMP $techmap\cpu.core.$procmux$130_CMP $auto$opt_reduce.cc:132:opt_mux$302 $techmap\cpu.core.$procmux$127_CMP }
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$79: { $techmap\cpu.core.$procmux$131_CMP $auto$opt_reduce.cc:132:opt_mux$304 }
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$143: { $auto$opt_reduce.cc:132:opt_mux$306 $techmap\cpu.core.$procmux$148_CMP $techmap\cpu.core.$procmux$147_CMP $techmap\cpu.core.$procmux$146_CMP $techmap\cpu.core.$procmux$145_CMP $techmap\cpu.core.$procmux$144_CMP }
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$87: { $techmap\cpu.core.$procmux$137_CMP $auto$opt_reduce.cc:132:opt_mux$308 }
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$94: $auto$opt_reduce.cc:132:opt_mux$310
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$289: { $techmap\cpu.core.$procmux$259_CMP $techmap\cpu.core.$procmux$261_CMP $techmap\cpu.core.$procmux$260_CMP $techmap\cpu.core.$procmux$258_CMP }
  Optimizing cells in module \top.
Performed a total of 14 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \cpu.core.fi_pc = 16'0000000000000000 to constant driver in module top.
Promoted 1 init specs to constant drivers.

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 76 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~3 debug messages>

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$27: $auto$opt_reduce.cc:132:opt_mux$312
  Optimizing cells in module \top.
Performed a total of 1 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

2.10.16. Rerunning OPT passes. (Maybe there is more to do..)

2.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

2.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.23. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 address bits (of 9) from memory init port top.$techmap\cpu.$1 (cpu.memory).
Removed top 2 bits (of 3) from port B of cell top.$techmap\cpu.core.$procmux$269_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\cpu.core.$procmux$268_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\cpu.core.$procmux$266_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$260_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$258_CMP0 ($eq).
Removed top 1 bits (of 4) from mux cell top.$techmap\cpu.core.$procmux$229 ($pmux).
Removed top 1 bits (of 5) from port B of cell top.$techmap\cpu.core.$procmux$228_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell top.$techmap\cpu.core.$procmux$224_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell top.$techmap\cpu.core.$procmux$222_CMP0 ($eq).
Removed top 5 bits (of 8) from mux cell top.$techmap\cpu.core.$procmux$209 ($mux).
Removed top 3 bits (of 4) from mux cell top.$techmap\cpu.core.$procmux$156 ($mux).
Removed top 2 bits (of 3) from port B of cell top.$techmap\cpu.core.$procmux$150_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\cpu.core.$procmux$149_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\cpu.core.$procmux$148_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$140_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$138_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$134_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$130_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$129_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$122_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell top.$techmap\cpu.core.$procmux$72_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$10_CMP0 ($eq).
Removed top 1 bits (of 17) from port Y of cell top.$techmap\cpu.core.$80 ($add).
Removed top 1 bits (of 6) from port Y of cell top.$techmap\cpu.core.$73 ($sub).
Removed top 9 bits (of 17) from port Y of cell top.$techmap\cpu.core.$48 ($add).
Removed top 8 bits (of 16) from port A of cell top.$techmap\cpu.core.$48 ($add).
Removed top 8 bits (of 16) from port B of cell top.$techmap\cpu.core.$48 ($add).
Removed top 4 bits (of 12) from port Y of cell top.$techmap\cpu.core.$42 ($add).
Removed top 3 bits (of 11) from port B of cell top.$techmap\cpu.core.$42 ($add).
Removed top 1 bits (of 9) from port Y of cell top.$techmap\cpu.core.$37 ($add).
Removed top 1 bits (of 18) from mux cell top.$techmap\cpu.core.alu.$25 ($mux).
Removed top 1 bits (of 18) from port Y of cell top.$techmap\cpu.core.alu.$23 ($add).
Removed top 5 bits (of 8) from mux cell top.$techmap\cpu.core.$procmux$211 ($mux).
Removed top 1 bits (of 9) from wire top.$techmap\cpu.core.$35.
Removed top 4 bits (of 12) from wire top.$techmap\cpu.core.$40.
Removed top 1 bits (of 6) from wire top.$techmap\cpu.core.$71.
Removed top 1 bits (of 17) from wire top.$techmap\cpu.core.$78.
Removed top 3 bits (of 4) from wire top.$techmap\cpu.core.$procmux$156_Y.
Removed top 5 bits (of 8) from wire top.$techmap\cpu.core.$procmux$209_Y.
Removed top 5 bits (of 8) from wire top.$techmap\cpu.core.$procmux$211_Y.
Removed top 1 bits (of 4) from wire top.$techmap\cpu.core.$procmux$229_Y.
Removed top 1 bits (of 18) from wire top.$techmap\cpu.core.alu.$22.
Removed top 10 bits (of 16) from wire top.cpu.core.sru.s_l.
Removed top 12 bits (of 16) from wire top.cpu.core.sru.s_r.
Removed top 11 bits (of 16) from wire top.cpu.core.sru_r_o.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 13 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$d87a48a4cd82717ae6bd57e6fe5ce90d87c44016\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$4cde4291caf5aa85a196975f3624151774a86d78\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d31416a5863a8a220e16d7940a75ab70541ab32a\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$169bae89c32dcc6f3626d16cf9f47ceb469145db\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5652dda64580ddd7861fd245e644fd33eae2e158\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5b7c8f37cb386acdf3ce7e528c09e6d15eb51b72\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$df71d3c5c306636e78c1ede81ccfd95a4d222f85\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$efc71e781fe178e08e0b73b60d007d65bb528021\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$157b513ca31cf76e38adcf07acb1841cad2cb8bf\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$71de91d27376199a7ef88a0ac0b14252f100e8e2\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$6816abac91a51b405c3de5bceb2855c03dd44485\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$99e5b0ecd4c7f9fb6cd3a733593eba894c42613f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d0a69964f9ce54b3124cbdb498a7c3bb278370d8\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$dc6060208f0369ff43b26b7eee8e43bf61e4b025\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5c2d7617d568809e504489b04c3cf382857f302a\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$8c0aa91d4db8741c9947d7a0de6c875d8dfddc39\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$f697708cd68b7ab769087d4d36092ed6d4550934\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$64fdb727b8fb55a4fe9731fe5b6468d06ea5e6e3\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$428611b5d438e29cebfd18261be0c8e5ae5db6e9\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$ed69233d74549f287b72a59633b9a76ab6bcc119\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$947b4e84b41c8268c0b3f732cf601a46e109cf2f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$b2c078492117e804fad9a0ec69f4ef95c8e4fc36\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~529 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 120 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $techmap\cpu.core.$37 ($add).
  creating $macc model for $techmap\cpu.core.$42 ($add).
  creating $macc model for $techmap\cpu.core.$45 ($add).
  creating $macc model for $techmap\cpu.core.$48 ($add).
  creating $macc model for $techmap\cpu.core.$73 ($sub).
  creating $macc model for $techmap\cpu.core.$80 ($add).
  creating $macc model for $techmap\cpu.core.alu.$21 ($add).
  creating $macc model for $techmap\cpu.core.alu.$23 ($add).
  merging $macc model for $techmap\cpu.core.alu.$21 into $techmap\cpu.core.alu.$23.
  creating $alu model for $macc $techmap\cpu.core.alu.$23.
  creating $alu model for $macc $techmap\cpu.core.$80.
  creating $alu model for $macc $techmap\cpu.core.$73.
  creating $alu model for $macc $techmap\cpu.core.$48.
  creating $alu model for $macc $techmap\cpu.core.$45.
  creating $alu model for $macc $techmap\cpu.core.$42.
  creating $alu model for $macc $techmap\cpu.core.$37.
  creating $alu cell for $techmap\cpu.core.$37: $auto$alumacc.cc:474:replace_alu$388
  creating $alu cell for $techmap\cpu.core.$42: $auto$alumacc.cc:474:replace_alu$391
  creating $alu cell for $techmap\cpu.core.$45: $auto$alumacc.cc:474:replace_alu$394
  creating $alu cell for $techmap\cpu.core.$48: $auto$alumacc.cc:474:replace_alu$397
  creating $alu cell for $techmap\cpu.core.$73: $auto$alumacc.cc:474:replace_alu$400
  creating $alu cell for $techmap\cpu.core.$80: $auto$alumacc.cc:474:replace_alu$403
  creating $alu cell for $techmap\cpu.core.alu.$23: $auto$alumacc.cc:474:replace_alu$406
  created 7 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~29 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.cpu.core.fsm_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\cpu.memory' in module `\top':
  $techmap\cpu.$1 ($meminit)
  cpu.mem_rdport$2 ($memwr)
  cpu.mem_rdport ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 158 unused cells and 130 unused wires.
<suppressed ~159 debug messages>

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~62 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.9. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
No more expansions possible.

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.31.6. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
No more expansions possible.

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.39.6. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
No more expansions possible.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \top

2.43.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.44. Printing statistics.

=== top ===

   Number of wires:                118
   Number of wire bits:            851
   Number of public wires:         118
   Number of public wire bits:     851
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     SB_IO                           1

2.45. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

3. Executing JSON backend.

End of script. Logfile hash: 1fc8559f2c
CPU: user 0.86s system 0.02s, MEM: 73.62 MB total, 41.59 MB resident
Yosys 0.8+510 (git sha1 36120fcc, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 23% 9x read_verilog (0 sec), 20% 17x opt_clean (0 sec), ...
