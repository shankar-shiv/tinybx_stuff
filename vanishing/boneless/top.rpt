
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+510 (git sha1 36120fcc, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Executing script file `top.ys' --

1. Executing ILANG frontend.
Input filename: top.il

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \cpu
Used module:         \core
Used module:             \sru
Used module:             \alu
Used module:             \formal

2.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \cpu
Used module:         \core
Used module:             \sru
Used module:             \alu
Used module:             \formal
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $group_62 in module core.
Marked 1 switch rules as full_case in process $group_59 in module core.
Marked 3 switch rules as full_case in process $group_58 in module core.
Marked 3 switch rules as full_case in process $group_57 in module core.
Marked 2 switch rules as full_case in process $group_45 in module core.
Marked 1 switch rules as full_case in process $group_24 in module core.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\top.$group_1'.
  Set init value: \user_led_0__o = 1'0
Found init rule in `\cpu.$group_1'.
  Set init value: \pins = 16'0000000000000000
Found init rule in `\cpu.$group_0'.
  Set init value: \core_ext_r_data = 16'0000000000000000
Found init rule in `\core.$group_62'.
  Set init value: \r_addr = 16'0000000000000000
Found init rule in `\core.$group_56'.
  Set init value: \r_shift = 5'00000
Found init rule in `\core.$group_48'.
  Set init value: \r_opA = 16'0000000000000000
Found init rule in `\core.$group_46'.
  Set init value: \r_insn = 16'0000000000000000
Found init rule in `\core.$group_45'.
  Set init value: \fsm_state = 4'0000
Found init rule in `\core.$group_44'.
  Set init value: \r_pc = 8'00001000
Found init rule in `\core.$group_43'.
  Set init value: \fi_pc = 16'0000000000000000
Found init rule in `\core.$group_30'.
  Set init value: \r_z = 1'0
  Set init value: \r_s = 1'0
  Set init value: \r_c = 1'0
  Set init value: \r_v = 1'0
Found init rule in `\sru.$group_4'.
  Set init value: \r_o = 16'0000000000000000

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$group_1'.
     1/1: $next\user_led_0__o
Creating decoders for process `\top.$group_0'.
     1/1: $next\clk
Creating decoders for process `\cpu.$group_1'.
     1/1: $next\pins
Creating decoders for process `\cpu.$group_0'.
     1/1: $next\core_ext_r_data
Creating decoders for process `\core.$group_64'.
     1/1: $next\ext_w_en
Creating decoders for process `\core.$group_63'.
     1/1: $next\ext_w_data
Creating decoders for process `\core.$group_62'.
     1/1: $next\r_addr
Creating decoders for process `\core.$group_61'.
     1/1: $next\ext_r_en
Creating decoders for process `\core.$group_60'.
     1/1: $next\ext_addr
Creating decoders for process `\core.$group_59'.
     1/1: $next\s_addr
Creating decoders for process `\core.$group_58'.
     1/1: $next\sru_s_c
Creating decoders for process `\core.$group_57'.
     1/1: $next\sru_c_dir
Creating decoders for process `\core.$group_56'.
     1/1: $next\r_shift
Creating decoders for process `\core.$group_55'.
     1/1: $next\sru_c_ld
Creating decoders for process `\core.$group_54'.
     1/1: $next\c_flags
Creating decoders for process `\core.$group_53'.
     1/1: $next\memory_w_en
Creating decoders for process `\core.$group_52'.
     1/1: $next\memory_w_data
Creating decoders for process `\core.$group_51'.
     1/1: $next\memory_w_addr
Creating decoders for process `\core.$group_50'.
     1/1: $next\s_res
Creating decoders for process `\core.$group_49'.
     1/1: $next\s_opB
Creating decoders for process `\core.$group_48'.
     1/1: $next\r_opA
Creating decoders for process `\core.$group_47'.
     1/1: $next\fi_stb
Creating decoders for process `\core.$group_46'.
     1/1: $next\r_insn
Creating decoders for process `\core.$group_45'.
     1/1: $next\fsm_state
Creating decoders for process `\core.$group_44'.
     1/1: $next\r_pc
Creating decoders for process `\core.$group_43'.
     1/1: $next\fi_pc
Creating decoders for process `\core.$group_42'.
     1/1: $next\memory_r_en
Creating decoders for process `\core.$group_41'.
     1/1: $next\memory_r_addr
Creating decoders for process `\core.$group_40'.
     1/1: $next\s_insn
Creating decoders for process `\core.$group_39'.
     1/1: $next\sru_s_i
Creating decoders for process `\core.$group_38'.
     1/1: $next\s_cmp
Creating decoders for process `\core.$group_37'.
     1/1: $next\s_sub
Creating decoders for process `\core.$group_36'.
     1/1: $next\alu_c_sel
Creating decoders for process `\core.$group_35'.
     1/1: $next\alu_s_b
Creating decoders for process `\core.$group_34'.
     1/1: $next\alu_s_a
Creating decoders for process `\core.$group_30'.
     1/4: $next\r_v
     2/4: $next\r_s
     3/4: $next\r_z
     4/4: $next\r_c
Creating decoders for process `\core.$group_29'.
     1/1: $next\fi_flags
Creating decoders for process `\core.$group_28'.
     1/1: $next\s_v
Creating decoders for process `\core.$group_27'.
     1/1: $next\s_c
Creating decoders for process `\core.$group_26'.
     1/1: $next\s_s
Creating decoders for process `\core.$group_25'.
     1/1: $next\s_z
Creating decoders for process `\core.$group_24'.
     1/1: $next\s_cond
Creating decoders for process `\core.$group_23'.
     1/1: $next\i_clsC
Creating decoders for process `\core.$group_22'.
     1/1: $next\i_clsI
Creating decoders for process `\core.$group_21'.
     1/1: $next\i_clsM
Creating decoders for process `\core.$group_20'.
     1/1: $next\i_clsS
Creating decoders for process `\core.$group_19'.
     1/1: $next\i_clsA
Creating decoders for process `\core.$group_18'.
     1/1: $next\i_cond
Creating decoders for process `\core.$group_17'.
     1/1: $next\i_flag
Creating decoders for process `\core.$group_16'.
     1/1: $next\i_ext
Creating decoders for process `\core.$group_15'.
     1/1: $next\i_store
Creating decoders for process `\core.$group_14'.
     1/1: $next\i_code5
Creating decoders for process `\core.$group_13'.
     1/1: $next\i_code3
Creating decoders for process `\core.$group_12'.
     1/1: $next\i_code2
Creating decoders for process `\core.$group_11'.
     1/1: $next\i_code1
Creating decoders for process `\core.$group_10'.
     1/1: $next\i_regZ
Creating decoders for process `\core.$group_9'.
     1/1: $next\i_regY
Creating decoders for process `\core.$group_8'.
     1/1: $next\i_regX
Creating decoders for process `\core.$group_7'.
     1/1: $next\i_imm11
Creating decoders for process `\core.$group_6'.
     1/1: $next\i_imm8
Creating decoders for process `\core.$group_5'.
     1/1: $next\i_imm5
Creating decoders for process `\core.$group_4'.
     1/1: $next\i_shift
Creating decoders for process `\core.$group_3'.
     1/1: $next\i_type2
Creating decoders for process `\core.$group_2'.
     1/1: $next\i_type1
Creating decoders for process `\core.$group_1'.
     1/1: $next\fi_insn
Creating decoders for process `\core.$group_0'.
     1/1: $next\halted
Creating decoders for process `\sru.$group_4'.
     1/1: $next\r_o
Creating decoders for process `\sru.$group_3'.
     1/1: $next\s_m1n0
Creating decoders for process `\sru.$group_2'.
     1/1: $next\s_m2n0
Creating decoders for process `\sru.$group_1'.
     1/1: $next\s_r
Creating decoders for process `\sru.$group_0'.
     1/1: $next\s_l
Creating decoders for process `\alu.$group_5'.
     1/1: $next\s_o
Creating decoders for process `\alu.$group_4'.
     1/1: $next\s_m1n0
Creating decoders for process `\alu.$group_3'.
     1/1: $next\s_m2n1
Creating decoders for process `\alu.$group_2'.
     1/1: $next\s_m2n0
Creating decoders for process `\alu.$group_1'.
     1/1: $next\s_m3n1
Creating decoders for process `\alu.$group_0'.
     1/1: $next\s_m3n0
Creating decoders for process `\formal.$group_7'.
     1/1: $next\fi_ext_w_en
Creating decoders for process `\formal.$group_6'.
     1/1: $next\fi_ext_w_data
Creating decoders for process `\formal.$group_5'.
     1/1: $next\fi_ext_r_en
Creating decoders for process `\formal.$group_4'.
     1/1: $next\fi_ext_r_data
Creating decoders for process `\formal.$group_3'.
     1/1: $next\fi_ext_addr
Creating decoders for process `\formal.$group_2'.
     1/1: $next\fi_mem_w_en
Creating decoders for process `\formal.$group_1'.
     1/1: $next\fi_mem_w_data
Creating decoders for process `\formal.$group_0'.
     1/1: $next\fi_mem_w_addr

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\clk' from process `\top.$group_0'.
No latch inferred for signal `\core.\ext_w_en' from process `\core.$group_64'.
No latch inferred for signal `\core.\ext_w_data' from process `\core.$group_63'.
No latch inferred for signal `\core.\ext_r_en' from process `\core.$group_61'.
No latch inferred for signal `\core.\ext_addr' from process `\core.$group_60'.
No latch inferred for signal `\core.\s_addr' from process `\core.$group_59'.
No latch inferred for signal `\core.\sru_s_c' from process `\core.$group_58'.
No latch inferred for signal `\core.\sru_c_dir' from process `\core.$group_57'.
No latch inferred for signal `\core.\sru_c_ld' from process `\core.$group_55'.
No latch inferred for signal `\core.\c_flags' from process `\core.$group_54'.
No latch inferred for signal `\core.\memory_w_en' from process `\core.$group_53'.
No latch inferred for signal `\core.\memory_w_data' from process `\core.$group_52'.
No latch inferred for signal `\core.\memory_w_addr' from process `\core.$group_51'.
No latch inferred for signal `\core.\s_res' from process `\core.$group_50'.
No latch inferred for signal `\core.\s_opB' from process `\core.$group_49'.
No latch inferred for signal `\core.\fi_stb' from process `\core.$group_47'.
No latch inferred for signal `\core.\memory_r_en' from process `\core.$group_42'.
No latch inferred for signal `\core.\memory_r_addr' from process `\core.$group_41'.
No latch inferred for signal `\core.\s_insn' from process `\core.$group_40'.
No latch inferred for signal `\core.\sru_s_i' from process `\core.$group_39'.
No latch inferred for signal `\core.\s_cmp' from process `\core.$group_38'.
No latch inferred for signal `\core.\s_sub' from process `\core.$group_37'.
No latch inferred for signal `\core.\alu_c_sel' from process `\core.$group_36'.
No latch inferred for signal `\core.\alu_s_b' from process `\core.$group_35'.
No latch inferred for signal `\core.\alu_s_a' from process `\core.$group_34'.
No latch inferred for signal `\core.\fi_flags' from process `\core.$group_29'.
No latch inferred for signal `\core.\s_v' from process `\core.$group_28'.
No latch inferred for signal `\core.\s_c' from process `\core.$group_27'.
No latch inferred for signal `\core.\s_s' from process `\core.$group_26'.
No latch inferred for signal `\core.\s_z' from process `\core.$group_25'.
No latch inferred for signal `\core.\s_cond' from process `\core.$group_24'.
No latch inferred for signal `\core.\i_clsC' from process `\core.$group_23'.
No latch inferred for signal `\core.\i_clsI' from process `\core.$group_22'.
No latch inferred for signal `\core.\i_clsM' from process `\core.$group_21'.
No latch inferred for signal `\core.\i_clsS' from process `\core.$group_20'.
No latch inferred for signal `\core.\i_clsA' from process `\core.$group_19'.
No latch inferred for signal `\core.\i_cond' from process `\core.$group_18'.
No latch inferred for signal `\core.\i_flag' from process `\core.$group_17'.
No latch inferred for signal `\core.\i_ext' from process `\core.$group_16'.
No latch inferred for signal `\core.\i_store' from process `\core.$group_15'.
No latch inferred for signal `\core.\i_code5' from process `\core.$group_14'.
No latch inferred for signal `\core.\i_code3' from process `\core.$group_13'.
No latch inferred for signal `\core.\i_code2' from process `\core.$group_12'.
No latch inferred for signal `\core.\i_code1' from process `\core.$group_11'.
No latch inferred for signal `\core.\i_regZ' from process `\core.$group_10'.
No latch inferred for signal `\core.\i_regY' from process `\core.$group_9'.
No latch inferred for signal `\core.\i_regX' from process `\core.$group_8'.
No latch inferred for signal `\core.\i_imm11' from process `\core.$group_7'.
No latch inferred for signal `\core.\i_imm8' from process `\core.$group_6'.
No latch inferred for signal `\core.\i_imm5' from process `\core.$group_5'.
No latch inferred for signal `\core.\i_shift' from process `\core.$group_4'.
No latch inferred for signal `\core.\i_type2' from process `\core.$group_3'.
No latch inferred for signal `\core.\i_type1' from process `\core.$group_2'.
No latch inferred for signal `\core.\fi_insn' from process `\core.$group_1'.
No latch inferred for signal `\core.\halted' from process `\core.$group_0'.
No latch inferred for signal `\sru.\s_m1n0' from process `\sru.$group_3'.
No latch inferred for signal `\sru.\s_m2n0' from process `\sru.$group_2'.
No latch inferred for signal `\sru.\s_r' from process `\sru.$group_1'.
No latch inferred for signal `\sru.\s_l' from process `\sru.$group_0'.
No latch inferred for signal `\alu.\s_o' from process `\alu.$group_5'.
No latch inferred for signal `\alu.\s_m1n0' from process `\alu.$group_4'.
No latch inferred for signal `\alu.\s_m2n1' from process `\alu.$group_3'.
No latch inferred for signal `\alu.\s_m2n0' from process `\alu.$group_2'.
No latch inferred for signal `\alu.\s_m3n1' from process `\alu.$group_1'.
No latch inferred for signal `\alu.\s_m3n0' from process `\alu.$group_0'.
No latch inferred for signal `\formal.\fi_ext_w_en' from process `\formal.$group_7'.
No latch inferred for signal `\formal.\fi_ext_w_data' from process `\formal.$group_6'.
No latch inferred for signal `\formal.\fi_ext_r_en' from process `\formal.$group_5'.
No latch inferred for signal `\formal.\fi_ext_r_data' from process `\formal.$group_4'.
No latch inferred for signal `\formal.\fi_ext_addr' from process `\formal.$group_3'.
No latch inferred for signal `\formal.\fi_mem_w_en' from process `\formal.$group_2'.
No latch inferred for signal `\formal.\fi_mem_w_data' from process `\formal.$group_1'.
No latch inferred for signal `\formal.\fi_mem_w_addr' from process `\formal.$group_0'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.\user_led_0__o' using process `\top.$group_1'.
  created $dff cell `$procdff$287' with positive edge clock.
Creating register for signal `\cpu.\pins' using process `\cpu.$group_1'.
  created $dff cell `$procdff$288' with positive edge clock.
Creating register for signal `\cpu.\core_ext_r_data' using process `\cpu.$group_0'.
  created $dff cell `$procdff$289' with positive edge clock.
Creating register for signal `\core.\r_addr' using process `\core.$group_62'.
  created $dff cell `$procdff$290' with positive edge clock.
Creating register for signal `\core.\r_shift' using process `\core.$group_56'.
  created $dff cell `$procdff$291' with positive edge clock.
Creating register for signal `\core.\r_opA' using process `\core.$group_48'.
  created $dff cell `$procdff$292' with positive edge clock.
Creating register for signal `\core.\r_insn' using process `\core.$group_46'.
  created $dff cell `$procdff$293' with positive edge clock.
Creating register for signal `\core.\fsm_state' using process `\core.$group_45'.
  created $dff cell `$procdff$294' with positive edge clock.
Creating register for signal `\core.\r_pc' using process `\core.$group_44'.
  created $dff cell `$procdff$295' with positive edge clock.
Creating register for signal `\core.\fi_pc' using process `\core.$group_43'.
  created $dff cell `$procdff$296' with positive edge clock.
Creating register for signal `\core.\r_z' using process `\core.$group_30'.
  created $dff cell `$procdff$297' with positive edge clock.
Creating register for signal `\core.\r_s' using process `\core.$group_30'.
  created $dff cell `$procdff$298' with positive edge clock.
Creating register for signal `\core.\r_c' using process `\core.$group_30'.
  created $dff cell `$procdff$299' with positive edge clock.
Creating register for signal `\core.\r_v' using process `\core.$group_30'.
  created $dff cell `$procdff$300' with positive edge clock.
Creating register for signal `\sru.\r_o' using process `\sru.$group_4'.
  created $dff cell `$procdff$301' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\top.$group_1'.
Removing empty process `top.$group_1'.
Removing empty process `top.$group_0'.
Found and cleaned up 3 empty switches in `\cpu.$group_1'.
Removing empty process `cpu.$group_1'.
Found and cleaned up 3 empty switches in `\cpu.$group_0'.
Removing empty process `cpu.$group_0'.
Found and cleaned up 1 empty switch in `\core.$group_64'.
Removing empty process `core.$group_64'.
Found and cleaned up 1 empty switch in `\core.$group_63'.
Removing empty process `core.$group_63'.
Found and cleaned up 3 empty switches in `\core.$group_62'.
Removing empty process `core.$group_62'.
Found and cleaned up 1 empty switch in `\core.$group_61'.
Removing empty process `core.$group_61'.
Found and cleaned up 1 empty switch in `\core.$group_60'.
Removing empty process `core.$group_60'.
Found and cleaned up 2 empty switches in `\core.$group_59'.
Removing empty process `core.$group_59'.
Found and cleaned up 4 empty switches in `\core.$group_58'.
Removing empty process `core.$group_58'.
Found and cleaned up 4 empty switches in `\core.$group_57'.
Removing empty process `core.$group_57'.
Found and cleaned up 2 empty switches in `\core.$group_56'.
Removing empty process `core.$group_56'.
Found and cleaned up 1 empty switch in `\core.$group_55'.
Removing empty process `core.$group_55'.
Found and cleaned up 1 empty switch in `\core.$group_54'.
Removing empty process `core.$group_54'.
Found and cleaned up 2 empty switches in `\core.$group_53'.
Removing empty process `core.$group_53'.
Found and cleaned up 2 empty switches in `\core.$group_52'.
Removing empty process `core.$group_52'.
Found and cleaned up 1 empty switch in `\core.$group_51'.
Removing empty process `core.$group_51'.
Found and cleaned up 1 empty switch in `\core.$group_50'.
Removing empty process `core.$group_50'.
Found and cleaned up 1 empty switch in `\core.$group_49'.
Removing empty process `core.$group_49'.
Found and cleaned up 2 empty switches in `\core.$group_48'.
Removing empty process `core.$group_48'.
Found and cleaned up 3 empty switches in `\core.$group_47'.
Removing empty process `core.$group_47'.
Found and cleaned up 2 empty switches in `\core.$group_46'.
Removing empty process `core.$group_46'.
Found and cleaned up 6 empty switches in `\core.$group_45'.
Removing empty process `core.$group_45'.
Found and cleaned up 4 empty switches in `\core.$group_44'.
Removing empty process `core.$group_44'.
Found and cleaned up 2 empty switches in `\core.$group_43'.
Removing empty process `core.$group_43'.
Found and cleaned up 2 empty switches in `\core.$group_42'.
Removing empty process `core.$group_42'.
Found and cleaned up 2 empty switches in `\core.$group_41'.
Removing empty process `core.$group_41'.
Removing empty process `core.$group_40'.
Removing empty process `core.$group_39'.
Found and cleaned up 2 empty switches in `\core.$group_38'.
Removing empty process `core.$group_38'.
Found and cleaned up 2 empty switches in `\core.$group_37'.
Removing empty process `core.$group_37'.
Found and cleaned up 3 empty switches in `\core.$group_36'.
Removing empty process `core.$group_36'.
Removing empty process `core.$group_35'.
Removing empty process `core.$group_34'.
Found and cleaned up 2 empty switches in `\core.$group_30'.
Removing empty process `core.$group_30'.
Found and cleaned up 1 empty switch in `\core.$group_29'.
Removing empty process `core.$group_29'.
Found and cleaned up 1 empty switch in `\core.$group_28'.
Removing empty process `core.$group_28'.
Removing empty process `core.$group_27'.
Removing empty process `core.$group_26'.
Removing empty process `core.$group_25'.
Found and cleaned up 1 empty switch in `\core.$group_24'.
Removing empty process `core.$group_24'.
Removing empty process `core.$group_23'.
Removing empty process `core.$group_22'.
Removing empty process `core.$group_21'.
Removing empty process `core.$group_20'.
Removing empty process `core.$group_19'.
Removing empty process `core.$group_18'.
Removing empty process `core.$group_17'.
Removing empty process `core.$group_16'.
Removing empty process `core.$group_15'.
Removing empty process `core.$group_14'.
Removing empty process `core.$group_13'.
Removing empty process `core.$group_12'.
Removing empty process `core.$group_11'.
Removing empty process `core.$group_10'.
Removing empty process `core.$group_9'.
Removing empty process `core.$group_8'.
Removing empty process `core.$group_7'.
Removing empty process `core.$group_6'.
Removing empty process `core.$group_5'.
Removing empty process `core.$group_4'.
Removing empty process `core.$group_3'.
Removing empty process `core.$group_2'.
Removing empty process `core.$group_1'.
Removing empty process `core.$group_0'.
Found and cleaned up 1 empty switch in `\sru.$group_4'.
Removing empty process `sru.$group_4'.
Removing empty process `sru.$group_3'.
Removing empty process `sru.$group_2'.
Removing empty process `sru.$group_1'.
Removing empty process `sru.$group_0'.
Removing empty process `alu.$group_5'.
Removing empty process `alu.$group_4'.
Removing empty process `alu.$group_3'.
Removing empty process `alu.$group_2'.
Removing empty process `alu.$group_1'.
Removing empty process `alu.$group_0'.
Removing empty process `formal.$group_7'.
Removing empty process `formal.$group_6'.
Removing empty process `formal.$group_5'.
Removing empty process `formal.$group_4'.
Removing empty process `formal.$group_3'.
Removing empty process `formal.$group_2'.
Removing empty process `formal.$group_1'.
Removing empty process `formal.$group_0'.
Cleaned up 71 empty switches.

2.4. Executing FLATTEN pass (flatten design).
Using template cpu for cells of type cpu.
Using template core for cells of type core.
Using template sru for cells of type sru.
Using template alu for cells of type alu.
Using template formal for cells of type formal.
<suppressed ~5 debug messages>
No more expansions possible.
Deleting now unused module cpu.
Deleting now unused module core.
Deleting now unused module sru.
Deleting now unused module alu.
Deleting now unused module formal.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~42 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 22 unused cells and 238 unused wires.
<suppressed ~32 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~231 debug messages>
Removed a total of 77 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $techmap\cpu.core.$procmux$36.
Removed 1 multiplexer ports.
<suppressed ~34 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$157: { $auto$opt_reduce.cc:132:opt_mux$303 $techmap\cpu.core.$procmux$162_CMP $techmap\cpu.core.$procmux$161_CMP $techmap\cpu.core.$procmux$160_CMP $techmap\cpu.core.$procmux$159_CMP $techmap\cpu.core.$procmux$158_CMP }
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$205: { $techmap\cpu.core.$procmux$136_CMP $techmap\cpu.core.$procmux$148_CMP $auto$opt_reduce.cc:132:opt_mux$305 }
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$243: { $techmap\cpu.core.$procmux$246_CMP $auto$opt_reduce.cc:132:opt_mux$307 }
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$271: $auto$opt_reduce.cc:132:opt_mux$309
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$49: $auto$opt_reduce.cc:132:opt_mux$311
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$54: $auto$opt_reduce.cc:132:opt_mux$313
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$101: { $techmap\cpu.core.$procmux$103_CMP $auto$opt_reduce.cc:132:opt_mux$315 }
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$67: $auto$opt_reduce.cc:132:opt_mux$317
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$71: { $techmap\cpu.core.$procmux$100_CMP $techmap\cpu.core.$procmux$103_CMP $techmap\cpu.core.$procmux$145_CMP $auto$opt_reduce.cc:132:opt_mux$319 }
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$108: $auto$opt_reduce.cc:132:opt_mux$321
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$81: { $techmap\cpu.core.$procmux$147_CMP $techmap\cpu.core.$procmux$145_CMP $techmap\cpu.core.$procmux$144_CMP $auto$opt_reduce.cc:132:opt_mux$323 $techmap\cpu.core.$procmux$141_CMP }
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$139: { $techmap\cpu.core.$procmux$179_CMP $techmap\cpu.core.$procmux$136_CMP $techmap\cpu.core.$procmux$110_CMP $techmap\cpu.core.$procmux$152_CMP $techmap\cpu.core.$procmux$103_CMP $techmap\cpu.core.$procmux$148_CMP $techmap\cpu.core.$procmux$146_CMP $techmap\cpu.core.$procmux$109_CMP $auto$opt_reduce.cc:132:opt_mux$325 }
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$93: { $techmap\cpu.core.$procmux$145_CMP $auto$opt_reduce.cc:132:opt_mux$327 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$304: { $techmap\cpu.core.$procmux$179_CMP $techmap\cpu.core.$procmux$146_CMP $techmap\cpu.core.$procmux$110_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$314: { $techmap\cpu.core.$procmux$102_CMP $techmap\cpu.core.$procmux$100_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$316: { $techmap\cpu.core.$procmux$103_CMP $techmap\cpu.core.$procmux$102_CMP $techmap\cpu.core.$procmux$100_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$318: { $techmap\cpu.core.$procmux$147_CMP $techmap\cpu.core.$procmux$144_CMP $techmap\cpu.core.$procmux$141_CMP $techmap\cpu.core.$procmux$102_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$322: { $techmap\cpu.core.$procmux$103_CMP $techmap\cpu.core.$procmux$102_CMP $techmap\cpu.core.$procmux$100_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$324: { $techmap\cpu.core.$procmux$147_CMP $techmap\cpu.core.$procmux$145_CMP $techmap\cpu.core.$procmux$144_CMP $techmap\cpu.core.$procmux$141_CMP $techmap\cpu.core.$procmux$140_CMP $techmap\cpu.core.$procmux$102_CMP $techmap\cpu.core.$procmux$100_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$326: { $techmap\cpu.core.$procmux$147_CMP $techmap\cpu.core.$procmux$144_CMP $techmap\cpu.core.$procmux$141_CMP $techmap\cpu.core.$procmux$103_CMP $techmap\cpu.core.$procmux$102_CMP $techmap\cpu.core.$procmux$100_CMP }
  Optimizing cells in module \top.
Performed a total of 20 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \cpu.core.fi_pc = 16'0000000000000000 to constant driver in module top.
Promoted 1 init specs to constant drivers.

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 82 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~3 debug messages>

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $techmap\cpu.core.$procmux$41: $auto$opt_reduce.cc:132:opt_mux$329
  Optimizing cells in module \top.
Performed a total of 1 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

2.10.16. Rerunning OPT passes. (Maybe there is more to do..)

2.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

2.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.20. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.23. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 address bits (of 9) from memory init port top.$techmap\cpu.$1 (cpu.memory).
Removed top 2 bits (of 3) from port B of cell top.$techmap\cpu.core.$procmux$283_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\cpu.core.$procmux$282_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\cpu.core.$procmux$280_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$274_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$272_CMP0 ($eq).
Removed top 1 bits (of 4) from mux cell top.$techmap\cpu.core.$procmux$243 ($pmux).
Removed top 1 bits (of 5) from port B of cell top.$techmap\cpu.core.$procmux$242_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell top.$techmap\cpu.core.$procmux$238_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell top.$techmap\cpu.core.$procmux$236_CMP0 ($eq).
Removed top 5 bits (of 8) from mux cell top.$techmap\cpu.core.$procmux$223 ($mux).
Removed top 3 bits (of 4) from mux cell top.$techmap\cpu.core.$procmux$170 ($mux).
Removed top 2 bits (of 3) from port B of cell top.$techmap\cpu.core.$procmux$164_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\cpu.core.$procmux$163_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\cpu.core.$procmux$162_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$152_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$148_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$146_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$144_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$136_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$110_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell top.$techmap\cpu.core.$procmux$109_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell top.$techmap\cpu.core.$procmux$86_CMP0 ($eq).
Removed top 1 bits (of 17) from port Y of cell top.$techmap\cpu.core.$80 ($add).
Removed top 1 bits (of 6) from port Y of cell top.$techmap\cpu.core.$73 ($sub).
Removed top 9 bits (of 17) from port Y of cell top.$techmap\cpu.core.$48 ($add).
Removed top 8 bits (of 16) from port A of cell top.$techmap\cpu.core.$48 ($add).
Removed top 8 bits (of 16) from port B of cell top.$techmap\cpu.core.$48 ($add).
Removed top 4 bits (of 12) from port Y of cell top.$techmap\cpu.core.$42 ($add).
Removed top 3 bits (of 11) from port B of cell top.$techmap\cpu.core.$42 ($add).
Removed top 1 bits (of 9) from port Y of cell top.$techmap\cpu.core.$37 ($add).
Removed top 1 bits (of 18) from mux cell top.$techmap\cpu.core.alu.$25 ($mux).
Removed top 1 bits (of 18) from port Y of cell top.$techmap\cpu.core.alu.$23 ($add).
Removed top 5 bits (of 8) from mux cell top.$techmap\cpu.core.$procmux$225 ($mux).
Removed top 1 bits (of 9) from wire top.$techmap\cpu.core.$35.
Removed top 4 bits (of 12) from wire top.$techmap\cpu.core.$40.
Removed top 1 bits (of 6) from wire top.$techmap\cpu.core.$71.
Removed top 1 bits (of 17) from wire top.$techmap\cpu.core.$78.
Removed top 3 bits (of 4) from wire top.$techmap\cpu.core.$procmux$170_Y.
Removed top 5 bits (of 8) from wire top.$techmap\cpu.core.$procmux$223_Y.
Removed top 5 bits (of 8) from wire top.$techmap\cpu.core.$procmux$225_Y.
Removed top 1 bits (of 4) from wire top.$techmap\cpu.core.$procmux$243_Y.
Removed top 1 bits (of 18) from wire top.$techmap\cpu.core.alu.$22.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$d87a48a4cd82717ae6bd57e6fe5ce90d87c44016\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$4cde4291caf5aa85a196975f3624151774a86d78\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d31416a5863a8a220e16d7940a75ab70541ab32a\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$169bae89c32dcc6f3626d16cf9f47ceb469145db\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5652dda64580ddd7861fd245e644fd33eae2e158\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5b7c8f37cb386acdf3ce7e528c09e6d15eb51b72\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$df71d3c5c306636e78c1ede81ccfd95a4d222f85\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$efc71e781fe178e08e0b73b60d007d65bb528021\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$157b513ca31cf76e38adcf07acb1841cad2cb8bf\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$71de91d27376199a7ef88a0ac0b14252f100e8e2\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$6816abac91a51b405c3de5bceb2855c03dd44485\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$99e5b0ecd4c7f9fb6cd3a733593eba894c42613f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$8c0aa91d4db8741c9947d7a0de6c875d8dfddc39\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$f697708cd68b7ab769087d4d36092ed6d4550934\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$b2c078492117e804fad9a0ec69f4ef95c8e4fc36\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$ed69233d74549f287b72a59633b9a76ab6bcc119\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$947b4e84b41c8268c0b3f732cf601a46e109cf2f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d0a69964f9ce54b3124cbdb498a7c3bb278370d8\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$64fdb727b8fb55a4fe9731fe5b6468d06ea5e6e3\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5c2d7617d568809e504489b04c3cf382857f302a\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$428611b5d438e29cebfd18261be0c8e5ae5db6e9\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$dc6060208f0369ff43b26b7eee8e43bf61e4b025\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~529 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 120 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $techmap\cpu.core.$37 ($add).
  creating $macc model for $techmap\cpu.core.$42 ($add).
  creating $macc model for $techmap\cpu.core.$45 ($add).
  creating $macc model for $techmap\cpu.core.$48 ($add).
  creating $macc model for $techmap\cpu.core.$73 ($sub).
  creating $macc model for $techmap\cpu.core.$80 ($add).
  creating $macc model for $techmap\cpu.core.alu.$21 ($add).
  creating $macc model for $techmap\cpu.core.alu.$23 ($add).
  merging $macc model for $techmap\cpu.core.alu.$21 into $techmap\cpu.core.alu.$23.
  creating $alu model for $macc $techmap\cpu.core.alu.$23.
  creating $alu model for $macc $techmap\cpu.core.$80.
  creating $alu model for $macc $techmap\cpu.core.$73.
  creating $alu model for $macc $techmap\cpu.core.$48.
  creating $alu model for $macc $techmap\cpu.core.$45.
  creating $alu model for $macc $techmap\cpu.core.$42.
  creating $alu model for $macc $techmap\cpu.core.$37.
  creating $alu cell for $techmap\cpu.core.$37: $auto$alumacc.cc:474:replace_alu$402
  creating $alu cell for $techmap\cpu.core.$42: $auto$alumacc.cc:474:replace_alu$405
  creating $alu cell for $techmap\cpu.core.$45: $auto$alumacc.cc:474:replace_alu$408
  creating $alu cell for $techmap\cpu.core.$48: $auto$alumacc.cc:474:replace_alu$411
  creating $alu cell for $techmap\cpu.core.$73: $auto$alumacc.cc:474:replace_alu$414
  creating $alu cell for $techmap\cpu.core.$80: $auto$alumacc.cc:474:replace_alu$417
  creating $alu cell for $techmap\cpu.core.alu.$23: $auto$alumacc.cc:474:replace_alu$420
  created 7 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~33 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.cpu.core.fsm_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\cpu.memory' in module `\top':
  $techmap\cpu.$1 ($meminit)
  cpu.mem_rdport$2 ($memwr)
  cpu.mem_rdport ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing top.cpu.memory:
  Properties: ports=2 bits=4096 rports=1 wports=1 dbits=16 abits=8 words=256
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=0 efficiency=100
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=256 dwaste=0 bwaste=2048 waste=2048 efficiency=50
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=2048 efficiency=50
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=768 dwaste=0 bwaste=3072 waste=3072 efficiency=25
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3072 efficiency=25
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=1792 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Updated properties: dups=1 waste=3584 efficiency=12
      Storing for later selection.
  Selecting best of 4 rules:
    Efficiency for rule 2.3: efficiency=12, cells=8, acells=1
    Efficiency for rule 2.2: efficiency=25, cells=4, acells=1
    Efficiency for rule 2.1: efficiency=50, cells=2, acells=1
    Efficiency for rule 1.1: efficiency=100, cells=1, acells=1
    Selected rule 1.1 with efficiency 100.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clk.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clk.
        Mapped to bram port A1.1.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: cpu.memory.0.0.0

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
Using template $paramod$8d3edb5eb2592e80c8575fee608c47f39e7d00b3\$__ICE40_RAM4K_M0 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$e3030860611b37aa2712e31e796b795f968a3043\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
No more expansions possible.
<suppressed ~43 debug messages>

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~19 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 7 unused cells and 39 unused wires.
<suppressed ~8 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $techmap\cpu.core.$procmux$227:
      Old ports: A={ 5'00000 $auto$wreduce.cc:455:run$336 [2:0] }, B={ 5'00000 \cpu.core.fi_insn [7:5] }, Y=$techmap\cpu.core.$procmux$227_Y
      New ports: A=$auto$wreduce.cc:455:run$336 [2:0], B=\cpu.core.fi_insn [7:5], Y=$techmap\cpu.core.$procmux$227_Y [2:0]
      New connections: $techmap\cpu.core.$procmux$227_Y [7:3] = 5'00000
    Consolidated identical input bits for $pmux cell $techmap\cpu.core.$procmux$243:
      Old ports: A=3'000, B=6'011111, Y=$auto$wreduce.cc:455:run$337 [2:0]
      New ports: A=2'00, B=4'0111, Y={ $auto$wreduce.cc:455:run$337 [2] $auto$wreduce.cc:455:run$337 [0] }
      New connections: $auto$wreduce.cc:455:run$337 [1] = $auto$wreduce.cc:455:run$337 [0]
    Consolidated identical input bits for $pmux cell $techmap\cpu.core.$procmux$248:
      Old ports: A=4'0000, B=12'100010011010, Y=$techmap\cpu.core.$procmux$248_Y
      New ports: A=3'000, B=9'100101110, Y={ $techmap\cpu.core.$procmux$248_Y [3] $techmap\cpu.core.$procmux$248_Y [1:0] }
      New connections: $techmap\cpu.core.$procmux$248_Y [2] = 1'0
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $techmap\cpu.core.$procmux$229:
      Old ports: A=$techmap\cpu.core.$procmux$227_Y, B={ 5'00000 \cpu.core.fi_insn [7:5] }, Y=$techmap\cpu.core.$procmux$229_Y
      New ports: A=$techmap\cpu.core.$procmux$227_Y [2:0], B=\cpu.core.fi_insn [7:5], Y=$techmap\cpu.core.$procmux$229_Y [2:0]
      New connections: $techmap\cpu.core.$procmux$229_Y [7:3] = 5'00000
  Optimizing cells in module \top.
Performed a total of 4 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=7 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=9 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=9 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=17\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=17 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=16\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=4 for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=5\B_WIDTH=1\Y_WIDTH=5 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=5\S_WIDTH=2 for cells of type $pmux.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~677 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~652 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~378 debug messages>
Removed a total of 126 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 97 unused cells and 698 unused wires.
<suppressed ~98 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$402.slice[0].carry: CO=\cpu.core.r_pc [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$414.slice[0].carry: CO=\cpu.core.r_shift [0]
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$402.slice[1].adder back to logic.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$414.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~26 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.31.18. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$497 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [0] -> \cpu.core_ext_r_data [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$498 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [1] -> \cpu.core_ext_r_data [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$499 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [2] -> \cpu.core_ext_r_data [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$500 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [3] -> \cpu.core_ext_r_data [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$501 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [4] -> \cpu.core_ext_r_data [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$502 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [5] -> \cpu.core_ext_r_data [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$503 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [6] -> \cpu.core_ext_r_data [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$504 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [7] -> \cpu.core_ext_r_data [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$505 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [8] -> \cpu.core_ext_r_data [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$506 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [9] -> \cpu.core_ext_r_data [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$507 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [10] -> \cpu.core_ext_r_data [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$508 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [11] -> \cpu.core_ext_r_data [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$509 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [12] -> \cpu.core_ext_r_data [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$510 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [13] -> \cpu.core_ext_r_data [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$511 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [14] -> \cpu.core_ext_r_data [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$512 to $_DFFE_PP_ for $techmap\cpu.$next\core_ext_r_data [15] -> \cpu.core_ext_r_data [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$513 to $_DFFE_PP_ for $techmap\cpu.$next\pins [0] -> \cpu.pins [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$514 to $_DFFE_PP_ for $techmap\cpu.$next\pins [1] -> \cpu.pins [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$515 to $_DFFE_PP_ for $techmap\cpu.$next\pins [2] -> \cpu.pins [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$516 to $_DFFE_PP_ for $techmap\cpu.$next\pins [3] -> \cpu.pins [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$517 to $_DFFE_PP_ for $techmap\cpu.$next\pins [4] -> \cpu.pins [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$518 to $_DFFE_PP_ for $techmap\cpu.$next\pins [5] -> \cpu.pins [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$519 to $_DFFE_PP_ for $techmap\cpu.$next\pins [6] -> \cpu.pins [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$520 to $_DFFE_PP_ for $techmap\cpu.$next\pins [7] -> \cpu.pins [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$521 to $_DFFE_PP_ for $techmap\cpu.$next\pins [8] -> \cpu.pins [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$522 to $_DFFE_PP_ for $techmap\cpu.$next\pins [9] -> \cpu.pins [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$523 to $_DFFE_PP_ for $techmap\cpu.$next\pins [10] -> \cpu.pins [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$524 to $_DFFE_PP_ for $techmap\cpu.$next\pins [11] -> \cpu.pins [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$525 to $_DFFE_PP_ for $techmap\cpu.$next\pins [12] -> \cpu.pins [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$526 to $_DFFE_PP_ for $techmap\cpu.$next\pins [13] -> \cpu.pins [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$527 to $_DFFE_PP_ for $techmap\cpu.$next\pins [14] -> \cpu.pins [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$528 to $_DFFE_PP_ for $techmap\cpu.$next\pins [15] -> \cpu.pins [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$581 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$139.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1251_Y [0] -> \cpu.core.fsm_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$582 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$139.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1251_Y [1] -> \cpu.core.fsm_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$583 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$139.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1251_Y [2] -> \cpu.core.fsm_state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$584 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$139.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1251_Y [3] -> \cpu.core.fsm_state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$807 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_v -> \cpu.core.r_v.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$808 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_c -> \cpu.core.r_c.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$809 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_s -> \cpu.core.r_s.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$810 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_z -> \cpu.core.r_z.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$811 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$182.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1157_Y [0] -> \cpu.core.r_pc [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$812 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$182.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1157_Y [1] -> \cpu.core.r_pc [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$813 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$182.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1157_Y [2] -> \cpu.core.r_pc [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$814 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$182.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1157_Y [3] -> \cpu.core.r_pc [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$815 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$182.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1157_Y [4] -> \cpu.core.r_pc [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$816 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$182.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1157_Y [5] -> \cpu.core.r_pc [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$817 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$182.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1157_Y [6] -> \cpu.core.r_pc [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$818 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$182.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1157_Y [7] -> \cpu.core.r_pc [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$835 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [0] -> \cpu.core.r_opA [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$836 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [1] -> \cpu.core.r_opA [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$837 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [2] -> \cpu.core.r_opA [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$838 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [3] -> \cpu.core.r_opA [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$839 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [4] -> \cpu.core.r_opA [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$840 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [5] -> \cpu.core.r_opA [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$841 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [6] -> \cpu.core.r_opA [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$842 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [7] -> \cpu.core.r_opA [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$843 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [8] -> \cpu.core.r_opA [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$844 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [9] -> \cpu.core.r_opA [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$845 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [10] -> \cpu.core.r_opA [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$846 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [11] -> \cpu.core.r_opA [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$847 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [12] -> \cpu.core.r_opA [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$848 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [13] -> \cpu.core.r_opA [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$849 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [14] -> \cpu.core.r_opA [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$850 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_opA [15] -> \cpu.core.r_opA [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$851 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$60.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1459_Y [0] -> \cpu.core.r_shift [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$852 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$60.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1459_Y [1] -> \cpu.core.r_shift [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$853 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$60.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1459_Y [2] -> \cpu.core.r_shift [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$854 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$60.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1459_Y [3] -> \cpu.core.r_shift [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$855 to $_DFFE_PP_ for $techmap$techmap\cpu.core.$procmux$60.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1459_Y [4] -> \cpu.core.r_shift [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$856 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [0] -> \cpu.core.r_addr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$857 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [1] -> \cpu.core.r_addr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$858 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [2] -> \cpu.core.r_addr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$859 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [3] -> \cpu.core.r_addr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$860 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [4] -> \cpu.core.r_addr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$861 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [5] -> \cpu.core.r_addr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$862 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [6] -> \cpu.core.r_addr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$863 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [7] -> \cpu.core.r_addr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$864 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [8] -> \cpu.core.r_addr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$865 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [9] -> \cpu.core.r_addr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$866 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [10] -> \cpu.core.r_addr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$867 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [11] -> \cpu.core.r_addr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$868 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [12] -> \cpu.core.r_addr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$869 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [13] -> \cpu.core.r_addr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$870 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [14] -> \cpu.core.r_addr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$871 to $_DFFE_PP_ for $techmap\cpu.core.$next\r_addr [15] -> \cpu.core.r_addr [15].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~118 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~234 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1701 (SB_DFF): \cpu.core.sru.r_o [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$511 (SB_DFFE): \cpu.core_ext_r_data [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1686 (SB_DFF): \cpu.core.sru.r_o [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1687 (SB_DFF): \cpu.core.sru.r_o [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1688 (SB_DFF): \cpu.core.sru.r_o [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1689 (SB_DFF): \cpu.core.sru.r_o [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1690 (SB_DFF): \cpu.core.sru.r_o [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1691 (SB_DFF): \cpu.core.sru.r_o [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1692 (SB_DFF): \cpu.core.sru.r_o [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$514 (SB_DFFE): \cpu.pins [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1693 (SB_DFF): \cpu.core.sru.r_o [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1695 (SB_DFF): \cpu.core.sru.r_o [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1696 (SB_DFF): \cpu.core.sru.r_o [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1697 (SB_DFF): \cpu.core.sru.r_o [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1698 (SB_DFF): \cpu.core.sru.r_o [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1699 (SB_DFF): \cpu.core.sru.r_o [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1700 (SB_DFF): \cpu.core.sru.r_o [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$508 (SB_DFFE): \cpu.core_ext_r_data [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$501 (SB_DFFE): \cpu.core_ext_r_data [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$513 (SB_DFFE): \cpu.pins [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$813 (SB_DFFE): \cpu.core.r_pc [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$500 (SB_DFFE): \cpu.core_ext_r_data [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$498 (SB_DFFE): \cpu.core_ext_r_data [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$502 (SB_DFFE): \cpu.core_ext_r_data [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$503 (SB_DFFE): \cpu.core_ext_r_data [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$821 (SB_DFF): \cpu.core.r_insn [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$504 (SB_DFFE): \cpu.core_ext_r_data [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$506 (SB_DFFE): \cpu.core_ext_r_data [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$507 (SB_DFFE): \cpu.core_ext_r_data [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$850 (SB_DFFE): \cpu.core.r_opA [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$516 (SB_DFFE): \cpu.pins [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$520 (SB_DFFE): \cpu.pins [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$518 (SB_DFFE): \cpu.pins [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$512 (SB_DFFE): \cpu.core_ext_r_data [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$807 (SB_DFFE): \cpu.core.r_v = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$815 (SB_DFFE): \cpu.core.r_pc [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$515 (SB_DFFE): \cpu.pins [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$525 (SB_DFFE): \cpu.pins [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$497 (SB_DFFE): \cpu.core_ext_r_data [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$522 (SB_DFFE): \cpu.pins [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$817 (SB_DFFE): \cpu.core.r_pc [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$505 (SB_DFFE): \cpu.core_ext_r_data [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$523 (SB_DFFE): \cpu.pins [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$517 (SB_DFFE): \cpu.pins [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1694 (SB_DFF): \cpu.core.sru.r_o [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$526 (SB_DFFE): \cpu.pins [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$527 (SB_DFFE): \cpu.pins [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$524 (SB_DFFE): \cpu.pins [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$814 (SB_DFFE): \cpu.core.r_pc [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$582 (SB_DFFE): \cpu.core.fsm_state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$583 (SB_DFFE): \cpu.core.fsm_state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$584 (SB_DFFE): \cpu.core.fsm_state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$601 (SB_DFF): \user_led_0__o = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$510 (SB_DFFE): \cpu.core_ext_r_data [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$812 (SB_DFFE): \cpu.core.r_pc [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$581 (SB_DFFE): \cpu.core.fsm_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$808 (SB_DFFE): \cpu.core.r_c = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$809 (SB_DFFE): \cpu.core.r_s = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$810 (SB_DFFE): \cpu.core.r_z = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$856 (SB_DFFE): \cpu.core.r_addr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$822 (SB_DFF): \cpu.core.r_insn [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$816 (SB_DFFE): \cpu.core.r_pc [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$499 (SB_DFFE): \cpu.core_ext_r_data [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$521 (SB_DFFE): \cpu.pins [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$519 (SB_DFFE): \cpu.pins [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$823 (SB_DFF): \cpu.core.r_insn [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$849 (SB_DFFE): \cpu.core.r_opA [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$820 (SB_DFF): \cpu.core.r_insn [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$528 (SB_DFFE): \cpu.pins [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$824 (SB_DFF): \cpu.core.r_insn [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$825 (SB_DFF): \cpu.core.r_insn [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$826 (SB_DFF): \cpu.core.r_insn [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$828 (SB_DFF): \cpu.core.r_insn [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$811 (SB_DFFE): \cpu.core.r_pc [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$829 (SB_DFF): \cpu.core.r_insn [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$830 (SB_DFF): \cpu.core.r_insn [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$831 (SB_DFF): \cpu.core.r_insn [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$832 (SB_DFF): \cpu.core.r_insn [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$833 (SB_DFF): \cpu.core.r_insn [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$834 (SB_DFF): \cpu.core.r_insn [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$835 (SB_DFFE): \cpu.core.r_opA [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$836 (SB_DFFE): \cpu.core.r_opA [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$837 (SB_DFFE): \cpu.core.r_opA [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$838 (SB_DFFE): \cpu.core.r_opA [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$839 (SB_DFFE): \cpu.core.r_opA [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$840 (SB_DFFE): \cpu.core.r_opA [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$841 (SB_DFFE): \cpu.core.r_opA [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$842 (SB_DFFE): \cpu.core.r_opA [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$844 (SB_DFFE): \cpu.core.r_opA [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$827 (SB_DFF): \cpu.core.r_insn [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$845 (SB_DFFE): \cpu.core.r_opA [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$846 (SB_DFFE): \cpu.core.r_opA [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$847 (SB_DFFE): \cpu.core.r_opA [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$848 (SB_DFFE): \cpu.core.r_opA [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$818 (SB_DFFE): \cpu.core.r_pc [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$509 (SB_DFFE): \cpu.core_ext_r_data [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$851 (SB_DFFE): \cpu.core.r_shift [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$852 (SB_DFFE): \cpu.core.r_shift [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$853 (SB_DFFE): \cpu.core.r_shift [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$854 (SB_DFFE): \cpu.core.r_shift [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$855 (SB_DFFE): \cpu.core.r_shift [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$857 (SB_DFFE): \cpu.core.r_addr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$859 (SB_DFFE): \cpu.core.r_addr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$858 (SB_DFFE): \cpu.core.r_addr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$860 (SB_DFFE): \cpu.core.r_addr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$843 (SB_DFFE): \cpu.core.r_opA [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$861 (SB_DFFE): \cpu.core.r_addr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$862 (SB_DFFE): \cpu.core.r_addr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$863 (SB_DFFE): \cpu.core.r_addr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$864 (SB_DFFE): \cpu.core.r_addr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$865 (SB_DFFE): \cpu.core.r_addr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$866 (SB_DFFE): \cpu.core.r_addr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$867 (SB_DFFE): \cpu.core.r_addr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$868 (SB_DFFE): \cpu.core.r_addr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$869 (SB_DFFE): \cpu.core.r_addr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$870 (SB_DFFE): \cpu.core.r_addr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$871 (SB_DFFE): \cpu.core.r_addr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$819 (SB_DFF): \cpu.core.r_insn [0] = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.
  Merging $auto$simplemap.cc:277:simplemap_mux$1571 (A=1'0, B=\cpu.mem_rdport_memory_r_data [1], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$514 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1570 (A=1'0, B=\cpu.mem_rdport_memory_r_data [0], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$513 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1573 (A=1'0, B=\cpu.mem_rdport_memory_r_data [3], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$516 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1577 (A=1'0, B=\cpu.mem_rdport_memory_r_data [7], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$520 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1575 (A=1'0, B=\cpu.mem_rdport_memory_r_data [5], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$518 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1572 (A=1'0, B=\cpu.mem_rdport_memory_r_data [2], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$515 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1582 (A=1'0, B=\cpu.mem_rdport_memory_r_data [12], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$525 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1579 (A=1'0, B=\cpu.mem_rdport_memory_r_data [9], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$522 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1580 (A=1'0, B=\cpu.mem_rdport_memory_r_data [10], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$523 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1574 (A=1'0, B=\cpu.mem_rdport_memory_r_data [4], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$517 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1583 (A=1'0, B=\cpu.mem_rdport_memory_r_data [13], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$526 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1584 (A=1'0, B=\cpu.mem_rdport_memory_r_data [14], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$527 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1581 (A=1'0, B=\cpu.mem_rdport_memory_r_data [11], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$524 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2652 (A=1'0, B=$techmap$techmap\cpu.core.$procmux$101.$and$/usr/local/bin/../share/yosys/techmap.v:434$1322_Y [16], S=\cpu.core.c_flags) into $auto$simplemap.cc:420:simplemap_dff$808 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$2651 (A=1'0, B=$techmap$techmap\cpu.core.$procmux$101.$reduce_or$/usr/local/bin/../share/yosys/techmap.v:441$1339_Y, S=\cpu.core.c_flags) into $auto$simplemap.cc:420:simplemap_dff$809 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1578 (A=1'0, B=\cpu.mem_rdport_memory_r_data [8], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$521 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1576 (A=1'0, B=\cpu.mem_rdport_memory_r_data [6], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$519 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1585 (A=1'0, B=\cpu.mem_rdport_memory_r_data [15], S=$auto$simplemap.cc:309:simplemap_lut$943) into $auto$simplemap.cc:420:simplemap_dff$528 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1563 (A=$auto$wreduce.cc:455:run$333 [9], B=1'0, S=\cpu.core.i_clsI) into $auto$simplemap.cc:420:simplemap_dff$865 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1564 (A=$auto$wreduce.cc:455:run$333 [10], B=1'0, S=\cpu.core.i_clsI) into $auto$simplemap.cc:420:simplemap_dff$866 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1565 (A=$auto$wreduce.cc:455:run$333 [11], B=1'0, S=\cpu.core.i_clsI) into $auto$simplemap.cc:420:simplemap_dff$867 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1566 (A=$auto$wreduce.cc:455:run$333 [12], B=1'0, S=\cpu.core.i_clsI) into $auto$simplemap.cc:420:simplemap_dff$868 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1567 (A=$auto$wreduce.cc:455:run$333 [13], B=1'0, S=\cpu.core.i_clsI) into $auto$simplemap.cc:420:simplemap_dff$869 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1568 (A=$auto$wreduce.cc:455:run$333 [14], B=1'0, S=\cpu.core.i_clsI) into $auto$simplemap.cc:420:simplemap_dff$870 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1569 (A=$auto$wreduce.cc:455:run$333 [15], B=1'0, S=\cpu.core.i_clsI) into $auto$simplemap.cc:420:simplemap_dff$871 (SB_DFFE).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~179 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~369 debug messages>
Removed a total of 123 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 793 unused wires.
<suppressed ~2 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.39.12. Rerunning OPT passes. (Removed registers in this run.)

2.39.13. Running ICE40 specific optimizations.

2.39.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.39.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.39.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.39.18. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 1104 gates and 1292 wires to a netlist network with 186 inputs and 142 outputs.

2.41.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     258.
ABC: Participating nodes from both networks       =     646.
ABC: Participating nodes from the first network   =     259. (  73.37 % of nodes)
ABC: Participating nodes from the second network  =     387. ( 109.63 % of nodes)
ABC: Node pairs (any polarity)                    =     259. (  73.37 % of names can be moved)
ABC: Node pairs (same polarity)                   =     208. (  58.92 % of names can be moved)
ABC: Total runtime =     0.02 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      704
ABC RESULTS:        internal signals:      964
ABC RESULTS:           input signals:      186
ABC RESULTS:          output signals:      142
Removing temp directory.
Removed 0 unused cells and 657 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111110100000110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0010111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000101110101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111011100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011110001010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001101101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
No more expansions possible.
<suppressed ~1122 debug messages>
Removed 0 unused cells and 704 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \top

2.43.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.44. Printing statistics.

=== top ===

   Number of wires:                445
   Number of wire bits:           1350
   Number of public wires:         129
   Number of public wire bits:     970
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                604
     SB_CARRY                       62
     SB_DFF                         33
     SB_DFFE                        60
     SB_DFFESR                      25
     SB_IO                           2
     SB_LUT4                       421
     SB_RAM40_4K                     1

2.45. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

3. Executing JSON backend.

End of script. Logfile hash: a07dbe9ae6
CPU: user 2.35s system 0.03s, MEM: 57.95 MB total, 26.34 MB resident
Yosys 0.8+510 (git sha1 36120fcc, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 18% 22x opt_clean (0 sec), 17% 21x opt_expr (0 sec), ...
