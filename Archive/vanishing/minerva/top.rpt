
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+510 (git sha1 36120fcc, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Executing script file `top.ys' --

1. Executing ILANG frontend.
Input filename: top.il

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \minerva
Used module:         \shifter
Used module:         \predict
Used module:         \logic
Used module:         \loadstore
Used module:             \anonymous$1
Used module:         \fetch
Used module:             \anonymous
Used module:         \exception
Used module:             \interrupt_pe
Used module:             \trap_pe
Used module:         \decoder
Used module:         \compare
Used module:         \adder
Used module:         \csrf
Used module:         \w
Used module:         \m
Used module:         \x
Used module:         \d
Used module:         \f
Used module:         \a

2.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \minerva
Used module:         \shifter
Used module:         \predict
Used module:         \logic
Used module:         \loadstore
Used module:             \anonymous$1
Used module:         \fetch
Used module:             \anonymous
Used module:         \exception
Used module:             \interrupt_pe
Used module:             \trap_pe
Used module:         \decoder
Used module:         \compare
Used module:         \adder
Used module:         \csrf
Used module:         \w
Used module:         \m
Used module:         \x
Used module:         \d
Used module:         \f
Used module:         \a
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $group_182 in module minerva.
Marked 1 switch rules as full_case in process $group_181 in module minerva.
Marked 1 switch rules as full_case in process $group_173 in module minerva.
Marked 1 switch rules as full_case in process $group_172 in module minerva.
Marked 1 switch rules as full_case in process $group_171 in module minerva.
Marked 1 switch rules as full_case in process $group_170 in module minerva.
Marked 1 switch rules as full_case in process $group_107 in module minerva.
Marked 1 switch rules as full_case in process $group_0 in module predict.
Marked 4 switch rules as full_case in process $group_2 in module anonymous$1.
Marked 2 switch rules as full_case in process $group_0 in module anonymous$1.
Marked 1 switch rules as full_case in process $group_0 in module anonymous.
Marked 1 switch rules as full_case in process $group_41 in module exception.
Marked 1 switch rules as full_case in process $group_40 in module exception.
Marked 1 switch rules as full_case in process $group_2 in module adder.
Marked 1 switch rules as full_case in process $group_0 in module adder.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\minerva.$group_253'.
  Set init value: \payload__exception$125 = 1'0
Found init rule in `\minerva.$group_252'.
  Set init value: \payload__multiply$123 = 1'0
Found init rule in `\minerva.$group_251'.
  Set init value: \payload__result$116 = 0
Found init rule in `\minerva.$group_250'.
  Set init value: \payload__rd_we$114 = 1'0
Found init rule in `\minerva.$group_249'.
  Set init value: \payload__load_data$121 = 0
Found init rule in `\minerva.$group_248'.
  Set init value: \payload__load_mask$120 = 3'000
Found init rule in `\minerva.$group_247'.
  Set init value: \payload__load$118 = 1'0
Found init rule in `\minerva.$group_246'.
  Set init value: \payload__rd$112 = 5'00000
Found init rule in `\minerva.$group_245'.
  Set init value: \payload__pc$110 = 30'000000000000000000000000000000
Found init rule in `\minerva.$group_244'.
  Set init value: \payload__result$85 = 0
Found init rule in `\minerva.$group_243'.
  Set init value: \payload__branch_predict_taken$105 = 1'0
Found init rule in `\minerva.$group_242'.
  Set init value: \payload__branch_target$103 = 0
Found init rule in `\minerva.$group_241'.
  Set init value: \payload__branch_taken$104 = 1'0
Found init rule in `\minerva.$group_240'.
  Set init value: \payload__condition_met$101 = 1'0
Found init rule in `\minerva.$group_239'.
  Set init value: \payload__mret$107 = 1'0
Found init rule in `\minerva.$group_238'.
  Set init value: \payload__exception$108 = 1'0
Found init rule in `\minerva.$group_237'.
  Set init value: \payload__shift$87 = 1'0
Found init rule in `\minerva.$group_236'.
  Set init value: \payload__compare$96 = 1'0
Found init rule in `\minerva.$group_235'.
  Set init value: \payload__store_data$94 = 0
Found init rule in `\minerva.$group_234'.
  Set init value: \payload__dbus_sel$93 = 4'0000
Found init rule in `\minerva.$group_233'.
  Set init value: \payload__store$92 = 1'0
Found init rule in `\minerva.$group_232'.
  Set init value: \payload__load_mask$90 = 3'000
Found init rule in `\minerva.$group_231'.
  Set init value: \payload__load$89 = 1'0
Found init rule in `\minerva.$group_230'.
  Set init value: \payload__bypass_m$84 = 1'0
Found init rule in `\minerva.$group_229'.
  Set init value: \payload__rd_we$82 = 1'0
Found init rule in `\minerva.$group_228'.
  Set init value: \payload__rd$80 = 5'00000
Found init rule in `\minerva.$group_227'.
  Set init value: \payload__pc$78 = 30'000000000000000000000000000000
Found init rule in `\minerva.$group_226'.
  Set init value: \payload__branch_target$66 = 0
Found init rule in `\minerva.$group_225'.
  Set init value: \payload__branch_predict_taken = 1'0
Found init rule in `\minerva.$group_224'.
  Set init value: \payload__src2$49 = 0
Found init rule in `\minerva.$group_223'.
  Set init value: \payload__src1$48 = 0
Found init rule in `\minerva.$group_222'.
  Set init value: \payload__illegal$76 = 1'0
Found init rule in `\minerva.$group_221'.
  Set init value: \payload__mret$75 = 1'0
Found init rule in `\minerva.$group_220'.
  Set init value: \payload__ebreak$74 = 1'0
Found init rule in `\minerva.$group_219'.
  Set init value: \payload__ecall$73 = 1'0
Found init rule in `\minerva.$group_218'.
  Set init value: \payload__csr_we$70 = 1'0
Found init rule in `\minerva.$group_217'.
  Set init value: \payload__csr_adr$69 = 12'000000000000
Found init rule in `\minerva.$group_216'.
  Set init value: \payload__csr$68 = 1'0
Found init rule in `\minerva.$group_215'.
  Set init value: \payload__fence_i$67 = 1'0
Found init rule in `\minerva.$group_214'.
  Set init value: \payload__branch$65 = 1'0
Found init rule in `\minerva.$group_213'.
  Set init value: \payload__jump$63 = 1'0
Found init rule in `\minerva.$group_212'.
  Set init value: \payload__sext$62 = 1'0
Found init rule in `\minerva.$group_211'.
  Set init value: \payload__direction$61 = 1'0
Found init rule in `\minerva.$group_210'.
  Set init value: \payload__shift$60 = 1'0
Found init rule in `\minerva.$group_209'.
  Set init value: \payload__logic$57 = 1'0
Found init rule in `\minerva.$group_208'.
  Set init value: \payload__compare$64 = 1'0
Found init rule in `\minerva.$group_207'.
  Set init value: \payload__adder_sub$56 = 1'0
Found init rule in `\minerva.$group_206'.
  Set init value: \payload__store$55 = 1'0
Found init rule in `\minerva.$group_205'.
  Set init value: \payload__load$54 = 1'0
Found init rule in `\minerva.$group_204'.
  Set init value: \payload__funct3$53 = 3'000
Found init rule in `\minerva.$group_203'.
  Set init value: \payload__bypass_m$52 = 1'0
Found init rule in `\minerva.$group_202'.
  Set init value: \payload__bypass_x$51 = 1'0
Found init rule in `\minerva.$group_201'.
  Set init value: \payload__immediate$50 = 0
Found init rule in `\minerva.$group_200'.
  Set init value: \payload__rs1_re$47 = 1'0
Found init rule in `\minerva.$group_199'.
  Set init value: \payload__rd_we$46 = 1'0
Found init rule in `\minerva.$group_198'.
  Set init value: \payload__rs1$45 = 5'00000
Found init rule in `\minerva.$group_197'.
  Set init value: \payload__rd$44 = 5'00000
Found init rule in `\minerva.$group_196'.
  Set init value: \payload__bus_error$72 = 1'0
Found init rule in `\minerva.$group_195'.
  Set init value: \payload__misaligned_fetch$43 = 1'0
Found init rule in `\minerva.$group_194'.
  Set init value: \payload__pc$41 = 30'000000000000000000000000000000
Found init rule in `\minerva.$group_193'.
  Set init value: \payload__bus_error$39 = 1'0
Found init rule in `\minerva.$group_192'.
  Set init value: \payload__instruction$38 = 0
Found init rule in `\minerva.$group_191'.
  Set init value: \payload__misaligned_fetch$37 = 1'0
Found init rule in `\minerva.$group_190'.
  Set init value: \payload__pc$35 = 30'000000000000000000000000000000
Found init rule in `\minerva.$group_189'.
  Set init value: \payload__misaligned_fetch$33 = 1'0
Found init rule in `\minerva.$group_188'.
  Set init value: \payload__pc$32 = 31'1111111111111111111111111111111
Found init rule in `\minerva.$group_180'.
  Set init value: \w_valid_r = 1'0
Found init rule in `\minerva.$group_111'.
  Set init value: \csrf_port__addr = 13'0000000000000
Found init rule in `\minerva.$group_85'.
  Set init value: $verilog_initial_trigger = 1'0
Found init rule in `\shifter.$group_3'.
  Set init value: \m_result$9 = 0
Found init rule in `\shifter.$group_2'.
  Set init value: \m_direction = 1'0
Found init rule in `\loadstore.$group_7'.
  Set init value: \dbus__sel = 4'0000
Found init rule in `\loadstore.$group_6'.
  Set init value: \dbus__dat_w = 0
Found init rule in `\loadstore.$group_5'.
  Set init value: \dbus__adr = 30'000000000000000000000000000000
Found init rule in `\loadstore.$group_4'.
  Set init value: \dbus__we = 1'0
Found init rule in `\loadstore.$group_3'.
  Set init value: \m_bus_error = 1'0
Found init rule in `\loadstore.$group_2'.
  Set init value: \m_load_data = 0
Found init rule in `\loadstore.$group_1'.
  Set init value: \dbus__stb = 1'0
Found init rule in `\loadstore.$group_0'.
  Set init value: \dbus__cyc = 1'0
Found init rule in `\fetch.$group_8'.
  Set init value: \f_bus_error_r = 1'0
Found init rule in `\fetch.$group_7'.
  Set init value: \f_instruction_r = 0
Found init rule in `\fetch.$group_6'.
  Set init value: \ibus__adr = 30'000000000000000000000000000000
Found init rule in `\fetch.$group_5'.
  Set init value: \f_bus_error$5 = 1'0
Found init rule in `\fetch.$group_4'.
  Set init value: \f_instruction$2 = 0
Found init rule in `\fetch.$group_3'.
  Set init value: \ibus__stb = 1'0
Found init rule in `\fetch.$group_2'.
  Set init value: \ibus__cyc = 1'0
Found init rule in `\exception.$group_57'.
  Set init value: \irq_pending_r__value = 0
Found init rule in `\exception.$group_56'.
  Set init value: \irq_mask_r__value = 0
Found init rule in `\exception.$group_43'.
  Set init value: \mip_r__usip = 1'0
  Set init value: \mip_r__ssip = 1'0
  Set init value: \mip_r__wiri0 = 1'0
  Set init value: \mip_r__msip = 1'0
  Set init value: \mip_r__utip = 1'0
  Set init value: \mip_r__stip = 1'0
  Set init value: \mip_r__wiri1 = 1'0
  Set init value: \mip_r__mtip = 1'0
  Set init value: \mip_r__ueip = 1'0
  Set init value: \mip_r__seip = 1'0
  Set init value: \mip_r__wiri2 = 1'0
  Set init value: \mip_r__meip = 1'0
  Set init value: \mip_r__wiri3 = 20'00000000000000000000
Found init rule in `\exception.$group_41'.
  Set init value: \mcause_r__ecode = 31'0000000000000000000000000000000
  Set init value: \mcause_r__interrupt = 1'0
Found init rule in `\exception.$group_40'.
  Set init value: \mepc_r__value = 0
Found init rule in `\exception.$group_39'.
  Set init value: \mscratch_r__value = 0
Found init rule in `\exception.$group_37'.
  Set init value: \mtvec_r__mode = 2'00
  Set init value: \mtvec_r__base = 30'000000000000000000000000000000
Found init rule in `\exception.$group_24'.
  Set init value: \mie_r__usie = 1'0
  Set init value: \mie_r__ssie = 1'0
  Set init value: \mie_r__wpri0 = 1'0
  Set init value: \mie_r__msie = 1'0
  Set init value: \mie_r__utie = 1'0
  Set init value: \mie_r__stie = 1'0
  Set init value: \mie_r__wpri1 = 1'0
  Set init value: \mie_r__mtie = 1'0
  Set init value: \mie_r__ueie = 1'0
  Set init value: \mie_r__seie = 1'0
  Set init value: \mie_r__wpri2 = 1'0
  Set init value: \mie_r__meie = 1'0
  Set init value: \mie_r__wpri3 = 20'00000000000000000000
Found init rule in `\exception.$group_21'.
  Set init value: \misa_r__extensions = 26'00000000000000000000000000
  Set init value: \misa_r__wiri0 = 4'0000
  Set init value: \misa_r__mxl = 2'00
Found init rule in `\exception.$group_0'.
  Set init value: \mstatus_r__uie = 1'0
  Set init value: \mstatus_r__sie = 1'0
  Set init value: \mstatus_r__wpri0 = 1'0
  Set init value: \mstatus_r__mie = 1'0
  Set init value: \mstatus_r__upie = 1'0
  Set init value: \mstatus_r__spie = 1'0
  Set init value: \mstatus_r__wpri1 = 1'0
  Set init value: \mstatus_r__mpie = 1'0
  Set init value: \mstatus_r__spp = 1'0
  Set init value: \mstatus_r__wpri2 = 2'00
  Set init value: \mstatus_r__mpp = 2'00
  Set init value: \mstatus_r__fs = 2'00
  Set init value: \mstatus_r__xs = 2'00
  Set init value: \mstatus_r__mprv = 1'0
  Set init value: \mstatus_r__sum = 1'0
  Set init value: \mstatus_r__mxr = 1'0
  Set init value: \mstatus_r__tvm = 1'0
  Set init value: \mstatus_r__tw = 1'0
  Set init value: \mstatus_r__tsr = 1'0
  Set init value: \mstatus_r__wpri3 = 8'00000000
  Set init value: \mstatus_r__sd = 1'0
Found init rule in `\w.$group_2'.
  Set init value: $verilog_initial_trigger = 1'0
Found init rule in `\m.$group_4'.
  Set init value: $verilog_initial_trigger = 1'0
Found init rule in `\m.$group_2'.
  Set init value: \valid$1 = 1'0
Found init rule in `\x.$group_4'.
  Set init value: $verilog_initial_trigger = 1'0
Found init rule in `\x.$group_2'.
  Set init value: \valid$1 = 1'0
Found init rule in `\d.$group_2'.
  Set init value: \valid$1 = 1'0
Found init rule in `\f.$group_2'.
  Set init value: \valid$1 = 1'0
Found init rule in `\a.$group_0'.
  Set init value: \valid = 1'0

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$group_0'.
     1/1: $next\minerva_clk
Creating decoders for process `\minerva.$group_253'.
     1/1: $next\payload__exception$125
Creating decoders for process `\minerva.$group_252'.
     1/1: $next\payload__multiply$123
Creating decoders for process `\minerva.$group_251'.
     1/1: $next\payload__result$116
Creating decoders for process `\minerva.$group_250'.
     1/1: $next\payload__rd_we$114
Creating decoders for process `\minerva.$group_249'.
     1/1: $next\payload__load_data$121
Creating decoders for process `\minerva.$group_248'.
     1/1: $next\payload__load_mask$120
Creating decoders for process `\minerva.$group_247'.
     1/1: $next\payload__load$118
Creating decoders for process `\minerva.$group_246'.
     1/1: $next\payload__rd$112
Creating decoders for process `\minerva.$group_245'.
     1/1: $next\payload__pc$110
Creating decoders for process `\minerva.$group_244'.
     1/1: $next\payload__result$85
Creating decoders for process `\minerva.$group_243'.
     1/1: $next\payload__branch_predict_taken$105
Creating decoders for process `\minerva.$group_242'.
     1/1: $next\payload__branch_target$103
Creating decoders for process `\minerva.$group_241'.
     1/1: $next\payload__branch_taken$104
Creating decoders for process `\minerva.$group_240'.
     1/1: $next\payload__condition_met$101
Creating decoders for process `\minerva.$group_239'.
     1/1: $next\payload__mret$107
Creating decoders for process `\minerva.$group_238'.
     1/1: $next\payload__exception$108
Creating decoders for process `\minerva.$group_237'.
     1/1: $next\payload__shift$87
Creating decoders for process `\minerva.$group_236'.
     1/1: $next\payload__compare$96
Creating decoders for process `\minerva.$group_235'.
     1/1: $next\payload__store_data$94
Creating decoders for process `\minerva.$group_234'.
     1/1: $next\payload__dbus_sel$93
Creating decoders for process `\minerva.$group_233'.
     1/1: $next\payload__store$92
Creating decoders for process `\minerva.$group_232'.
     1/1: $next\payload__load_mask$90
Creating decoders for process `\minerva.$group_231'.
     1/1: $next\payload__load$89
Creating decoders for process `\minerva.$group_230'.
     1/1: $next\payload__bypass_m$84
Creating decoders for process `\minerva.$group_229'.
     1/1: $next\payload__rd_we$82
Creating decoders for process `\minerva.$group_228'.
     1/1: $next\payload__rd$80
Creating decoders for process `\minerva.$group_227'.
     1/1: $next\payload__pc$78
Creating decoders for process `\minerva.$group_226'.
     1/1: $next\payload__branch_target$66
Creating decoders for process `\minerva.$group_225'.
     1/1: $next\payload__branch_predict_taken
Creating decoders for process `\minerva.$group_224'.
     1/1: $next\payload__src2$49
Creating decoders for process `\minerva.$group_223'.
     1/1: $next\payload__src1$48
Creating decoders for process `\minerva.$group_222'.
     1/1: $next\payload__illegal$76
Creating decoders for process `\minerva.$group_221'.
     1/1: $next\payload__mret$75
Creating decoders for process `\minerva.$group_220'.
     1/1: $next\payload__ebreak$74
Creating decoders for process `\minerva.$group_219'.
     1/1: $next\payload__ecall$73
Creating decoders for process `\minerva.$group_218'.
     1/1: $next\payload__csr_we$70
Creating decoders for process `\minerva.$group_217'.
     1/1: $next\payload__csr_adr$69
Creating decoders for process `\minerva.$group_216'.
     1/1: $next\payload__csr$68
Creating decoders for process `\minerva.$group_215'.
     1/1: $next\payload__fence_i$67
Creating decoders for process `\minerva.$group_214'.
     1/1: $next\payload__branch$65
Creating decoders for process `\minerva.$group_213'.
     1/1: $next\payload__jump$63
Creating decoders for process `\minerva.$group_212'.
     1/1: $next\payload__sext$62
Creating decoders for process `\minerva.$group_211'.
     1/1: $next\payload__direction$61
Creating decoders for process `\minerva.$group_210'.
     1/1: $next\payload__shift$60
Creating decoders for process `\minerva.$group_209'.
     1/1: $next\payload__logic$57
Creating decoders for process `\minerva.$group_208'.
     1/1: $next\payload__compare$64
Creating decoders for process `\minerva.$group_207'.
     1/1: $next\payload__adder_sub$56
Creating decoders for process `\minerva.$group_206'.
     1/1: $next\payload__store$55
Creating decoders for process `\minerva.$group_205'.
     1/1: $next\payload__load$54
Creating decoders for process `\minerva.$group_204'.
     1/1: $next\payload__funct3$53
Creating decoders for process `\minerva.$group_203'.
     1/1: $next\payload__bypass_m$52
Creating decoders for process `\minerva.$group_202'.
     1/1: $next\payload__bypass_x$51
Creating decoders for process `\minerva.$group_201'.
     1/1: $next\payload__immediate$50
Creating decoders for process `\minerva.$group_200'.
     1/1: $next\payload__rs1_re$47
Creating decoders for process `\minerva.$group_199'.
     1/1: $next\payload__rd_we$46
Creating decoders for process `\minerva.$group_198'.
     1/1: $next\payload__rs1$45
Creating decoders for process `\minerva.$group_197'.
     1/1: $next\payload__rd$44
Creating decoders for process `\minerva.$group_196'.
     1/1: $next\payload__bus_error$72
Creating decoders for process `\minerva.$group_195'.
     1/1: $next\payload__misaligned_fetch$43
Creating decoders for process `\minerva.$group_194'.
     1/1: $next\payload__pc$41
Creating decoders for process `\minerva.$group_193'.
     1/1: $next\payload__bus_error$39
Creating decoders for process `\minerva.$group_192'.
     1/1: $next\payload__instruction$38
Creating decoders for process `\minerva.$group_191'.
     1/1: $next\payload__misaligned_fetch$37
Creating decoders for process `\minerva.$group_190'.
     1/1: $next\payload__pc$35
Creating decoders for process `\minerva.$group_189'.
     1/1: $next\payload__misaligned_fetch$33
Creating decoders for process `\minerva.$group_188'.
     1/1: $next\payload__pc$32
Creating decoders for process `\minerva.$group_187'.
     1/1: $next\predict_d_rs1_re
Creating decoders for process `\minerva.$group_186'.
     1/1: $next\predict_d_pc
Creating decoders for process `\minerva.$group_185'.
     1/1: $next\predict_d_offset
Creating decoders for process `\minerva.$group_184'.
     1/1: $next\predict_d_jump
Creating decoders for process `\minerva.$group_183'.
     1/1: $next\predict_d_branch
Creating decoders for process `\minerva.$group_182'.
     1/1: $next\d_src2
Creating decoders for process `\minerva.$group_181'.
     1/1: $next\d_src1
Creating decoders for process `\minerva.$group_180'.
     1/1: $next\w_valid_r
Creating decoders for process `\minerva.$group_179'.
     1/1: $next\gprf_w_data
Creating decoders for process `\minerva.$group_178'.
     1/1: $next\gprf_w_addr
Creating decoders for process `\minerva.$group_177'.
     1/1: $next\gprf_w_en
Creating decoders for process `\minerva.$group_176'.
     1/1: $next\csrf_port__data
Creating decoders for process `\minerva.$group_175'.
     1/1: $next\csrf_port__addr$30
Creating decoders for process `\minerva.$group_174'.
     1/1: $next\csrf_port__en$29
Creating decoders for process `\minerva.$group_173'.
     1/1: $next\x_csr_result
Creating decoders for process `\minerva.$group_172'.
     1/1: $next\w_result
Creating decoders for process `\minerva.$group_171'.
     1/1: $next\m_result
Creating decoders for process `\minerva.$group_170'.
     1/1: $next\x_result
Creating decoders for process `\minerva.$group_169'.
     1/1: $next\d_m_lock
Creating decoders for process `\minerva.$group_168'.
     1/1: $next\d_x_lock
Creating decoders for process `\minerva.$group_167'.
     1/1: $next\x_raw_csr
Creating decoders for process `\minerva.$group_166'.
     1/1: $next\w_raw_rs2
Creating decoders for process `\minerva.$group_165'.
     1/1: $next\m_raw_rs2
Creating decoders for process `\minerva.$group_164'.
     1/1: $next\x_raw_rs2
Creating decoders for process `\minerva.$group_163'.
     1/1: $next\w_raw_rs1
Creating decoders for process `\minerva.$group_162'.
     1/1: $next\m_raw_rs1
Creating decoders for process `\minerva.$group_161'.
     1/1: $next\x_raw_rs1
Creating decoders for process `\minerva.$group_160'.
     1/1: $next\loadstore_dbus__err
Creating decoders for process `\minerva.$group_159'.
     1/1: $next\dbus__bte
Creating decoders for process `\minerva.$group_158'.
     1/1: $next\dbus__cti
Creating decoders for process `\minerva.$group_157'.
     1/1: $next\dbus__we
Creating decoders for process `\minerva.$group_156'.
     1/1: $next\loadstore_dbus__ack
Creating decoders for process `\minerva.$group_155'.
     1/1: $next\dbus__stb
Creating decoders for process `\minerva.$group_154'.
     1/1: $next\m_dbus__cyc
Creating decoders for process `\minerva.$group_153'.
     1/1: $next\dbus__sel
Creating decoders for process `\minerva.$group_152'.
     1/1: $next\loadstore_dbus__dat_r
Creating decoders for process `\minerva.$group_151'.
     1/1: $next\dbus__dat_w
Creating decoders for process `\minerva.$group_150'.
     1/1: $next\dbus__adr
Creating decoders for process `\minerva.$group_149'.
     1/1: $next\loadstore_w_load_data
Creating decoders for process `\minerva.$group_148'.
     1/1: $next\loadstore_w_load_mask
Creating decoders for process `\minerva.$group_147'.
     1/1: $next\loadstore_w_address
Creating decoders for process `\minerva.$group_146'.
     1/1: $next\loadstore_x_valid
Creating decoders for process `\minerva.$group_145'.
     1/1: $next\loadstore_x_stall
Creating decoders for process `\minerva.$group_144'.
     1/1: $next\loadstore_x_mask
Creating decoders for process `\minerva.$group_143'.
     1/1: $next\loadstore_x_store_operand
Creating decoders for process `\minerva.$group_142'.
     1/1: $next\loadstore_x_store
Creating decoders for process `\minerva.$group_141'.
     1/1: $next\loadstore_x_load
Creating decoders for process `\minerva.$group_140'.
     1/1: $next\loadstore_x_address
Creating decoders for process `\minerva.$group_139'.
     1/1: $next\exception_x_ebreak
Creating decoders for process `\minerva.$group_138'.
     1/1: $next\exception_x_valid
Creating decoders for process `\minerva.$group_137'.
     1/1: $next\exception_x_stall
Creating decoders for process `\minerva.$group_136'.
     1/1: $next\exception_x_mret
Creating decoders for process `\minerva.$group_135'.
     1/1: $next\exception_x_illegal
Creating decoders for process `\minerva.$group_134'.
     1/1: $next\exception_x_bus_error
Creating decoders for process `\minerva.$group_133'.
     1/1: $next\exception_x_misaligned_fetch
Creating decoders for process `\minerva.$group_132'.
     1/1: $next\exception_x_ecall
Creating decoders for process `\minerva.$group_131'.
     1/1: $next\exception_x_pc
Creating decoders for process `\minerva.$group_130'.
     1/1: $next\exception_timer_interrupt
Creating decoders for process `\minerva.$group_129'.
     1/1: $next\exception_external_interrupt
Creating decoders for process `\minerva.$group_128'.
     1/1: $next\compare_carry
Creating decoders for process `\minerva.$group_127'.
     1/1: $next\compare_overflow
Creating decoders for process `\minerva.$group_126'.
     1/1: $next\compare_negative
Creating decoders for process `\minerva.$group_125'.
     1/1: $next\compare_zero
Creating decoders for process `\minerva.$group_124'.
     1/1: $next\compare_op
Creating decoders for process `\minerva.$group_123'.
     1/1: $next\shifter_x_stall
Creating decoders for process `\minerva.$group_122'.
     1/1: $next\shifter_x_src1
Creating decoders for process `\minerva.$group_121'.
     1/1: $next\shifter_x_shamt
Creating decoders for process `\minerva.$group_120'.
     1/1: $next\shifter_x_sext
Creating decoders for process `\minerva.$group_119'.
     1/1: $next\shifter_x_direction
Creating decoders for process `\minerva.$group_118'.
     1/1: $next\adder_src2
Creating decoders for process `\minerva.$group_117'.
     1/1: $next\adder_src1
Creating decoders for process `\minerva.$group_116'.
     1/1: $next\adder_sub
Creating decoders for process `\minerva.$group_115'.
     1/1: $next\logic_src2
Creating decoders for process `\minerva.$group_114'.
     1/1: $next\logic_src1
Creating decoders for process `\minerva.$group_113'.
     1/1: $next\logic_op
Creating decoders for process `\minerva.$group_112'.
     1/1: $next\csrf_port__en
Creating decoders for process `\minerva.$group_111'.
     1/1: $next\csrf_port__addr
Creating decoders for process `\minerva.$group_110'.
     1/1: $next\gprf_r_addr$25
Creating decoders for process `\minerva.$group_109'.
     1/1: $next\gprf_r_addr
Creating decoders for process `\minerva.$group_108'.
     1/1: $next\decoder_instruction
Creating decoders for process `\minerva.$group_107'.
     1/1: $next\fetch_m_branch_target
Creating decoders for process `\minerva.$group_106'.
     1/1: $next\fetch_m_valid
Creating decoders for process `\minerva.$group_105'.
     1/1: $next\a_m_branch_taken
Creating decoders for process `\minerva.$group_104'.
     1/1: $next\fetch_m_branch_predict_taken
Creating decoders for process `\minerva.$group_103'.
     1/1: $next\fetch_x_pc
Creating decoders for process `\minerva.$group_102'.
     1/1: $next\fetch_d_valid
Creating decoders for process `\minerva.$group_101'.
     1/1: $next\fetch_d_branch_target
Creating decoders for process `\minerva.$group_100'.
     1/1: $next\fetch_d_branch_predict_taken
Creating decoders for process `\minerva.$group_99'.
     1/1: $next\fetch_f_stall
Creating decoders for process `\minerva.$group_98'.
     1/1: $next\fetch_f_pc
Creating decoders for process `\minerva.$group_97'.
     1/1: $next\fetch_a_stall
Creating decoders for process `\minerva.$group_96'.
     1/1: $next\fetch_ibus__err
Creating decoders for process `\minerva.$group_95'.
     1/1: $next\ibus__bte
Creating decoders for process `\minerva.$group_94'.
     1/1: $next\ibus__cti
Creating decoders for process `\minerva.$group_93'.
     1/1: $next\ibus__we
Creating decoders for process `\minerva.$group_92'.
     1/1: $next\fetch_ibus__ack
Creating decoders for process `\minerva.$group_91'.
     1/1: $next\ibus__stb
Creating decoders for process `\minerva.$group_90'.
     1/1: $next\m_ibus__cyc
Creating decoders for process `\minerva.$group_89'.
     1/1: $next\ibus__sel
Creating decoders for process `\minerva.$group_88'.
     1/1: $next\fetch_ibus__dat_r
Creating decoders for process `\minerva.$group_87'.
     1/1: $next\ibus__dat_w
Creating decoders for process `\minerva.$group_86'.
     1/1: $next\ibus__adr
Creating decoders for process `\minerva.$group_85'.
     1/2: $verilog_initial_trigger
     2/2: $next\a_valid$1
Creating decoders for process `\minerva.$group_84'.
     1/1: $next\payload__exception$124
Creating decoders for process `\minerva.$group_83'.
     1/1: $next\payload__multiply$122
Creating decoders for process `\minerva.$group_82'.
     1/1: $next\payload__load_data
Creating decoders for process `\minerva.$group_81'.
     1/1: $next\payload__load_mask$119
Creating decoders for process `\minerva.$group_80'.
     1/1: $next\payload__load$117
Creating decoders for process `\minerva.$group_79'.
     1/1: $next\payload__result$115
Creating decoders for process `\minerva.$group_78'.
     1/1: $next\payload__rd_we$113
Creating decoders for process `\minerva.$group_77'.
     1/1: $next\payload__rd$111
Creating decoders for process `\minerva.$group_76'.
     1/1: $next\payload__pc$109
Creating decoders for process `\minerva.$group_75'.
     1/1: $next\w_kill
Creating decoders for process `\minerva.$group_74'.
     1/1: $next\m_stall$19
Creating decoders for process `\minerva.$group_73'.
     1/1: $next\w_valid
Creating decoders for process `\minerva.$group_72'.
     1/1: $next\payload__exception
Creating decoders for process `\minerva.$group_71'.
     1/1: $next\payload__mret$106
Creating decoders for process `\minerva.$group_70'.
     1/1: $next\a_payload__branch_predict_taken
Creating decoders for process `\minerva.$group_69'.
     1/1: $next\payload__branch_taken
Creating decoders for process `\minerva.$group_68'.
     1/1: $next\payload__branch_target$102
Creating decoders for process `\minerva.$group_67'.
     1/1: $next\payload__condition_met
Creating decoders for process `\minerva.$group_66'.
     1/1: $next\payload__divide$99
Creating decoders for process `\minerva.$group_65'.
     1/1: $next\payload__multiply$97
Creating decoders for process `\minerva.$group_64'.
     1/1: $next\payload__compare$95
Creating decoders for process `\minerva.$group_63'.
     1/1: $next\payload__store_data
Creating decoders for process `\minerva.$group_62'.
     1/1: $next\payload__dbus_sel
Creating decoders for process `\minerva.$group_61'.
     1/1: $next\payload__store$91
Creating decoders for process `\minerva.$group_60'.
     1/1: $next\payload__load_mask
Creating decoders for process `\minerva.$group_59'.
     1/1: $next\payload__load$88
Creating decoders for process `\minerva.$group_58'.
     1/1: $next\payload__shift$86
Creating decoders for process `\minerva.$group_57'.
     1/1: $next\payload__result
Creating decoders for process `\minerva.$group_56'.
     1/1: $next\payload__bypass_m$83
Creating decoders for process `\minerva.$group_55'.
     1/1: $next\payload__rd_we$81
Creating decoders for process `\minerva.$group_54'.
     1/1: $next\payload__rd$79
Creating decoders for process `\minerva.$group_53'.
     1/1: $next\payload__pc$77
Creating decoders for process `\minerva.$group_52'.
     1/1: $next\m_kill
Creating decoders for process `\minerva.$group_51'.
     1/1: $next\x_stall$15
Creating decoders for process `\minerva.$group_50'.
     1/1: $next\m_valid
Creating decoders for process `\minerva.$group_49'.
     1/1: $next\payload__illegal
Creating decoders for process `\minerva.$group_48'.
     1/1: $next\payload__mret
Creating decoders for process `\minerva.$group_47'.
     1/1: $next\payload__ebreak
Creating decoders for process `\minerva.$group_46'.
     1/1: $next\payload__ecall
Creating decoders for process `\minerva.$group_45'.
     1/1: $next\payload__bus_error$71
Creating decoders for process `\minerva.$group_44'.
     1/1: $next\payload__csr_we
Creating decoders for process `\minerva.$group_43'.
     1/1: $next\payload__csr_adr
Creating decoders for process `\minerva.$group_42'.
     1/1: $next\payload__csr
Creating decoders for process `\minerva.$group_41'.
     1/1: $next\payload__fence_i
Creating decoders for process `\minerva.$group_40'.
     1/1: $next\f_payload__branch_predict_taken
Creating decoders for process `\minerva.$group_39'.
     1/1: $next\payload__branch_target
Creating decoders for process `\minerva.$group_38'.
     1/1: $next\payload__branch
Creating decoders for process `\minerva.$group_37'.
     1/1: $next\payload__compare
Creating decoders for process `\minerva.$group_36'.
     1/1: $next\payload__jump
Creating decoders for process `\minerva.$group_35'.
     1/1: $next\payload__sext
Creating decoders for process `\minerva.$group_34'.
     1/1: $next\payload__direction
Creating decoders for process `\minerva.$group_33'.
     1/1: $next\payload__shift
Creating decoders for process `\minerva.$group_32'.
     1/1: $next\payload__divide
Creating decoders for process `\minerva.$group_31'.
     1/1: $next\payload__multiply
Creating decoders for process `\minerva.$group_30'.
     1/1: $next\payload__logic
Creating decoders for process `\minerva.$group_29'.
     1/1: $next\payload__adder_sub
Creating decoders for process `\minerva.$group_28'.
     1/1: $next\payload__store
Creating decoders for process `\minerva.$group_27'.
     1/1: $next\payload__load
Creating decoders for process `\minerva.$group_26'.
     1/1: $next\payload__funct3
Creating decoders for process `\minerva.$group_25'.
     1/1: $next\payload__bypass_m
Creating decoders for process `\minerva.$group_24'.
     1/1: $next\payload__bypass_x
Creating decoders for process `\minerva.$group_23'.
     1/1: $next\payload__immediate
Creating decoders for process `\minerva.$group_22'.
     1/1: $next\payload__src2
Creating decoders for process `\minerva.$group_21'.
     1/1: $next\payload__src1
Creating decoders for process `\minerva.$group_20'.
     1/1: $next\payload__rs1_re
Creating decoders for process `\minerva.$group_19'.
     1/1: $next\payload__rd_we
Creating decoders for process `\minerva.$group_18'.
     1/1: $next\payload__rs1
Creating decoders for process `\minerva.$group_17'.
     1/1: $next\payload__rd
Creating decoders for process `\minerva.$group_16'.
     1/1: $next\payload__misaligned_fetch$42
Creating decoders for process `\minerva.$group_15'.
     1/1: $next\payload__pc$40
Creating decoders for process `\minerva.$group_14'.
     1/1: $next\x_kill
Creating decoders for process `\minerva.$group_13'.
     1/1: $next\d_stall$10
Creating decoders for process `\minerva.$group_12'.
     1/1: $next\x_valid
Creating decoders for process `\minerva.$group_11'.
     1/1: $next\payload__bus_error
Creating decoders for process `\minerva.$group_10'.
     1/1: $next\payload__instruction
Creating decoders for process `\minerva.$group_9'.
     1/1: $next\payload__misaligned_fetch$36
Creating decoders for process `\minerva.$group_8'.
     1/1: $next\payload__pc$34
Creating decoders for process `\minerva.$group_7'.
     1/1: $next\d_kill
Creating decoders for process `\minerva.$group_6'.
     1/1: $next\f_stall$5
Creating decoders for process `\minerva.$group_5'.
     1/1: $next\d_valid
Creating decoders for process `\minerva.$group_4'.
     1/1: $next\payload__misaligned_fetch
Creating decoders for process `\minerva.$group_3'.
     1/1: $next\payload__pc
Creating decoders for process `\minerva.$group_2'.
     1/1: $next\f_kill
Creating decoders for process `\minerva.$group_1'.
     1/1: $next\a_stall
Creating decoders for process `\minerva.$group_0'.
     1/1: $next\f_valid
Creating decoders for process `\shifter.$group_4'.
     1/1: $next\m_result
Creating decoders for process `\shifter.$group_3'.
     1/1: $next\m_result$9
Creating decoders for process `\shifter.$group_2'.
     1/1: $next\m_direction
Creating decoders for process `\shifter.$group_1'.
     1/1: $next\x_filler
Creating decoders for process `\shifter.$group_0'.
     1/1: $next\x_operand
Creating decoders for process `\predict.$group_1'.
     1/1: $next\d_branch_target
Creating decoders for process `\predict.$group_0'.
     1/1: $next\d_branch_taken
Creating decoders for process `\logic.$group_0'.
     1/1: $next\result
Creating decoders for process `\loadstore.$group_7'.
     1/1: $next\dbus__sel
Creating decoders for process `\loadstore.$group_6'.
     1/1: $next\dbus__dat_w
Creating decoders for process `\loadstore.$group_5'.
     1/1: $next\dbus__adr
Creating decoders for process `\loadstore.$group_4'.
     1/1: $next\dbus__we
Creating decoders for process `\loadstore.$group_3'.
     1/1: $next\m_bus_error
Creating decoders for process `\loadstore.$group_2'.
     1/1: $next\m_load_data
Creating decoders for process `\loadstore.$group_1'.
     1/1: $next\dbus__stb
Creating decoders for process `\loadstore.$group_0'.
     1/1: $next\dbus__cyc
Creating decoders for process `\anonymous$1.$group_2'.
     1/1: $next\w_load_result
Creating decoders for process `\anonymous$1.$group_1'.
     1/1: $next\x_store_data
Creating decoders for process `\anonymous$1.$group_0'.
     1/1: $next\x_dbus_sel
Creating decoders for process `\fetch.$group_8'.
     1/1: $next\f_bus_error_r
Creating decoders for process `\fetch.$group_7'.
     1/1: $next\f_instruction_r
Creating decoders for process `\fetch.$group_6'.
     1/1: $next\ibus__adr
Creating decoders for process `\fetch.$group_5'.
     1/1: $next\f_bus_error$5
Creating decoders for process `\fetch.$group_4'.
     1/1: $next\f_instruction$2
Creating decoders for process `\fetch.$group_3'.
     1/1: $next\ibus__stb
Creating decoders for process `\fetch.$group_2'.
     1/1: $next\ibus__cyc
Creating decoders for process `\fetch.$group_1'.
     1/1: $next\f_bus_error
Creating decoders for process `\fetch.$group_0'.
     1/1: $next\f_instruction
Creating decoders for process `\anonymous.$group_1'.
     1/1: $next\a_misaligned_fetch
Creating decoders for process `\anonymous.$group_0'.
     1/1: $next\a_pc
Creating decoders for process `\exception.$group_60'.
     1/1: $next\x_raise
Creating decoders for process `\exception.$group_59'.
     1/7: $next\interrupt_pe_i [15:12]
     2/7: $next\interrupt_pe_i [11]
     3/7: $next\interrupt_pe_i [10:8]
     4/7: $next\interrupt_pe_i [7]
     5/7: $next\interrupt_pe_i [6:4]
     6/7: $next\interrupt_pe_i [3]
     7/7: $next\interrupt_pe_i [2:0]
Creating decoders for process `\exception.$group_58'.
     1/7: $next\trap_pe_i [15:12]
     2/7: $next\trap_pe_i [11]
     3/7: $next\trap_pe_i [10:4]
     4/7: $next\trap_pe_i [3]
     5/7: $next\trap_pe_i [2]
     6/7: $next\trap_pe_i [1]
     7/7: $next\trap_pe_i [0]
Creating decoders for process `\exception.$group_57'.
     1/1: $next\irq_pending_r__value
Creating decoders for process `\exception.$group_56'.
     1/1: $next\irq_mask_r__value
Creating decoders for process `\exception.$group_43'.
     1/13: $next\mip_r__wiri3
     2/13: $next\mip_r__wiri2
     3/13: $next\mip_r__seip
     4/13: $next\mip_r__ueip
     5/13: $next\mip_r__mtip
     6/13: $next\mip_r__wiri1
     7/13: $next\mip_r__stip
     8/13: $next\mip_r__utip
     9/13: $next\mip_r__msip
    10/13: $next\mip_r__wiri0
    11/13: $next\mip_r__ssip
    12/13: $next\mip_r__usip
    13/13: $next\mip_r__meip
Creating decoders for process `\exception.$group_41'.
     1/2: $next\mcause_r__interrupt
     2/2: $next\mcause_r__ecode
Creating decoders for process `\exception.$group_40'.
     1/1: $next\mepc_r__value
Creating decoders for process `\exception.$group_39'.
     1/1: $next\mscratch_r__value
Creating decoders for process `\exception.$group_37'.
     1/2: $next\mtvec_r__base
     2/2: $next\mtvec_r__mode
Creating decoders for process `\exception.$group_24'.
     1/13: $next\mie_r__wpri3
     2/13: $next\mie_r__wpri2
     3/13: $next\mie_r__seie
     4/13: $next\mie_r__ueie
     5/13: $next\mie_r__mtie
     6/13: $next\mie_r__wpri1
     7/13: $next\mie_r__stie
     8/13: $next\mie_r__utie
     9/13: $next\mie_r__msie
    10/13: $next\mie_r__wpri0
    11/13: $next\mie_r__ssie
    12/13: $next\mie_r__usie
    13/13: $next\mie_r__meie
Creating decoders for process `\exception.$group_21'.
     1/3: $next\misa_r__mxl
     2/3: $next\misa_r__extensions
     3/3: $next\misa_r__wiri0
Creating decoders for process `\exception.$group_0'.
     1/21: $next\mstatus_r__sd
     2/21: $next\mstatus_r__tsr
     3/21: $next\mstatus_r__tw
     4/21: $next\mstatus_r__tvm
     5/21: $next\mstatus_r__mxr
     6/21: $next\mstatus_r__sum
     7/21: $next\mstatus_r__mprv
     8/21: $next\mstatus_r__xs
     9/21: $next\mstatus_r__fs
    10/21: $next\mstatus_r__mpp
    11/21: $next\mstatus_r__wpri2
    12/21: $next\mstatus_r__spp
    13/21: $next\mstatus_r__mpie
    14/21: $next\mstatus_r__wpri1
    15/21: $next\mstatus_r__spie
    16/21: $next\mstatus_r__upie
    17/21: $next\mstatus_r__mie
    18/21: $next\mstatus_r__wpri0
    19/21: $next\mstatus_r__sie
    20/21: $next\mstatus_r__uie
    21/21: $next\mstatus_r__wpri3
Creating decoders for process `\interrupt_pe.$group_1'.
     1/1: $next\n
Creating decoders for process `\interrupt_pe.$group_0'.
     1/1: $next\o
Creating decoders for process `\trap_pe.$group_1'.
     1/1: $next\n
Creating decoders for process `\trap_pe.$group_0'.
     1/1: $next\o
Creating decoders for process `\decoder.$group_40'.
     1/1: $next\illegal
Creating decoders for process `\decoder.$group_39'.
     1/1: $next\bypass_m
Creating decoders for process `\decoder.$group_38'.
     1/1: $next\bypass_x
Creating decoders for process `\decoder.$group_37'.
     1/1: $next\mret
Creating decoders for process `\decoder.$group_36'.
     1/1: $next\ebreak
Creating decoders for process `\decoder.$group_35'.
     1/1: $next\ecall
Creating decoders for process `\decoder.$group_34'.
     1/1: $next\privileged
Creating decoders for process `\decoder.$group_33'.
     1/1: $next\csr_we
Creating decoders for process `\decoder.$group_32'.
     1/1: $next\csr
Creating decoders for process `\decoder.$group_31'.
     1/1: $next\fence_i
Creating decoders for process `\decoder.$group_30'.
     1/1: $next\store
Creating decoders for process `\decoder.$group_29'.
     1/1: $next\load
Creating decoders for process `\decoder.$group_28'.
     1/1: $next\jump
Creating decoders for process `\decoder.$group_27'.
     1/1: $next\auipc
Creating decoders for process `\decoder.$group_26'.
     1/1: $next\lui
Creating decoders for process `\decoder.$group_25'.
     1/1: $next\sext
Creating decoders for process `\decoder.$group_24'.
     1/1: $next\direction
Creating decoders for process `\decoder.$group_23'.
     1/1: $next\shift
Creating decoders for process `\decoder.$group_22'.
     1/1: $next\logic
Creating decoders for process `\decoder.$group_21'.
     1/1: $next\adder_sub
Creating decoders for process `\decoder.$group_20'.
     1/1: $next\adder
Creating decoders for process `\decoder.$group_19'.
     1/1: $next\branch
Creating decoders for process `\decoder.$group_18'.
     1/1: $next\compare
Creating decoders for process `\decoder.$group_17'.
     1/1: $next\funct3
Creating decoders for process `\decoder.$group_16'.
     1/1: $next\rs2_re
Creating decoders for process `\decoder.$group_15'.
     1/1: $next\rs1_re
Creating decoders for process `\decoder.$group_14'.
     1/1: $next\rd_we
Creating decoders for process `\decoder.$group_13'.
     1/1: $next\rs2
Creating decoders for process `\decoder.$group_12'.
     1/1: $next\rs1
Creating decoders for process `\decoder.$group_11'.
     1/1: $next\rd
Creating decoders for process `\decoder.$group_10'.
     1/1: $next\immediate
Creating decoders for process `\decoder.$group_9'.
     1/1: $next\fmt
Creating decoders for process `\decoder.$group_8'.
     1/1: $next\jimm20
Creating decoders for process `\decoder.$group_7'.
     1/1: $next\uimm20
Creating decoders for process `\decoder.$group_6'.
     1/1: $next\bimm12
Creating decoders for process `\decoder.$group_5'.
     1/1: $next\simm12
Creating decoders for process `\decoder.$group_4'.
     1/1: $next\iimm12
Creating decoders for process `\decoder.$group_3'.
     1/1: $next\funct12
Creating decoders for process `\decoder.$group_2'.
     1/1: $next\funct7
Creating decoders for process `\decoder.$group_1'.
     1/1: $next\funct3$1
Creating decoders for process `\decoder.$group_0'.
     1/1: $next\opcode
Creating decoders for process `\compare.$group_0'.
     1/1: $next\condition_met
Creating decoders for process `\adder.$group_2'.
     1/1: $next\overflow
Creating decoders for process `\adder.$group_0'.
     1/2: $next\carry
     2/2: $next\result
Creating decoders for process `\csrf.$group_194'.
     1/1: $next\irq_pending_we
Creating decoders for process `\csrf.$group_193'.
     1/1: $next\irq_pending_w__value
Creating decoders for process `\csrf.$group_192'.
     1/1: $next\dat_w__value$19
Creating decoders for process `\csrf.$group_191'.
     1/1: $next\irq_mask_we
Creating decoders for process `\csrf.$group_190'.
     1/1: $next\irq_mask_w__value
Creating decoders for process `\csrf.$group_189'.
     1/1: $next\dat_w__value$18
Creating decoders for process `\csrf.$group_188'.
     1/1: $next\mip_we
Creating decoders for process `\csrf.$group_187'.
     1/1: $next\mip_w__wiri3
Creating decoders for process `\csrf.$group_186'.
     1/1: $next\mip_w__meip
Creating decoders for process `\csrf.$group_185'.
     1/1: $next\mip_w__wiri2
Creating decoders for process `\csrf.$group_184'.
     1/1: $next\mip_w__seip
Creating decoders for process `\csrf.$group_183'.
     1/1: $next\mip_w__ueip
Creating decoders for process `\csrf.$group_182'.
     1/1: $next\mip_w__mtip
Creating decoders for process `\csrf.$group_181'.
     1/1: $next\mip_w__wiri1
Creating decoders for process `\csrf.$group_180'.
     1/1: $next\mip_w__stip
Creating decoders for process `\csrf.$group_179'.
     1/1: $next\mip_w__utip
Creating decoders for process `\csrf.$group_178'.
     1/1: $next\mip_w__msip
Creating decoders for process `\csrf.$group_177'.
     1/1: $next\mip_w__wiri0
Creating decoders for process `\csrf.$group_176'.
     1/1: $next\mip_w__ssip
Creating decoders for process `\csrf.$group_175'.
     1/1: $next\mip_w__usip
Creating decoders for process `\csrf.$group_162'.
     1/13: $next\dat_w__wiri3
     2/13: $next\dat_w__wiri2
     3/13: $next\dat_w__seip
     4/13: $next\dat_w__ueip
     5/13: $next\dat_w__mtip
     6/13: $next\dat_w__wiri1
     7/13: $next\dat_w__stip
     8/13: $next\dat_w__utip
     9/13: $next\dat_w__msip
    10/13: $next\dat_w__wiri0$17
    11/13: $next\dat_w__ssip
    12/13: $next\dat_w__usip
    13/13: $next\dat_w__meip
Creating decoders for process `\csrf.$group_161'.
     1/1: $next\mcause_we
Creating decoders for process `\csrf.$group_160'.
     1/1: $next\mcause_w__interrupt
Creating decoders for process `\csrf.$group_159'.
     1/1: $next\mcause_w__ecode
Creating decoders for process `\csrf.$group_157'.
     1/2: $next\dat_w__interrupt
     2/2: $next\dat_w__ecode
Creating decoders for process `\csrf.$group_156'.
     1/1: $next\mepc_we
Creating decoders for process `\csrf.$group_155'.
     1/1: $next\mepc_w__value
Creating decoders for process `\csrf.$group_154'.
     1/1: $next\dat_w__value$16
Creating decoders for process `\csrf.$group_153'.
     1/1: $next\mscratch_we
Creating decoders for process `\csrf.$group_152'.
     1/1: $next\mscratch_w__value
Creating decoders for process `\csrf.$group_151'.
     1/1: $next\dat_w__value
Creating decoders for process `\csrf.$group_150'.
     1/1: $next\mtvec_we
Creating decoders for process `\csrf.$group_149'.
     1/1: $next\mtvec_w__base
Creating decoders for process `\csrf.$group_148'.
     1/1: $next\mtvec_w__mode
Creating decoders for process `\csrf.$group_146'.
     1/2: $next\dat_w__base
     2/2: $next\dat_w__mode
Creating decoders for process `\csrf.$group_145'.
     1/1: $next\mie_we
Creating decoders for process `\csrf.$group_144'.
     1/1: $next\mie_w__wpri3
Creating decoders for process `\csrf.$group_143'.
     1/1: $next\mie_w__meie
Creating decoders for process `\csrf.$group_142'.
     1/1: $next\mie_w__wpri2
Creating decoders for process `\csrf.$group_141'.
     1/1: $next\mie_w__seie
Creating decoders for process `\csrf.$group_140'.
     1/1: $next\mie_w__ueie
Creating decoders for process `\csrf.$group_139'.
     1/1: $next\mie_w__mtie
Creating decoders for process `\csrf.$group_138'.
     1/1: $next\mie_w__wpri1
Creating decoders for process `\csrf.$group_137'.
     1/1: $next\mie_w__stie
Creating decoders for process `\csrf.$group_136'.
     1/1: $next\mie_w__utie
Creating decoders for process `\csrf.$group_135'.
     1/1: $next\mie_w__msie
Creating decoders for process `\csrf.$group_134'.
     1/1: $next\mie_w__wpri0
Creating decoders for process `\csrf.$group_133'.
     1/1: $next\mie_w__ssie
Creating decoders for process `\csrf.$group_132'.
     1/1: $next\mie_w__usie
Creating decoders for process `\csrf.$group_119'.
     1/13: $next\dat_w__wpri3$15
     2/13: $next\dat_w__wpri2$14
     3/13: $next\dat_w__seie
     4/13: $next\dat_w__ueie
     5/13: $next\dat_w__mtie
     6/13: $next\dat_w__wpri1$13
     7/13: $next\dat_w__stie
     8/13: $next\dat_w__utie
     9/13: $next\dat_w__msie
    10/13: $next\dat_w__wpri0$12
    11/13: $next\dat_w__ssie
    12/13: $next\dat_w__usie
    13/13: $next\dat_w__meie
Creating decoders for process `\csrf.$group_118'.
     1/1: $next\misa_we
Creating decoders for process `\csrf.$group_117'.
     1/1: $next\misa_w__mxl
Creating decoders for process `\csrf.$group_116'.
     1/1: $next\misa_w__wiri0
Creating decoders for process `\csrf.$group_115'.
     1/1: $next\misa_w__extensions
Creating decoders for process `\csrf.$group_112'.
     1/3: $next\dat_w__mxl
     2/3: $next\dat_w__extensions
     3/3: $next\dat_w__wiri0
Creating decoders for process `\csrf.$group_111'.
     1/1: $next\mstatus_we
Creating decoders for process `\csrf.$group_110'.
     1/1: $next\mstatus_w__sd
Creating decoders for process `\csrf.$group_109'.
     1/1: $next\mstatus_w__wpri3
Creating decoders for process `\csrf.$group_108'.
     1/1: $next\mstatus_w__tsr
Creating decoders for process `\csrf.$group_107'.
     1/1: $next\mstatus_w__tw
Creating decoders for process `\csrf.$group_106'.
     1/1: $next\mstatus_w__tvm
Creating decoders for process `\csrf.$group_105'.
     1/1: $next\mstatus_w__mxr
Creating decoders for process `\csrf.$group_104'.
     1/1: $next\mstatus_w__sum
Creating decoders for process `\csrf.$group_103'.
     1/1: $next\mstatus_w__mprv
Creating decoders for process `\csrf.$group_102'.
     1/1: $next\mstatus_w__xs
Creating decoders for process `\csrf.$group_101'.
     1/1: $next\mstatus_w__fs
Creating decoders for process `\csrf.$group_100'.
     1/1: $next\mstatus_w__mpp
Creating decoders for process `\csrf.$group_99'.
     1/1: $next\mstatus_w__wpri2
Creating decoders for process `\csrf.$group_98'.
     1/1: $next\mstatus_w__spp
Creating decoders for process `\csrf.$group_97'.
     1/1: $next\mstatus_w__mpie
Creating decoders for process `\csrf.$group_96'.
     1/1: $next\mstatus_w__wpri1
Creating decoders for process `\csrf.$group_95'.
     1/1: $next\mstatus_w__spie
Creating decoders for process `\csrf.$group_94'.
     1/1: $next\mstatus_w__upie
Creating decoders for process `\csrf.$group_93'.
     1/1: $next\mstatus_w__mie
Creating decoders for process `\csrf.$group_92'.
     1/1: $next\mstatus_w__wpri0
Creating decoders for process `\csrf.$group_91'.
     1/1: $next\mstatus_w__sie
Creating decoders for process `\csrf.$group_90'.
     1/1: $next\mstatus_w__uie
Creating decoders for process `\csrf.$group_69'.
     1/21: $next\dat_w__sd
     2/21: $next\dat_w__tsr
     3/21: $next\dat_w__tw
     4/21: $next\dat_w__tvm
     5/21: $next\dat_w__mxr
     6/21: $next\dat_w__sum
     7/21: $next\dat_w__mprv
     8/21: $next\dat_w__xs
     9/21: $next\dat_w__fs
    10/21: $next\dat_w__mpp
    11/21: $next\dat_w__wpri2
    12/21: $next\dat_w__spp
    13/21: $next\dat_w__mpie
    14/21: $next\dat_w__wpri1
    15/21: $next\dat_w__spie
    16/21: $next\dat_w__upie
    17/21: $next\dat_w__mie
    18/21: $next\dat_w__wpri0
    19/21: $next\dat_w__sie
    20/21: $next\dat_w__uie
    21/21: $next\dat_w__wpri3
Creating decoders for process `\csrf.$group_68'.
     1/1: $next\irq_pending_re
Creating decoders for process `\csrf.$group_67'.
     1/1: $next\dat_r__value$11
Creating decoders for process `\csrf.$group_66'.
     1/1: $next\irq_mask_re
Creating decoders for process `\csrf.$group_65'.
     1/1: $next\dat_r__value$10
Creating decoders for process `\csrf.$group_64'.
     1/1: $next\mip_re
Creating decoders for process `\csrf.$group_63'.
     1/1: $next\dat_r__wiri3
Creating decoders for process `\csrf.$group_62'.
     1/1: $next\dat_r__meip
Creating decoders for process `\csrf.$group_61'.
     1/1: $next\dat_r__wiri2
Creating decoders for process `\csrf.$group_60'.
     1/1: $next\dat_r__seip
Creating decoders for process `\csrf.$group_59'.
     1/1: $next\dat_r__ueip
Creating decoders for process `\csrf.$group_58'.
     1/1: $next\dat_r__mtip
Creating decoders for process `\csrf.$group_57'.
     1/1: $next\dat_r__wiri1
Creating decoders for process `\csrf.$group_56'.
     1/1: $next\dat_r__stip
Creating decoders for process `\csrf.$group_55'.
     1/1: $next\dat_r__utip
Creating decoders for process `\csrf.$group_54'.
     1/1: $next\dat_r__msip
Creating decoders for process `\csrf.$group_53'.
     1/1: $next\dat_r__wiri0$9
Creating decoders for process `\csrf.$group_52'.
     1/1: $next\dat_r__ssip
Creating decoders for process `\csrf.$group_51'.
     1/1: $next\dat_r__usip
Creating decoders for process `\csrf.$group_50'.
     1/1: $next\mcause_re
Creating decoders for process `\csrf.$group_49'.
     1/1: $next\dat_r__interrupt
Creating decoders for process `\csrf.$group_48'.
     1/1: $next\dat_r__ecode
Creating decoders for process `\csrf.$group_47'.
     1/1: $next\mepc_re
Creating decoders for process `\csrf.$group_46'.
     1/1: $next\dat_r__value$8
Creating decoders for process `\csrf.$group_45'.
     1/1: $next\mscratch_re
Creating decoders for process `\csrf.$group_44'.
     1/1: $next\dat_r__value
Creating decoders for process `\csrf.$group_43'.
     1/1: $next\mtvec_re
Creating decoders for process `\csrf.$group_42'.
     1/1: $next\dat_r__base
Creating decoders for process `\csrf.$group_41'.
     1/1: $next\dat_r__mode
Creating decoders for process `\csrf.$group_40'.
     1/1: $next\mie_re
Creating decoders for process `\csrf.$group_39'.
     1/1: $next\dat_r__wpri3$7
Creating decoders for process `\csrf.$group_38'.
     1/1: $next\dat_r__meie
Creating decoders for process `\csrf.$group_37'.
     1/1: $next\dat_r__wpri2$6
Creating decoders for process `\csrf.$group_36'.
     1/1: $next\dat_r__seie
Creating decoders for process `\csrf.$group_35'.
     1/1: $next\dat_r__ueie
Creating decoders for process `\csrf.$group_34'.
     1/1: $next\dat_r__mtie
Creating decoders for process `\csrf.$group_33'.
     1/1: $next\dat_r__wpri1$5
Creating decoders for process `\csrf.$group_32'.
     1/1: $next\dat_r__stie
Creating decoders for process `\csrf.$group_31'.
     1/1: $next\dat_r__utie
Creating decoders for process `\csrf.$group_30'.
     1/1: $next\dat_r__msie
Creating decoders for process `\csrf.$group_29'.
     1/1: $next\dat_r__wpri0$4
Creating decoders for process `\csrf.$group_28'.
     1/1: $next\dat_r__ssie
Creating decoders for process `\csrf.$group_27'.
     1/1: $next\dat_r__usie
Creating decoders for process `\csrf.$group_26'.
     1/1: $next\misa_re
Creating decoders for process `\csrf.$group_25'.
     1/1: $next\dat_r__mxl
Creating decoders for process `\csrf.$group_24'.
     1/1: $next\dat_r__wiri0
Creating decoders for process `\csrf.$group_23'.
     1/1: $next\dat_r__extensions
Creating decoders for process `\csrf.$group_22'.
     1/1: $next\mstatus_re
Creating decoders for process `\csrf.$group_21'.
     1/1: $next\dat_r__sd
Creating decoders for process `\csrf.$group_20'.
     1/1: $next\dat_r__wpri3
Creating decoders for process `\csrf.$group_19'.
     1/1: $next\dat_r__tsr
Creating decoders for process `\csrf.$group_18'.
     1/1: $next\dat_r__tw
Creating decoders for process `\csrf.$group_17'.
     1/1: $next\dat_r__tvm
Creating decoders for process `\csrf.$group_16'.
     1/1: $next\dat_r__mxr
Creating decoders for process `\csrf.$group_15'.
     1/1: $next\dat_r__sum
Creating decoders for process `\csrf.$group_14'.
     1/1: $next\dat_r__mprv
Creating decoders for process `\csrf.$group_13'.
     1/1: $next\dat_r__xs
Creating decoders for process `\csrf.$group_12'.
     1/1: $next\dat_r__fs
Creating decoders for process `\csrf.$group_11'.
     1/1: $next\dat_r__mpp
Creating decoders for process `\csrf.$group_10'.
     1/1: $next\dat_r__wpri2
Creating decoders for process `\csrf.$group_9'.
     1/1: $next\dat_r__spp
Creating decoders for process `\csrf.$group_8'.
     1/1: $next\dat_r__mpie
Creating decoders for process `\csrf.$group_7'.
     1/1: $next\dat_r__wpri1
Creating decoders for process `\csrf.$group_6'.
     1/1: $next\dat_r__spie
Creating decoders for process `\csrf.$group_5'.
     1/1: $next\dat_r__upie
Creating decoders for process `\csrf.$group_4'.
     1/1: $next\dat_r__mie
Creating decoders for process `\csrf.$group_3'.
     1/1: $next\dat_r__wpri0
Creating decoders for process `\csrf.$group_2'.
     1/1: $next\dat_r__sie
Creating decoders for process `\csrf.$group_1'.
     1/1: $next\dat_r__uie
Creating decoders for process `\csrf.$group_0'.
     1/1: $next\port__data$3
Creating decoders for process `\w.$group_2'.
     1/2: $verilog_initial_trigger
     2/2: $next\stall$6
Creating decoders for process `\w.$group_1'.
     1/1: $next\stall
Creating decoders for process `\w.$group_0'.
     1/1: $next\valid$1
Creating decoders for process `\m.$group_5'.
     1/1: $next\stall$5
Creating decoders for process `\m.$group_4'.
     1/2: $verilog_initial_trigger
     2/2: $next\kill$14
Creating decoders for process `\m.$group_3'.
     1/1: $next\kill$3
Creating decoders for process `\m.$group_2'.
     1/1: $next\valid$1
Creating decoders for process `\m.$group_1'.
     1/1: $next\stall
Creating decoders for process `\m.$group_0'.
     1/1: $next\valid$4
Creating decoders for process `\x.$group_5'.
     1/1: $next\stall$4
Creating decoders for process `\x.$group_4'.
     1/2: $verilog_initial_trigger
     2/2: $next\kill$14
Creating decoders for process `\x.$group_3'.
     1/1: $next\kill$3
Creating decoders for process `\x.$group_2'.
     1/1: $next\valid$1
Creating decoders for process `\x.$group_1'.
     1/1: $next\stall
Creating decoders for process `\x.$group_0'.
     1/1: $next\valid$5
Creating decoders for process `\d.$group_5'.
     1/1: $next\stall$7
Creating decoders for process `\d.$group_4'.
     1/1: $next\kill$16
Creating decoders for process `\d.$group_3'.
     1/1: $next\kill$3
Creating decoders for process `\d.$group_2'.
     1/1: $next\valid$1
Creating decoders for process `\d.$group_1'.
     1/1: $next\stall
Creating decoders for process `\d.$group_0'.
     1/1: $next\valid$4
Creating decoders for process `\f.$group_5'.
     1/1: $next\stall$5
Creating decoders for process `\f.$group_4'.
     1/1: $next\kill$17
Creating decoders for process `\f.$group_3'.
     1/1: $next\kill$3
Creating decoders for process `\f.$group_2'.
     1/1: $next\valid$1
Creating decoders for process `\f.$group_1'.
     1/1: $next\stall
Creating decoders for process `\f.$group_0'.
     1/1: $next\valid$8
Creating decoders for process `\a.$group_3'.
     1/1: $next\stall$2
Creating decoders for process `\a.$group_2'.
     1/1: $next\kill$8
Creating decoders for process `\a.$group_1'.
     1/1: $next\kill
Creating decoders for process `\a.$group_0'.
     1/1: $next\valid

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\minerva_clk' from process `\top.$group_0'.
No latch inferred for signal `\minerva.\predict_d_rs1_re' from process `\minerva.$group_187'.
No latch inferred for signal `\minerva.\predict_d_pc' from process `\minerva.$group_186'.
No latch inferred for signal `\minerva.\predict_d_offset' from process `\minerva.$group_185'.
No latch inferred for signal `\minerva.\predict_d_jump' from process `\minerva.$group_184'.
No latch inferred for signal `\minerva.\predict_d_branch' from process `\minerva.$group_183'.
No latch inferred for signal `\minerva.\d_src2' from process `\minerva.$group_182'.
No latch inferred for signal `\minerva.\d_src1' from process `\minerva.$group_181'.
No latch inferred for signal `\minerva.\gprf_w_data' from process `\minerva.$group_179'.
No latch inferred for signal `\minerva.\gprf_w_addr' from process `\minerva.$group_178'.
No latch inferred for signal `\minerva.\gprf_w_en' from process `\minerva.$group_177'.
No latch inferred for signal `\minerva.\csrf_port__data' from process `\minerva.$group_176'.
No latch inferred for signal `\minerva.\csrf_port__addr$30' from process `\minerva.$group_175'.
No latch inferred for signal `\minerva.\csrf_port__en$29' from process `\minerva.$group_174'.
No latch inferred for signal `\minerva.\x_csr_result' from process `\minerva.$group_173'.
No latch inferred for signal `\minerva.\w_result' from process `\minerva.$group_172'.
No latch inferred for signal `\minerva.\m_result' from process `\minerva.$group_171'.
No latch inferred for signal `\minerva.\x_result' from process `\minerva.$group_170'.
No latch inferred for signal `\minerva.\d_m_lock' from process `\minerva.$group_169'.
No latch inferred for signal `\minerva.\d_x_lock' from process `\minerva.$group_168'.
No latch inferred for signal `\minerva.\x_raw_csr' from process `\minerva.$group_167'.
No latch inferred for signal `\minerva.\w_raw_rs2' from process `\minerva.$group_166'.
No latch inferred for signal `\minerva.\m_raw_rs2' from process `\minerva.$group_165'.
No latch inferred for signal `\minerva.\x_raw_rs2' from process `\minerva.$group_164'.
No latch inferred for signal `\minerva.\w_raw_rs1' from process `\minerva.$group_163'.
No latch inferred for signal `\minerva.\m_raw_rs1' from process `\minerva.$group_162'.
No latch inferred for signal `\minerva.\x_raw_rs1' from process `\minerva.$group_161'.
No latch inferred for signal `\minerva.\loadstore_dbus__err' from process `\minerva.$group_160'.
No latch inferred for signal `\minerva.\dbus__bte' from process `\minerva.$group_159'.
No latch inferred for signal `\minerva.\dbus__cti' from process `\minerva.$group_158'.
No latch inferred for signal `\minerva.\dbus__we' from process `\minerva.$group_157'.
No latch inferred for signal `\minerva.\loadstore_dbus__ack' from process `\minerva.$group_156'.
No latch inferred for signal `\minerva.\dbus__stb' from process `\minerva.$group_155'.
No latch inferred for signal `\minerva.\m_dbus__cyc' from process `\minerva.$group_154'.
No latch inferred for signal `\minerva.\dbus__sel' from process `\minerva.$group_153'.
No latch inferred for signal `\minerva.\loadstore_dbus__dat_r' from process `\minerva.$group_152'.
No latch inferred for signal `\minerva.\dbus__dat_w' from process `\minerva.$group_151'.
No latch inferred for signal `\minerva.\dbus__adr' from process `\minerva.$group_150'.
No latch inferred for signal `\minerva.\loadstore_w_load_data' from process `\minerva.$group_149'.
No latch inferred for signal `\minerva.\loadstore_w_load_mask' from process `\minerva.$group_148'.
No latch inferred for signal `\minerva.\loadstore_w_address' from process `\minerva.$group_147'.
No latch inferred for signal `\minerva.\loadstore_x_valid' from process `\minerva.$group_146'.
No latch inferred for signal `\minerva.\loadstore_x_stall' from process `\minerva.$group_145'.
No latch inferred for signal `\minerva.\loadstore_x_mask' from process `\minerva.$group_144'.
No latch inferred for signal `\minerva.\loadstore_x_store_operand' from process `\minerva.$group_143'.
No latch inferred for signal `\minerva.\loadstore_x_store' from process `\minerva.$group_142'.
No latch inferred for signal `\minerva.\loadstore_x_load' from process `\minerva.$group_141'.
No latch inferred for signal `\minerva.\loadstore_x_address' from process `\minerva.$group_140'.
No latch inferred for signal `\minerva.\exception_x_ebreak' from process `\minerva.$group_139'.
No latch inferred for signal `\minerva.\exception_x_valid' from process `\minerva.$group_138'.
No latch inferred for signal `\minerva.\exception_x_stall' from process `\minerva.$group_137'.
No latch inferred for signal `\minerva.\exception_x_mret' from process `\minerva.$group_136'.
No latch inferred for signal `\minerva.\exception_x_illegal' from process `\minerva.$group_135'.
No latch inferred for signal `\minerva.\exception_x_bus_error' from process `\minerva.$group_134'.
No latch inferred for signal `\minerva.\exception_x_misaligned_fetch' from process `\minerva.$group_133'.
No latch inferred for signal `\minerva.\exception_x_ecall' from process `\minerva.$group_132'.
No latch inferred for signal `\minerva.\exception_x_pc' from process `\minerva.$group_131'.
No latch inferred for signal `\minerva.\exception_timer_interrupt' from process `\minerva.$group_130'.
No latch inferred for signal `\minerva.\exception_external_interrupt' from process `\minerva.$group_129'.
No latch inferred for signal `\minerva.\compare_carry' from process `\minerva.$group_128'.
No latch inferred for signal `\minerva.\compare_overflow' from process `\minerva.$group_127'.
No latch inferred for signal `\minerva.\compare_negative' from process `\minerva.$group_126'.
No latch inferred for signal `\minerva.\compare_zero' from process `\minerva.$group_125'.
No latch inferred for signal `\minerva.\compare_op' from process `\minerva.$group_124'.
No latch inferred for signal `\minerva.\shifter_x_stall' from process `\minerva.$group_123'.
No latch inferred for signal `\minerva.\shifter_x_src1' from process `\minerva.$group_122'.
No latch inferred for signal `\minerva.\shifter_x_shamt' from process `\minerva.$group_121'.
No latch inferred for signal `\minerva.\shifter_x_sext' from process `\minerva.$group_120'.
No latch inferred for signal `\minerva.\shifter_x_direction' from process `\minerva.$group_119'.
No latch inferred for signal `\minerva.\adder_src2' from process `\minerva.$group_118'.
No latch inferred for signal `\minerva.\adder_src1' from process `\minerva.$group_117'.
No latch inferred for signal `\minerva.\adder_sub' from process `\minerva.$group_116'.
No latch inferred for signal `\minerva.\logic_src2' from process `\minerva.$group_115'.
No latch inferred for signal `\minerva.\logic_src1' from process `\minerva.$group_114'.
No latch inferred for signal `\minerva.\logic_op' from process `\minerva.$group_113'.
No latch inferred for signal `\minerva.\csrf_port__en' from process `\minerva.$group_112'.
No latch inferred for signal `\minerva.\gprf_r_addr$25' from process `\minerva.$group_110'.
No latch inferred for signal `\minerva.\gprf_r_addr' from process `\minerva.$group_109'.
No latch inferred for signal `\minerva.\decoder_instruction' from process `\minerva.$group_108'.
No latch inferred for signal `\minerva.\fetch_m_branch_target' from process `\minerva.$group_107'.
No latch inferred for signal `\minerva.\fetch_m_valid' from process `\minerva.$group_106'.
No latch inferred for signal `\minerva.\a_m_branch_taken' from process `\minerva.$group_105'.
No latch inferred for signal `\minerva.\fetch_m_branch_predict_taken' from process `\minerva.$group_104'.
No latch inferred for signal `\minerva.\fetch_x_pc' from process `\minerva.$group_103'.
No latch inferred for signal `\minerva.\fetch_d_valid' from process `\minerva.$group_102'.
No latch inferred for signal `\minerva.\fetch_d_branch_target' from process `\minerva.$group_101'.
No latch inferred for signal `\minerva.\fetch_d_branch_predict_taken' from process `\minerva.$group_100'.
No latch inferred for signal `\minerva.\fetch_f_stall' from process `\minerva.$group_99'.
No latch inferred for signal `\minerva.\fetch_f_pc' from process `\minerva.$group_98'.
No latch inferred for signal `\minerva.\fetch_a_stall' from process `\minerva.$group_97'.
No latch inferred for signal `\minerva.\fetch_ibus__err' from process `\minerva.$group_96'.
No latch inferred for signal `\minerva.\ibus__bte' from process `\minerva.$group_95'.
No latch inferred for signal `\minerva.\ibus__cti' from process `\minerva.$group_94'.
No latch inferred for signal `\minerva.\ibus__we' from process `\minerva.$group_93'.
No latch inferred for signal `\minerva.\fetch_ibus__ack' from process `\minerva.$group_92'.
No latch inferred for signal `\minerva.\ibus__stb' from process `\minerva.$group_91'.
No latch inferred for signal `\minerva.\m_ibus__cyc' from process `\minerva.$group_90'.
No latch inferred for signal `\minerva.\ibus__sel' from process `\minerva.$group_89'.
No latch inferred for signal `\minerva.\fetch_ibus__dat_r' from process `\minerva.$group_88'.
No latch inferred for signal `\minerva.\ibus__dat_w' from process `\minerva.$group_87'.
No latch inferred for signal `\minerva.\ibus__adr' from process `\minerva.$group_86'.
No latch inferred for signal `\minerva.\a_valid$1' from process `\minerva.$group_85'.
No latch inferred for signal `\minerva.\payload__exception$124' from process `\minerva.$group_84'.
No latch inferred for signal `\minerva.\payload__multiply$122' from process `\minerva.$group_83'.
No latch inferred for signal `\minerva.\payload__load_data' from process `\minerva.$group_82'.
No latch inferred for signal `\minerva.\payload__load_mask$119' from process `\minerva.$group_81'.
No latch inferred for signal `\minerva.\payload__load$117' from process `\minerva.$group_80'.
No latch inferred for signal `\minerva.\payload__result$115' from process `\minerva.$group_79'.
No latch inferred for signal `\minerva.\payload__rd_we$113' from process `\minerva.$group_78'.
No latch inferred for signal `\minerva.\payload__rd$111' from process `\minerva.$group_77'.
No latch inferred for signal `\minerva.\payload__pc$109' from process `\minerva.$group_76'.
No latch inferred for signal `\minerva.\w_kill' from process `\minerva.$group_75'.
No latch inferred for signal `\minerva.\m_stall$19' from process `\minerva.$group_74'.
No latch inferred for signal `\minerva.\w_valid' from process `\minerva.$group_73'.
No latch inferred for signal `\minerva.\payload__exception' from process `\minerva.$group_72'.
No latch inferred for signal `\minerva.\payload__mret$106' from process `\minerva.$group_71'.
No latch inferred for signal `\minerva.\a_payload__branch_predict_taken' from process `\minerva.$group_70'.
No latch inferred for signal `\minerva.\payload__branch_taken' from process `\minerva.$group_69'.
No latch inferred for signal `\minerva.\payload__branch_target$102' from process `\minerva.$group_68'.
No latch inferred for signal `\minerva.\payload__condition_met' from process `\minerva.$group_67'.
No latch inferred for signal `\minerva.\payload__divide$99' from process `\minerva.$group_66'.
No latch inferred for signal `\minerva.\payload__multiply$97' from process `\minerva.$group_65'.
No latch inferred for signal `\minerva.\payload__compare$95' from process `\minerva.$group_64'.
No latch inferred for signal `\minerva.\payload__store_data' from process `\minerva.$group_63'.
No latch inferred for signal `\minerva.\payload__dbus_sel' from process `\minerva.$group_62'.
No latch inferred for signal `\minerva.\payload__store$91' from process `\minerva.$group_61'.
No latch inferred for signal `\minerva.\payload__load_mask' from process `\minerva.$group_60'.
No latch inferred for signal `\minerva.\payload__load$88' from process `\minerva.$group_59'.
No latch inferred for signal `\minerva.\payload__shift$86' from process `\minerva.$group_58'.
No latch inferred for signal `\minerva.\payload__result' from process `\minerva.$group_57'.
No latch inferred for signal `\minerva.\payload__bypass_m$83' from process `\minerva.$group_56'.
No latch inferred for signal `\minerva.\payload__rd_we$81' from process `\minerva.$group_55'.
No latch inferred for signal `\minerva.\payload__rd$79' from process `\minerva.$group_54'.
No latch inferred for signal `\minerva.\payload__pc$77' from process `\minerva.$group_53'.
No latch inferred for signal `\minerva.\m_kill' from process `\minerva.$group_52'.
No latch inferred for signal `\minerva.\x_stall$15' from process `\minerva.$group_51'.
No latch inferred for signal `\minerva.\m_valid' from process `\minerva.$group_50'.
No latch inferred for signal `\minerva.\payload__illegal' from process `\minerva.$group_49'.
No latch inferred for signal `\minerva.\payload__mret' from process `\minerva.$group_48'.
No latch inferred for signal `\minerva.\payload__ebreak' from process `\minerva.$group_47'.
No latch inferred for signal `\minerva.\payload__ecall' from process `\minerva.$group_46'.
No latch inferred for signal `\minerva.\payload__bus_error$71' from process `\minerva.$group_45'.
No latch inferred for signal `\minerva.\payload__csr_we' from process `\minerva.$group_44'.
No latch inferred for signal `\minerva.\payload__csr_adr' from process `\minerva.$group_43'.
No latch inferred for signal `\minerva.\payload__csr' from process `\minerva.$group_42'.
No latch inferred for signal `\minerva.\payload__fence_i' from process `\minerva.$group_41'.
No latch inferred for signal `\minerva.\f_payload__branch_predict_taken' from process `\minerva.$group_40'.
No latch inferred for signal `\minerva.\payload__branch_target' from process `\minerva.$group_39'.
No latch inferred for signal `\minerva.\payload__branch' from process `\minerva.$group_38'.
No latch inferred for signal `\minerva.\payload__compare' from process `\minerva.$group_37'.
No latch inferred for signal `\minerva.\payload__jump' from process `\minerva.$group_36'.
No latch inferred for signal `\minerva.\payload__sext' from process `\minerva.$group_35'.
No latch inferred for signal `\minerva.\payload__direction' from process `\minerva.$group_34'.
No latch inferred for signal `\minerva.\payload__shift' from process `\minerva.$group_33'.
No latch inferred for signal `\minerva.\payload__divide' from process `\minerva.$group_32'.
No latch inferred for signal `\minerva.\payload__multiply' from process `\minerva.$group_31'.
No latch inferred for signal `\minerva.\payload__logic' from process `\minerva.$group_30'.
No latch inferred for signal `\minerva.\payload__adder_sub' from process `\minerva.$group_29'.
No latch inferred for signal `\minerva.\payload__store' from process `\minerva.$group_28'.
No latch inferred for signal `\minerva.\payload__load' from process `\minerva.$group_27'.
No latch inferred for signal `\minerva.\payload__funct3' from process `\minerva.$group_26'.
No latch inferred for signal `\minerva.\payload__bypass_m' from process `\minerva.$group_25'.
No latch inferred for signal `\minerva.\payload__bypass_x' from process `\minerva.$group_24'.
No latch inferred for signal `\minerva.\payload__immediate' from process `\minerva.$group_23'.
No latch inferred for signal `\minerva.\payload__src2' from process `\minerva.$group_22'.
No latch inferred for signal `\minerva.\payload__src1' from process `\minerva.$group_21'.
No latch inferred for signal `\minerva.\payload__rs1_re' from process `\minerva.$group_20'.
No latch inferred for signal `\minerva.\payload__rd_we' from process `\minerva.$group_19'.
No latch inferred for signal `\minerva.\payload__rs1' from process `\minerva.$group_18'.
No latch inferred for signal `\minerva.\payload__rd' from process `\minerva.$group_17'.
No latch inferred for signal `\minerva.\payload__misaligned_fetch$42' from process `\minerva.$group_16'.
No latch inferred for signal `\minerva.\payload__pc$40' from process `\minerva.$group_15'.
No latch inferred for signal `\minerva.\x_kill' from process `\minerva.$group_14'.
No latch inferred for signal `\minerva.\d_stall$10' from process `\minerva.$group_13'.
No latch inferred for signal `\minerva.\x_valid' from process `\minerva.$group_12'.
No latch inferred for signal `\minerva.\payload__bus_error' from process `\minerva.$group_11'.
No latch inferred for signal `\minerva.\payload__instruction' from process `\minerva.$group_10'.
No latch inferred for signal `\minerva.\payload__misaligned_fetch$36' from process `\minerva.$group_9'.
No latch inferred for signal `\minerva.\payload__pc$34' from process `\minerva.$group_8'.
No latch inferred for signal `\minerva.\d_kill' from process `\minerva.$group_7'.
No latch inferred for signal `\minerva.\f_stall$5' from process `\minerva.$group_6'.
No latch inferred for signal `\minerva.\d_valid' from process `\minerva.$group_5'.
No latch inferred for signal `\minerva.\payload__misaligned_fetch' from process `\minerva.$group_4'.
No latch inferred for signal `\minerva.\payload__pc' from process `\minerva.$group_3'.
No latch inferred for signal `\minerva.\f_kill' from process `\minerva.$group_2'.
No latch inferred for signal `\minerva.\a_stall' from process `\minerva.$group_1'.
No latch inferred for signal `\minerva.\f_valid' from process `\minerva.$group_0'.
No latch inferred for signal `\shifter.\m_result' from process `\shifter.$group_4'.
No latch inferred for signal `\shifter.\x_filler' from process `\shifter.$group_1'.
No latch inferred for signal `\shifter.\x_operand' from process `\shifter.$group_0'.
No latch inferred for signal `\predict.\d_branch_target' from process `\predict.$group_1'.
No latch inferred for signal `\predict.\d_branch_taken' from process `\predict.$group_0'.
No latch inferred for signal `\logic.\result' from process `\logic.$group_0'.
No latch inferred for signal `\anonymous$1.\w_load_result' from process `\anonymous$1.$group_2'.
No latch inferred for signal `\anonymous$1.\x_store_data' from process `\anonymous$1.$group_1'.
No latch inferred for signal `\anonymous$1.\x_dbus_sel' from process `\anonymous$1.$group_0'.
No latch inferred for signal `\fetch.\f_bus_error' from process `\fetch.$group_1'.
No latch inferred for signal `\fetch.\f_instruction' from process `\fetch.$group_0'.
No latch inferred for signal `\anonymous.\a_misaligned_fetch' from process `\anonymous.$group_1'.
No latch inferred for signal `\anonymous.\a_pc' from process `\anonymous.$group_0'.
No latch inferred for signal `\exception.\x_raise' from process `\exception.$group_60'.
No latch inferred for signal `\exception.\interrupt_pe_i' from process `\exception.$group_59'.
No latch inferred for signal `\exception.\trap_pe_i' from process `\exception.$group_58'.
No latch inferred for signal `\interrupt_pe.\n' from process `\interrupt_pe.$group_1'.
No latch inferred for signal `\interrupt_pe.\o' from process `\interrupt_pe.$group_0'.
No latch inferred for signal `\trap_pe.\n' from process `\trap_pe.$group_1'.
No latch inferred for signal `\trap_pe.\o' from process `\trap_pe.$group_0'.
No latch inferred for signal `\decoder.\illegal' from process `\decoder.$group_40'.
No latch inferred for signal `\decoder.\bypass_m' from process `\decoder.$group_39'.
No latch inferred for signal `\decoder.\bypass_x' from process `\decoder.$group_38'.
No latch inferred for signal `\decoder.\mret' from process `\decoder.$group_37'.
No latch inferred for signal `\decoder.\ebreak' from process `\decoder.$group_36'.
No latch inferred for signal `\decoder.\ecall' from process `\decoder.$group_35'.
No latch inferred for signal `\decoder.\privileged' from process `\decoder.$group_34'.
No latch inferred for signal `\decoder.\csr_we' from process `\decoder.$group_33'.
No latch inferred for signal `\decoder.\csr' from process `\decoder.$group_32'.
No latch inferred for signal `\decoder.\fence_i' from process `\decoder.$group_31'.
No latch inferred for signal `\decoder.\store' from process `\decoder.$group_30'.
No latch inferred for signal `\decoder.\load' from process `\decoder.$group_29'.
No latch inferred for signal `\decoder.\jump' from process `\decoder.$group_28'.
No latch inferred for signal `\decoder.\auipc' from process `\decoder.$group_27'.
No latch inferred for signal `\decoder.\lui' from process `\decoder.$group_26'.
No latch inferred for signal `\decoder.\sext' from process `\decoder.$group_25'.
No latch inferred for signal `\decoder.\direction' from process `\decoder.$group_24'.
No latch inferred for signal `\decoder.\shift' from process `\decoder.$group_23'.
No latch inferred for signal `\decoder.\logic' from process `\decoder.$group_22'.
No latch inferred for signal `\decoder.\adder_sub' from process `\decoder.$group_21'.
No latch inferred for signal `\decoder.\adder' from process `\decoder.$group_20'.
No latch inferred for signal `\decoder.\branch' from process `\decoder.$group_19'.
No latch inferred for signal `\decoder.\compare' from process `\decoder.$group_18'.
No latch inferred for signal `\decoder.\funct3' from process `\decoder.$group_17'.
No latch inferred for signal `\decoder.\rs2_re' from process `\decoder.$group_16'.
No latch inferred for signal `\decoder.\rs1_re' from process `\decoder.$group_15'.
No latch inferred for signal `\decoder.\rd_we' from process `\decoder.$group_14'.
No latch inferred for signal `\decoder.\rs2' from process `\decoder.$group_13'.
No latch inferred for signal `\decoder.\rs1' from process `\decoder.$group_12'.
No latch inferred for signal `\decoder.\rd' from process `\decoder.$group_11'.
No latch inferred for signal `\decoder.\immediate' from process `\decoder.$group_10'.
No latch inferred for signal `\decoder.\fmt' from process `\decoder.$group_9'.
No latch inferred for signal `\decoder.\jimm20' from process `\decoder.$group_8'.
No latch inferred for signal `\decoder.\uimm20' from process `\decoder.$group_7'.
No latch inferred for signal `\decoder.\bimm12' from process `\decoder.$group_6'.
No latch inferred for signal `\decoder.\simm12' from process `\decoder.$group_5'.
No latch inferred for signal `\decoder.\iimm12' from process `\decoder.$group_4'.
No latch inferred for signal `\decoder.\funct12' from process `\decoder.$group_3'.
No latch inferred for signal `\decoder.\funct7' from process `\decoder.$group_2'.
No latch inferred for signal `\decoder.\funct3$1' from process `\decoder.$group_1'.
No latch inferred for signal `\decoder.\opcode' from process `\decoder.$group_0'.
No latch inferred for signal `\compare.\condition_met' from process `\compare.$group_0'.
No latch inferred for signal `\adder.\overflow' from process `\adder.$group_2'.
No latch inferred for signal `\adder.\result' from process `\adder.$group_0'.
No latch inferred for signal `\adder.\carry' from process `\adder.$group_0'.
No latch inferred for signal `\csrf.\irq_pending_we' from process `\csrf.$group_194'.
No latch inferred for signal `\csrf.\irq_pending_w__value' from process `\csrf.$group_193'.
No latch inferred for signal `\csrf.\dat_w__value$19' from process `\csrf.$group_192'.
No latch inferred for signal `\csrf.\irq_mask_we' from process `\csrf.$group_191'.
No latch inferred for signal `\csrf.\irq_mask_w__value' from process `\csrf.$group_190'.
No latch inferred for signal `\csrf.\dat_w__value$18' from process `\csrf.$group_189'.
No latch inferred for signal `\csrf.\mip_we' from process `\csrf.$group_188'.
No latch inferred for signal `\csrf.\mip_w__wiri3' from process `\csrf.$group_187'.
No latch inferred for signal `\csrf.\mip_w__meip' from process `\csrf.$group_186'.
No latch inferred for signal `\csrf.\mip_w__wiri2' from process `\csrf.$group_185'.
No latch inferred for signal `\csrf.\mip_w__seip' from process `\csrf.$group_184'.
No latch inferred for signal `\csrf.\mip_w__ueip' from process `\csrf.$group_183'.
No latch inferred for signal `\csrf.\mip_w__mtip' from process `\csrf.$group_182'.
No latch inferred for signal `\csrf.\mip_w__wiri1' from process `\csrf.$group_181'.
No latch inferred for signal `\csrf.\mip_w__stip' from process `\csrf.$group_180'.
No latch inferred for signal `\csrf.\mip_w__utip' from process `\csrf.$group_179'.
No latch inferred for signal `\csrf.\mip_w__msip' from process `\csrf.$group_178'.
No latch inferred for signal `\csrf.\mip_w__wiri0' from process `\csrf.$group_177'.
No latch inferred for signal `\csrf.\mip_w__ssip' from process `\csrf.$group_176'.
No latch inferred for signal `\csrf.\mip_w__usip' from process `\csrf.$group_175'.
No latch inferred for signal `\csrf.\dat_w__usip' from process `\csrf.$group_162'.
No latch inferred for signal `\csrf.\dat_w__ssip' from process `\csrf.$group_162'.
No latch inferred for signal `\csrf.\dat_w__wiri0$17' from process `\csrf.$group_162'.
No latch inferred for signal `\csrf.\dat_w__msip' from process `\csrf.$group_162'.
No latch inferred for signal `\csrf.\dat_w__utip' from process `\csrf.$group_162'.
No latch inferred for signal `\csrf.\dat_w__stip' from process `\csrf.$group_162'.
No latch inferred for signal `\csrf.\dat_w__wiri1' from process `\csrf.$group_162'.
No latch inferred for signal `\csrf.\dat_w__mtip' from process `\csrf.$group_162'.
No latch inferred for signal `\csrf.\dat_w__ueip' from process `\csrf.$group_162'.
No latch inferred for signal `\csrf.\dat_w__seip' from process `\csrf.$group_162'.
No latch inferred for signal `\csrf.\dat_w__wiri2' from process `\csrf.$group_162'.
No latch inferred for signal `\csrf.\dat_w__meip' from process `\csrf.$group_162'.
No latch inferred for signal `\csrf.\dat_w__wiri3' from process `\csrf.$group_162'.
No latch inferred for signal `\csrf.\mcause_we' from process `\csrf.$group_161'.
No latch inferred for signal `\csrf.\mcause_w__interrupt' from process `\csrf.$group_160'.
No latch inferred for signal `\csrf.\mcause_w__ecode' from process `\csrf.$group_159'.
No latch inferred for signal `\csrf.\dat_w__ecode' from process `\csrf.$group_157'.
No latch inferred for signal `\csrf.\dat_w__interrupt' from process `\csrf.$group_157'.
No latch inferred for signal `\csrf.\mepc_we' from process `\csrf.$group_156'.
No latch inferred for signal `\csrf.\mepc_w__value' from process `\csrf.$group_155'.
No latch inferred for signal `\csrf.\dat_w__value$16' from process `\csrf.$group_154'.
No latch inferred for signal `\csrf.\mscratch_we' from process `\csrf.$group_153'.
No latch inferred for signal `\csrf.\mscratch_w__value' from process `\csrf.$group_152'.
No latch inferred for signal `\csrf.\dat_w__value' from process `\csrf.$group_151'.
No latch inferred for signal `\csrf.\mtvec_we' from process `\csrf.$group_150'.
No latch inferred for signal `\csrf.\mtvec_w__base' from process `\csrf.$group_149'.
No latch inferred for signal `\csrf.\mtvec_w__mode' from process `\csrf.$group_148'.
No latch inferred for signal `\csrf.\dat_w__mode' from process `\csrf.$group_146'.
No latch inferred for signal `\csrf.\dat_w__base' from process `\csrf.$group_146'.
No latch inferred for signal `\csrf.\mie_we' from process `\csrf.$group_145'.
No latch inferred for signal `\csrf.\mie_w__wpri3' from process `\csrf.$group_144'.
No latch inferred for signal `\csrf.\mie_w__meie' from process `\csrf.$group_143'.
No latch inferred for signal `\csrf.\mie_w__wpri2' from process `\csrf.$group_142'.
No latch inferred for signal `\csrf.\mie_w__seie' from process `\csrf.$group_141'.
No latch inferred for signal `\csrf.\mie_w__ueie' from process `\csrf.$group_140'.
No latch inferred for signal `\csrf.\mie_w__mtie' from process `\csrf.$group_139'.
No latch inferred for signal `\csrf.\mie_w__wpri1' from process `\csrf.$group_138'.
No latch inferred for signal `\csrf.\mie_w__stie' from process `\csrf.$group_137'.
No latch inferred for signal `\csrf.\mie_w__utie' from process `\csrf.$group_136'.
No latch inferred for signal `\csrf.\mie_w__msie' from process `\csrf.$group_135'.
No latch inferred for signal `\csrf.\mie_w__wpri0' from process `\csrf.$group_134'.
No latch inferred for signal `\csrf.\mie_w__ssie' from process `\csrf.$group_133'.
No latch inferred for signal `\csrf.\mie_w__usie' from process `\csrf.$group_132'.
No latch inferred for signal `\csrf.\dat_w__usie' from process `\csrf.$group_119'.
No latch inferred for signal `\csrf.\dat_w__ssie' from process `\csrf.$group_119'.
No latch inferred for signal `\csrf.\dat_w__wpri0$12' from process `\csrf.$group_119'.
No latch inferred for signal `\csrf.\dat_w__msie' from process `\csrf.$group_119'.
No latch inferred for signal `\csrf.\dat_w__utie' from process `\csrf.$group_119'.
No latch inferred for signal `\csrf.\dat_w__stie' from process `\csrf.$group_119'.
No latch inferred for signal `\csrf.\dat_w__wpri1$13' from process `\csrf.$group_119'.
No latch inferred for signal `\csrf.\dat_w__mtie' from process `\csrf.$group_119'.
No latch inferred for signal `\csrf.\dat_w__ueie' from process `\csrf.$group_119'.
No latch inferred for signal `\csrf.\dat_w__seie' from process `\csrf.$group_119'.
No latch inferred for signal `\csrf.\dat_w__wpri2$14' from process `\csrf.$group_119'.
No latch inferred for signal `\csrf.\dat_w__meie' from process `\csrf.$group_119'.
No latch inferred for signal `\csrf.\dat_w__wpri3$15' from process `\csrf.$group_119'.
No latch inferred for signal `\csrf.\misa_we' from process `\csrf.$group_118'.
No latch inferred for signal `\csrf.\misa_w__mxl' from process `\csrf.$group_117'.
No latch inferred for signal `\csrf.\misa_w__wiri0' from process `\csrf.$group_116'.
No latch inferred for signal `\csrf.\misa_w__extensions' from process `\csrf.$group_115'.
No latch inferred for signal `\csrf.\dat_w__extensions' from process `\csrf.$group_112'.
No latch inferred for signal `\csrf.\dat_w__wiri0' from process `\csrf.$group_112'.
No latch inferred for signal `\csrf.\dat_w__mxl' from process `\csrf.$group_112'.
No latch inferred for signal `\csrf.\mstatus_we' from process `\csrf.$group_111'.
No latch inferred for signal `\csrf.\mstatus_w__sd' from process `\csrf.$group_110'.
No latch inferred for signal `\csrf.\mstatus_w__wpri3' from process `\csrf.$group_109'.
No latch inferred for signal `\csrf.\mstatus_w__tsr' from process `\csrf.$group_108'.
No latch inferred for signal `\csrf.\mstatus_w__tw' from process `\csrf.$group_107'.
No latch inferred for signal `\csrf.\mstatus_w__tvm' from process `\csrf.$group_106'.
No latch inferred for signal `\csrf.\mstatus_w__mxr' from process `\csrf.$group_105'.
No latch inferred for signal `\csrf.\mstatus_w__sum' from process `\csrf.$group_104'.
No latch inferred for signal `\csrf.\mstatus_w__mprv' from process `\csrf.$group_103'.
No latch inferred for signal `\csrf.\mstatus_w__xs' from process `\csrf.$group_102'.
No latch inferred for signal `\csrf.\mstatus_w__fs' from process `\csrf.$group_101'.
No latch inferred for signal `\csrf.\mstatus_w__mpp' from process `\csrf.$group_100'.
No latch inferred for signal `\csrf.\mstatus_w__wpri2' from process `\csrf.$group_99'.
No latch inferred for signal `\csrf.\mstatus_w__spp' from process `\csrf.$group_98'.
No latch inferred for signal `\csrf.\mstatus_w__mpie' from process `\csrf.$group_97'.
No latch inferred for signal `\csrf.\mstatus_w__wpri1' from process `\csrf.$group_96'.
No latch inferred for signal `\csrf.\mstatus_w__spie' from process `\csrf.$group_95'.
No latch inferred for signal `\csrf.\mstatus_w__upie' from process `\csrf.$group_94'.
No latch inferred for signal `\csrf.\mstatus_w__mie' from process `\csrf.$group_93'.
No latch inferred for signal `\csrf.\mstatus_w__wpri0' from process `\csrf.$group_92'.
No latch inferred for signal `\csrf.\mstatus_w__sie' from process `\csrf.$group_91'.
No latch inferred for signal `\csrf.\mstatus_w__uie' from process `\csrf.$group_90'.
No latch inferred for signal `\csrf.\dat_w__uie' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__sie' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__wpri0' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__mie' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__upie' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__spie' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__wpri1' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__mpie' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__spp' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__wpri2' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__mpp' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__fs' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__xs' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__mprv' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__sum' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__mxr' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__tvm' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__tw' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__tsr' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__wpri3' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\dat_w__sd' from process `\csrf.$group_69'.
No latch inferred for signal `\csrf.\irq_pending_re' from process `\csrf.$group_68'.
No latch inferred for signal `\csrf.\dat_r__value$11' from process `\csrf.$group_67'.
No latch inferred for signal `\csrf.\irq_mask_re' from process `\csrf.$group_66'.
No latch inferred for signal `\csrf.\dat_r__value$10' from process `\csrf.$group_65'.
No latch inferred for signal `\csrf.\mip_re' from process `\csrf.$group_64'.
No latch inferred for signal `\csrf.\dat_r__wiri3' from process `\csrf.$group_63'.
No latch inferred for signal `\csrf.\dat_r__meip' from process `\csrf.$group_62'.
No latch inferred for signal `\csrf.\dat_r__wiri2' from process `\csrf.$group_61'.
No latch inferred for signal `\csrf.\dat_r__seip' from process `\csrf.$group_60'.
No latch inferred for signal `\csrf.\dat_r__ueip' from process `\csrf.$group_59'.
No latch inferred for signal `\csrf.\dat_r__mtip' from process `\csrf.$group_58'.
No latch inferred for signal `\csrf.\dat_r__wiri1' from process `\csrf.$group_57'.
No latch inferred for signal `\csrf.\dat_r__stip' from process `\csrf.$group_56'.
No latch inferred for signal `\csrf.\dat_r__utip' from process `\csrf.$group_55'.
No latch inferred for signal `\csrf.\dat_r__msip' from process `\csrf.$group_54'.
No latch inferred for signal `\csrf.\dat_r__wiri0$9' from process `\csrf.$group_53'.
No latch inferred for signal `\csrf.\dat_r__ssip' from process `\csrf.$group_52'.
No latch inferred for signal `\csrf.\dat_r__usip' from process `\csrf.$group_51'.
No latch inferred for signal `\csrf.\mcause_re' from process `\csrf.$group_50'.
No latch inferred for signal `\csrf.\dat_r__interrupt' from process `\csrf.$group_49'.
No latch inferred for signal `\csrf.\dat_r__ecode' from process `\csrf.$group_48'.
No latch inferred for signal `\csrf.\mepc_re' from process `\csrf.$group_47'.
No latch inferred for signal `\csrf.\dat_r__value$8' from process `\csrf.$group_46'.
No latch inferred for signal `\csrf.\mscratch_re' from process `\csrf.$group_45'.
No latch inferred for signal `\csrf.\dat_r__value' from process `\csrf.$group_44'.
No latch inferred for signal `\csrf.\mtvec_re' from process `\csrf.$group_43'.
No latch inferred for signal `\csrf.\dat_r__base' from process `\csrf.$group_42'.
No latch inferred for signal `\csrf.\dat_r__mode' from process `\csrf.$group_41'.
No latch inferred for signal `\csrf.\mie_re' from process `\csrf.$group_40'.
No latch inferred for signal `\csrf.\dat_r__wpri3$7' from process `\csrf.$group_39'.
No latch inferred for signal `\csrf.\dat_r__meie' from process `\csrf.$group_38'.
No latch inferred for signal `\csrf.\dat_r__wpri2$6' from process `\csrf.$group_37'.
No latch inferred for signal `\csrf.\dat_r__seie' from process `\csrf.$group_36'.
No latch inferred for signal `\csrf.\dat_r__ueie' from process `\csrf.$group_35'.
No latch inferred for signal `\csrf.\dat_r__mtie' from process `\csrf.$group_34'.
No latch inferred for signal `\csrf.\dat_r__wpri1$5' from process `\csrf.$group_33'.
No latch inferred for signal `\csrf.\dat_r__stie' from process `\csrf.$group_32'.
No latch inferred for signal `\csrf.\dat_r__utie' from process `\csrf.$group_31'.
No latch inferred for signal `\csrf.\dat_r__msie' from process `\csrf.$group_30'.
No latch inferred for signal `\csrf.\dat_r__wpri0$4' from process `\csrf.$group_29'.
No latch inferred for signal `\csrf.\dat_r__ssie' from process `\csrf.$group_28'.
No latch inferred for signal `\csrf.\dat_r__usie' from process `\csrf.$group_27'.
No latch inferred for signal `\csrf.\misa_re' from process `\csrf.$group_26'.
No latch inferred for signal `\csrf.\dat_r__mxl' from process `\csrf.$group_25'.
No latch inferred for signal `\csrf.\dat_r__wiri0' from process `\csrf.$group_24'.
No latch inferred for signal `\csrf.\dat_r__extensions' from process `\csrf.$group_23'.
No latch inferred for signal `\csrf.\mstatus_re' from process `\csrf.$group_22'.
No latch inferred for signal `\csrf.\dat_r__sd' from process `\csrf.$group_21'.
No latch inferred for signal `\csrf.\dat_r__wpri3' from process `\csrf.$group_20'.
No latch inferred for signal `\csrf.\dat_r__tsr' from process `\csrf.$group_19'.
No latch inferred for signal `\csrf.\dat_r__tw' from process `\csrf.$group_18'.
No latch inferred for signal `\csrf.\dat_r__tvm' from process `\csrf.$group_17'.
No latch inferred for signal `\csrf.\dat_r__mxr' from process `\csrf.$group_16'.
No latch inferred for signal `\csrf.\dat_r__sum' from process `\csrf.$group_15'.
No latch inferred for signal `\csrf.\dat_r__mprv' from process `\csrf.$group_14'.
No latch inferred for signal `\csrf.\dat_r__xs' from process `\csrf.$group_13'.
No latch inferred for signal `\csrf.\dat_r__fs' from process `\csrf.$group_12'.
No latch inferred for signal `\csrf.\dat_r__mpp' from process `\csrf.$group_11'.
No latch inferred for signal `\csrf.\dat_r__wpri2' from process `\csrf.$group_10'.
No latch inferred for signal `\csrf.\dat_r__spp' from process `\csrf.$group_9'.
No latch inferred for signal `\csrf.\dat_r__mpie' from process `\csrf.$group_8'.
No latch inferred for signal `\csrf.\dat_r__wpri1' from process `\csrf.$group_7'.
No latch inferred for signal `\csrf.\dat_r__spie' from process `\csrf.$group_6'.
No latch inferred for signal `\csrf.\dat_r__upie' from process `\csrf.$group_5'.
No latch inferred for signal `\csrf.\dat_r__mie' from process `\csrf.$group_4'.
No latch inferred for signal `\csrf.\dat_r__wpri0' from process `\csrf.$group_3'.
No latch inferred for signal `\csrf.\dat_r__sie' from process `\csrf.$group_2'.
No latch inferred for signal `\csrf.\dat_r__uie' from process `\csrf.$group_1'.
No latch inferred for signal `\csrf.\port__data$3' from process `\csrf.$group_0'.
No latch inferred for signal `\w.\stall$6' from process `\w.$group_2'.
No latch inferred for signal `\w.\stall' from process `\w.$group_1'.
No latch inferred for signal `\w.\valid$1' from process `\w.$group_0'.
No latch inferred for signal `\m.\stall$5' from process `\m.$group_5'.
No latch inferred for signal `\m.\kill$14' from process `\m.$group_4'.
No latch inferred for signal `\m.\kill$3' from process `\m.$group_3'.
No latch inferred for signal `\m.\stall' from process `\m.$group_1'.
No latch inferred for signal `\m.\valid$4' from process `\m.$group_0'.
No latch inferred for signal `\x.\stall$4' from process `\x.$group_5'.
No latch inferred for signal `\x.\kill$14' from process `\x.$group_4'.
No latch inferred for signal `\x.\kill$3' from process `\x.$group_3'.
No latch inferred for signal `\x.\stall' from process `\x.$group_1'.
No latch inferred for signal `\x.\valid$5' from process `\x.$group_0'.
No latch inferred for signal `\d.\stall$7' from process `\d.$group_5'.
No latch inferred for signal `\d.\kill$16' from process `\d.$group_4'.
No latch inferred for signal `\d.\kill$3' from process `\d.$group_3'.
No latch inferred for signal `\d.\stall' from process `\d.$group_1'.
No latch inferred for signal `\d.\valid$4' from process `\d.$group_0'.
No latch inferred for signal `\f.\stall$5' from process `\f.$group_5'.
No latch inferred for signal `\f.\kill$17' from process `\f.$group_4'.
No latch inferred for signal `\f.\kill$3' from process `\f.$group_3'.
No latch inferred for signal `\f.\stall' from process `\f.$group_1'.
No latch inferred for signal `\f.\valid$8' from process `\f.$group_0'.
No latch inferred for signal `\a.\stall$2' from process `\a.$group_3'.
No latch inferred for signal `\a.\kill$8' from process `\a.$group_2'.
No latch inferred for signal `\a.\kill' from process `\a.$group_1'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\minerva.\payload__exception$125' using process `\minerva.$group_253'.
  created $dff cell `$procdff$1305' with positive edge clock.
Creating register for signal `\minerva.\payload__multiply$123' using process `\minerva.$group_252'.
  created $dff cell `$procdff$1306' with positive edge clock.
Creating register for signal `\minerva.\payload__result$116' using process `\minerva.$group_251'.
  created $dff cell `$procdff$1307' with positive edge clock.
Creating register for signal `\minerva.\payload__rd_we$114' using process `\minerva.$group_250'.
  created $dff cell `$procdff$1308' with positive edge clock.
Creating register for signal `\minerva.\payload__load_data$121' using process `\minerva.$group_249'.
  created $dff cell `$procdff$1309' with positive edge clock.
Creating register for signal `\minerva.\payload__load_mask$120' using process `\minerva.$group_248'.
  created $dff cell `$procdff$1310' with positive edge clock.
Creating register for signal `\minerva.\payload__load$118' using process `\minerva.$group_247'.
  created $dff cell `$procdff$1311' with positive edge clock.
Creating register for signal `\minerva.\payload__rd$112' using process `\minerva.$group_246'.
  created $dff cell `$procdff$1312' with positive edge clock.
Creating register for signal `\minerva.\payload__pc$110' using process `\minerva.$group_245'.
  created $dff cell `$procdff$1313' with positive edge clock.
Creating register for signal `\minerva.\payload__result$85' using process `\minerva.$group_244'.
  created $dff cell `$procdff$1314' with positive edge clock.
Creating register for signal `\minerva.\payload__branch_predict_taken$105' using process `\minerva.$group_243'.
  created $dff cell `$procdff$1315' with positive edge clock.
Creating register for signal `\minerva.\payload__branch_target$103' using process `\minerva.$group_242'.
  created $dff cell `$procdff$1316' with positive edge clock.
Creating register for signal `\minerva.\payload__branch_taken$104' using process `\minerva.$group_241'.
  created $dff cell `$procdff$1317' with positive edge clock.
Creating register for signal `\minerva.\payload__condition_met$101' using process `\minerva.$group_240'.
  created $dff cell `$procdff$1318' with positive edge clock.
Creating register for signal `\minerva.\payload__mret$107' using process `\minerva.$group_239'.
  created $dff cell `$procdff$1319' with positive edge clock.
Creating register for signal `\minerva.\payload__exception$108' using process `\minerva.$group_238'.
  created $dff cell `$procdff$1320' with positive edge clock.
Creating register for signal `\minerva.\payload__shift$87' using process `\minerva.$group_237'.
  created $dff cell `$procdff$1321' with positive edge clock.
Creating register for signal `\minerva.\payload__compare$96' using process `\minerva.$group_236'.
  created $dff cell `$procdff$1322' with positive edge clock.
Creating register for signal `\minerva.\payload__store_data$94' using process `\minerva.$group_235'.
  created $dff cell `$procdff$1323' with positive edge clock.
Creating register for signal `\minerva.\payload__dbus_sel$93' using process `\minerva.$group_234'.
  created $dff cell `$procdff$1324' with positive edge clock.
Creating register for signal `\minerva.\payload__store$92' using process `\minerva.$group_233'.
  created $dff cell `$procdff$1325' with positive edge clock.
Creating register for signal `\minerva.\payload__load_mask$90' using process `\minerva.$group_232'.
  created $dff cell `$procdff$1326' with positive edge clock.
Creating register for signal `\minerva.\payload__load$89' using process `\minerva.$group_231'.
  created $dff cell `$procdff$1327' with positive edge clock.
Creating register for signal `\minerva.\payload__bypass_m$84' using process `\minerva.$group_230'.
  created $dff cell `$procdff$1328' with positive edge clock.
Creating register for signal `\minerva.\payload__rd_we$82' using process `\minerva.$group_229'.
  created $dff cell `$procdff$1329' with positive edge clock.
Creating register for signal `\minerva.\payload__rd$80' using process `\minerva.$group_228'.
  created $dff cell `$procdff$1330' with positive edge clock.
Creating register for signal `\minerva.\payload__pc$78' using process `\minerva.$group_227'.
  created $dff cell `$procdff$1331' with positive edge clock.
Creating register for signal `\minerva.\payload__branch_target$66' using process `\minerva.$group_226'.
  created $dff cell `$procdff$1332' with positive edge clock.
Creating register for signal `\minerva.\payload__branch_predict_taken' using process `\minerva.$group_225'.
  created $dff cell `$procdff$1333' with positive edge clock.
Creating register for signal `\minerva.\payload__src2$49' using process `\minerva.$group_224'.
  created $dff cell `$procdff$1334' with positive edge clock.
Creating register for signal `\minerva.\payload__src1$48' using process `\minerva.$group_223'.
  created $dff cell `$procdff$1335' with positive edge clock.
Creating register for signal `\minerva.\payload__illegal$76' using process `\minerva.$group_222'.
  created $dff cell `$procdff$1336' with positive edge clock.
Creating register for signal `\minerva.\payload__mret$75' using process `\minerva.$group_221'.
  created $dff cell `$procdff$1337' with positive edge clock.
Creating register for signal `\minerva.\payload__ebreak$74' using process `\minerva.$group_220'.
  created $dff cell `$procdff$1338' with positive edge clock.
Creating register for signal `\minerva.\payload__ecall$73' using process `\minerva.$group_219'.
  created $dff cell `$procdff$1339' with positive edge clock.
Creating register for signal `\minerva.\payload__csr_we$70' using process `\minerva.$group_218'.
  created $dff cell `$procdff$1340' with positive edge clock.
Creating register for signal `\minerva.\payload__csr_adr$69' using process `\minerva.$group_217'.
  created $dff cell `$procdff$1341' with positive edge clock.
Creating register for signal `\minerva.\payload__csr$68' using process `\minerva.$group_216'.
  created $dff cell `$procdff$1342' with positive edge clock.
Creating register for signal `\minerva.\payload__fence_i$67' using process `\minerva.$group_215'.
  created $dff cell `$procdff$1343' with positive edge clock.
Creating register for signal `\minerva.\payload__branch$65' using process `\minerva.$group_214'.
  created $dff cell `$procdff$1344' with positive edge clock.
Creating register for signal `\minerva.\payload__jump$63' using process `\minerva.$group_213'.
  created $dff cell `$procdff$1345' with positive edge clock.
Creating register for signal `\minerva.\payload__sext$62' using process `\minerva.$group_212'.
  created $dff cell `$procdff$1346' with positive edge clock.
Creating register for signal `\minerva.\payload__direction$61' using process `\minerva.$group_211'.
  created $dff cell `$procdff$1347' with positive edge clock.
Creating register for signal `\minerva.\payload__shift$60' using process `\minerva.$group_210'.
  created $dff cell `$procdff$1348' with positive edge clock.
Creating register for signal `\minerva.\payload__logic$57' using process `\minerva.$group_209'.
  created $dff cell `$procdff$1349' with positive edge clock.
Creating register for signal `\minerva.\payload__compare$64' using process `\minerva.$group_208'.
  created $dff cell `$procdff$1350' with positive edge clock.
Creating register for signal `\minerva.\payload__adder_sub$56' using process `\minerva.$group_207'.
  created $dff cell `$procdff$1351' with positive edge clock.
Creating register for signal `\minerva.\payload__store$55' using process `\minerva.$group_206'.
  created $dff cell `$procdff$1352' with positive edge clock.
Creating register for signal `\minerva.\payload__load$54' using process `\minerva.$group_205'.
  created $dff cell `$procdff$1353' with positive edge clock.
Creating register for signal `\minerva.\payload__funct3$53' using process `\minerva.$group_204'.
  created $dff cell `$procdff$1354' with positive edge clock.
Creating register for signal `\minerva.\payload__bypass_m$52' using process `\minerva.$group_203'.
  created $dff cell `$procdff$1355' with positive edge clock.
Creating register for signal `\minerva.\payload__bypass_x$51' using process `\minerva.$group_202'.
  created $dff cell `$procdff$1356' with positive edge clock.
Creating register for signal `\minerva.\payload__immediate$50' using process `\minerva.$group_201'.
  created $dff cell `$procdff$1357' with positive edge clock.
Creating register for signal `\minerva.\payload__rs1_re$47' using process `\minerva.$group_200'.
  created $dff cell `$procdff$1358' with positive edge clock.
Creating register for signal `\minerva.\payload__rd_we$46' using process `\minerva.$group_199'.
  created $dff cell `$procdff$1359' with positive edge clock.
Creating register for signal `\minerva.\payload__rs1$45' using process `\minerva.$group_198'.
  created $dff cell `$procdff$1360' with positive edge clock.
Creating register for signal `\minerva.\payload__rd$44' using process `\minerva.$group_197'.
  created $dff cell `$procdff$1361' with positive edge clock.
Creating register for signal `\minerva.\payload__bus_error$72' using process `\minerva.$group_196'.
  created $dff cell `$procdff$1362' with positive edge clock.
Creating register for signal `\minerva.\payload__misaligned_fetch$43' using process `\minerva.$group_195'.
  created $dff cell `$procdff$1363' with positive edge clock.
Creating register for signal `\minerva.\payload__pc$41' using process `\minerva.$group_194'.
  created $dff cell `$procdff$1364' with positive edge clock.
Creating register for signal `\minerva.\payload__bus_error$39' using process `\minerva.$group_193'.
  created $dff cell `$procdff$1365' with positive edge clock.
Creating register for signal `\minerva.\payload__instruction$38' using process `\minerva.$group_192'.
  created $dff cell `$procdff$1366' with positive edge clock.
Creating register for signal `\minerva.\payload__misaligned_fetch$37' using process `\minerva.$group_191'.
  created $dff cell `$procdff$1367' with positive edge clock.
Creating register for signal `\minerva.\payload__pc$35' using process `\minerva.$group_190'.
  created $dff cell `$procdff$1368' with positive edge clock.
Creating register for signal `\minerva.\payload__misaligned_fetch$33' using process `\minerva.$group_189'.
  created $dff cell `$procdff$1369' with positive edge clock.
Creating register for signal `\minerva.\payload__pc$32' using process `\minerva.$group_188'.
  created $dff cell `$procdff$1370' with positive edge clock.
Creating register for signal `\minerva.\w_valid_r' using process `\minerva.$group_180'.
  created $dff cell `$procdff$1371' with positive edge clock.
Creating register for signal `\minerva.\csrf_port__addr' using process `\minerva.$group_111'.
  created $dff cell `$procdff$1372' with positive edge clock.
Creating register for signal `\shifter.\m_result$9' using process `\shifter.$group_3'.
  created $dff cell `$procdff$1373' with positive edge clock.
Creating register for signal `\shifter.\m_direction' using process `\shifter.$group_2'.
  created $dff cell `$procdff$1374' with positive edge clock.
Creating register for signal `\loadstore.\dbus__sel' using process `\loadstore.$group_7'.
  created $dff cell `$procdff$1375' with positive edge clock.
Creating register for signal `\loadstore.\dbus__dat_w' using process `\loadstore.$group_6'.
  created $dff cell `$procdff$1376' with positive edge clock.
Creating register for signal `\loadstore.\dbus__adr' using process `\loadstore.$group_5'.
  created $dff cell `$procdff$1377' with positive edge clock.
Creating register for signal `\loadstore.\dbus__we' using process `\loadstore.$group_4'.
  created $dff cell `$procdff$1378' with positive edge clock.
Creating register for signal `\loadstore.\m_bus_error' using process `\loadstore.$group_3'.
  created $dff cell `$procdff$1379' with positive edge clock.
Creating register for signal `\loadstore.\m_load_data' using process `\loadstore.$group_2'.
  created $dff cell `$procdff$1380' with positive edge clock.
Creating register for signal `\loadstore.\dbus__stb' using process `\loadstore.$group_1'.
  created $dff cell `$procdff$1381' with positive edge clock.
Creating register for signal `\loadstore.\dbus__cyc' using process `\loadstore.$group_0'.
  created $dff cell `$procdff$1382' with positive edge clock.
Creating register for signal `\fetch.\f_bus_error_r' using process `\fetch.$group_8'.
  created $dff cell `$procdff$1383' with positive edge clock.
Creating register for signal `\fetch.\f_instruction_r' using process `\fetch.$group_7'.
  created $dff cell `$procdff$1384' with positive edge clock.
Creating register for signal `\fetch.\ibus__adr' using process `\fetch.$group_6'.
  created $dff cell `$procdff$1385' with positive edge clock.
Creating register for signal `\fetch.\f_bus_error$5' using process `\fetch.$group_5'.
  created $dff cell `$procdff$1386' with positive edge clock.
Creating register for signal `\fetch.\f_instruction$2' using process `\fetch.$group_4'.
  created $dff cell `$procdff$1387' with positive edge clock.
Creating register for signal `\fetch.\ibus__stb' using process `\fetch.$group_3'.
  created $dff cell `$procdff$1388' with positive edge clock.
Creating register for signal `\fetch.\ibus__cyc' using process `\fetch.$group_2'.
  created $dff cell `$procdff$1389' with positive edge clock.
Creating register for signal `\exception.\irq_pending_r__value' using process `\exception.$group_57'.
  created $dff cell `$procdff$1390' with positive edge clock.
Creating register for signal `\exception.\irq_mask_r__value' using process `\exception.$group_56'.
  created $dff cell `$procdff$1391' with positive edge clock.
Creating register for signal `\exception.\mip_r__usip' using process `\exception.$group_43'.
  created $dff cell `$procdff$1392' with positive edge clock.
Creating register for signal `\exception.\mip_r__ssip' using process `\exception.$group_43'.
  created $dff cell `$procdff$1393' with positive edge clock.
Creating register for signal `\exception.\mip_r__wiri0' using process `\exception.$group_43'.
  created $dff cell `$procdff$1394' with positive edge clock.
Creating register for signal `\exception.\mip_r__msip' using process `\exception.$group_43'.
  created $dff cell `$procdff$1395' with positive edge clock.
Creating register for signal `\exception.\mip_r__utip' using process `\exception.$group_43'.
  created $dff cell `$procdff$1396' with positive edge clock.
Creating register for signal `\exception.\mip_r__stip' using process `\exception.$group_43'.
  created $dff cell `$procdff$1397' with positive edge clock.
Creating register for signal `\exception.\mip_r__wiri1' using process `\exception.$group_43'.
  created $dff cell `$procdff$1398' with positive edge clock.
Creating register for signal `\exception.\mip_r__mtip' using process `\exception.$group_43'.
  created $dff cell `$procdff$1399' with positive edge clock.
Creating register for signal `\exception.\mip_r__ueip' using process `\exception.$group_43'.
  created $dff cell `$procdff$1400' with positive edge clock.
Creating register for signal `\exception.\mip_r__seip' using process `\exception.$group_43'.
  created $dff cell `$procdff$1401' with positive edge clock.
Creating register for signal `\exception.\mip_r__wiri2' using process `\exception.$group_43'.
  created $dff cell `$procdff$1402' with positive edge clock.
Creating register for signal `\exception.\mip_r__meip' using process `\exception.$group_43'.
  created $dff cell `$procdff$1403' with positive edge clock.
Creating register for signal `\exception.\mip_r__wiri3' using process `\exception.$group_43'.
  created $dff cell `$procdff$1404' with positive edge clock.
Creating register for signal `\exception.\mcause_r__ecode' using process `\exception.$group_41'.
  created $dff cell `$procdff$1405' with positive edge clock.
Creating register for signal `\exception.\mcause_r__interrupt' using process `\exception.$group_41'.
  created $dff cell `$procdff$1406' with positive edge clock.
Creating register for signal `\exception.\mepc_r__value' using process `\exception.$group_40'.
  created $dff cell `$procdff$1407' with positive edge clock.
Creating register for signal `\exception.\mscratch_r__value' using process `\exception.$group_39'.
  created $dff cell `$procdff$1408' with positive edge clock.
Creating register for signal `\exception.\mtvec_r__mode' using process `\exception.$group_37'.
  created $dff cell `$procdff$1409' with positive edge clock.
Creating register for signal `\exception.\mtvec_r__base' using process `\exception.$group_37'.
  created $dff cell `$procdff$1410' with positive edge clock.
Creating register for signal `\exception.\mie_r__usie' using process `\exception.$group_24'.
  created $dff cell `$procdff$1411' with positive edge clock.
Creating register for signal `\exception.\mie_r__ssie' using process `\exception.$group_24'.
  created $dff cell `$procdff$1412' with positive edge clock.
Creating register for signal `\exception.\mie_r__wpri0' using process `\exception.$group_24'.
  created $dff cell `$procdff$1413' with positive edge clock.
Creating register for signal `\exception.\mie_r__msie' using process `\exception.$group_24'.
  created $dff cell `$procdff$1414' with positive edge clock.
Creating register for signal `\exception.\mie_r__utie' using process `\exception.$group_24'.
  created $dff cell `$procdff$1415' with positive edge clock.
Creating register for signal `\exception.\mie_r__stie' using process `\exception.$group_24'.
  created $dff cell `$procdff$1416' with positive edge clock.
Creating register for signal `\exception.\mie_r__wpri1' using process `\exception.$group_24'.
  created $dff cell `$procdff$1417' with positive edge clock.
Creating register for signal `\exception.\mie_r__mtie' using process `\exception.$group_24'.
  created $dff cell `$procdff$1418' with positive edge clock.
Creating register for signal `\exception.\mie_r__ueie' using process `\exception.$group_24'.
  created $dff cell `$procdff$1419' with positive edge clock.
Creating register for signal `\exception.\mie_r__seie' using process `\exception.$group_24'.
  created $dff cell `$procdff$1420' with positive edge clock.
Creating register for signal `\exception.\mie_r__wpri2' using process `\exception.$group_24'.
  created $dff cell `$procdff$1421' with positive edge clock.
Creating register for signal `\exception.\mie_r__meie' using process `\exception.$group_24'.
  created $dff cell `$procdff$1422' with positive edge clock.
Creating register for signal `\exception.\mie_r__wpri3' using process `\exception.$group_24'.
  created $dff cell `$procdff$1423' with positive edge clock.
Creating register for signal `\exception.\misa_r__extensions' using process `\exception.$group_21'.
  created $dff cell `$procdff$1424' with positive edge clock.
Creating register for signal `\exception.\misa_r__wiri0' using process `\exception.$group_21'.
  created $dff cell `$procdff$1425' with positive edge clock.
Creating register for signal `\exception.\misa_r__mxl' using process `\exception.$group_21'.
  created $dff cell `$procdff$1426' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__uie' using process `\exception.$group_0'.
  created $dff cell `$procdff$1427' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__sie' using process `\exception.$group_0'.
  created $dff cell `$procdff$1428' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__wpri0' using process `\exception.$group_0'.
  created $dff cell `$procdff$1429' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__mie' using process `\exception.$group_0'.
  created $dff cell `$procdff$1430' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__upie' using process `\exception.$group_0'.
  created $dff cell `$procdff$1431' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__spie' using process `\exception.$group_0'.
  created $dff cell `$procdff$1432' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__wpri1' using process `\exception.$group_0'.
  created $dff cell `$procdff$1433' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__mpie' using process `\exception.$group_0'.
  created $dff cell `$procdff$1434' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__spp' using process `\exception.$group_0'.
  created $dff cell `$procdff$1435' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__wpri2' using process `\exception.$group_0'.
  created $dff cell `$procdff$1436' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__mpp' using process `\exception.$group_0'.
  created $dff cell `$procdff$1437' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__fs' using process `\exception.$group_0'.
  created $dff cell `$procdff$1438' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__xs' using process `\exception.$group_0'.
  created $dff cell `$procdff$1439' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__mprv' using process `\exception.$group_0'.
  created $dff cell `$procdff$1440' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__sum' using process `\exception.$group_0'.
  created $dff cell `$procdff$1441' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__mxr' using process `\exception.$group_0'.
  created $dff cell `$procdff$1442' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__tvm' using process `\exception.$group_0'.
  created $dff cell `$procdff$1443' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__tw' using process `\exception.$group_0'.
  created $dff cell `$procdff$1444' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__tsr' using process `\exception.$group_0'.
  created $dff cell `$procdff$1445' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__wpri3' using process `\exception.$group_0'.
  created $dff cell `$procdff$1446' with positive edge clock.
Creating register for signal `\exception.\mstatus_r__sd' using process `\exception.$group_0'.
  created $dff cell `$procdff$1447' with positive edge clock.
Creating register for signal `\m.\valid$1' using process `\m.$group_2'.
  created $dff cell `$procdff$1448' with positive edge clock.
Creating register for signal `\x.\valid$1' using process `\x.$group_2'.
  created $dff cell `$procdff$1449' with positive edge clock.
Creating register for signal `\d.\valid$1' using process `\d.$group_2'.
  created $dff cell `$procdff$1450' with positive edge clock.
Creating register for signal `\f.\valid$1' using process `\f.$group_2'.
  created $dff cell `$procdff$1451' with positive edge clock.
Creating register for signal `\a.\valid' using process `\a.$group_0'.
  created $dff cell `$procdff$1452' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$group_0'.
Found and cleaned up 2 empty switches in `\minerva.$group_253'.
Removing empty process `minerva.$group_253'.
Found and cleaned up 2 empty switches in `\minerva.$group_252'.
Removing empty process `minerva.$group_252'.
Found and cleaned up 2 empty switches in `\minerva.$group_251'.
Removing empty process `minerva.$group_251'.
Found and cleaned up 2 empty switches in `\minerva.$group_250'.
Removing empty process `minerva.$group_250'.
Found and cleaned up 2 empty switches in `\minerva.$group_249'.
Removing empty process `minerva.$group_249'.
Found and cleaned up 2 empty switches in `\minerva.$group_248'.
Removing empty process `minerva.$group_248'.
Found and cleaned up 2 empty switches in `\minerva.$group_247'.
Removing empty process `minerva.$group_247'.
Found and cleaned up 2 empty switches in `\minerva.$group_246'.
Removing empty process `minerva.$group_246'.
Found and cleaned up 2 empty switches in `\minerva.$group_245'.
Removing empty process `minerva.$group_245'.
Found and cleaned up 2 empty switches in `\minerva.$group_244'.
Removing empty process `minerva.$group_244'.
Found and cleaned up 2 empty switches in `\minerva.$group_243'.
Removing empty process `minerva.$group_243'.
Found and cleaned up 2 empty switches in `\minerva.$group_242'.
Removing empty process `minerva.$group_242'.
Found and cleaned up 2 empty switches in `\minerva.$group_241'.
Removing empty process `minerva.$group_241'.
Found and cleaned up 2 empty switches in `\minerva.$group_240'.
Removing empty process `minerva.$group_240'.
Found and cleaned up 2 empty switches in `\minerva.$group_239'.
Removing empty process `minerva.$group_239'.
Found and cleaned up 2 empty switches in `\minerva.$group_238'.
Removing empty process `minerva.$group_238'.
Found and cleaned up 2 empty switches in `\minerva.$group_237'.
Removing empty process `minerva.$group_237'.
Found and cleaned up 2 empty switches in `\minerva.$group_236'.
Removing empty process `minerva.$group_236'.
Found and cleaned up 2 empty switches in `\minerva.$group_235'.
Removing empty process `minerva.$group_235'.
Found and cleaned up 2 empty switches in `\minerva.$group_234'.
Removing empty process `minerva.$group_234'.
Found and cleaned up 2 empty switches in `\minerva.$group_233'.
Removing empty process `minerva.$group_233'.
Found and cleaned up 2 empty switches in `\minerva.$group_232'.
Removing empty process `minerva.$group_232'.
Found and cleaned up 2 empty switches in `\minerva.$group_231'.
Removing empty process `minerva.$group_231'.
Found and cleaned up 2 empty switches in `\minerva.$group_230'.
Removing empty process `minerva.$group_230'.
Found and cleaned up 2 empty switches in `\minerva.$group_229'.
Removing empty process `minerva.$group_229'.
Found and cleaned up 2 empty switches in `\minerva.$group_228'.
Removing empty process `minerva.$group_228'.
Found and cleaned up 2 empty switches in `\minerva.$group_227'.
Removing empty process `minerva.$group_227'.
Found and cleaned up 2 empty switches in `\minerva.$group_226'.
Removing empty process `minerva.$group_226'.
Found and cleaned up 2 empty switches in `\minerva.$group_225'.
Removing empty process `minerva.$group_225'.
Found and cleaned up 2 empty switches in `\minerva.$group_224'.
Removing empty process `minerva.$group_224'.
Found and cleaned up 2 empty switches in `\minerva.$group_223'.
Removing empty process `minerva.$group_223'.
Found and cleaned up 2 empty switches in `\minerva.$group_222'.
Removing empty process `minerva.$group_222'.
Found and cleaned up 2 empty switches in `\minerva.$group_221'.
Removing empty process `minerva.$group_221'.
Found and cleaned up 2 empty switches in `\minerva.$group_220'.
Removing empty process `minerva.$group_220'.
Found and cleaned up 2 empty switches in `\minerva.$group_219'.
Removing empty process `minerva.$group_219'.
Found and cleaned up 2 empty switches in `\minerva.$group_218'.
Removing empty process `minerva.$group_218'.
Found and cleaned up 2 empty switches in `\minerva.$group_217'.
Removing empty process `minerva.$group_217'.
Found and cleaned up 2 empty switches in `\minerva.$group_216'.
Removing empty process `minerva.$group_216'.
Found and cleaned up 2 empty switches in `\minerva.$group_215'.
Removing empty process `minerva.$group_215'.
Found and cleaned up 2 empty switches in `\minerva.$group_214'.
Removing empty process `minerva.$group_214'.
Found and cleaned up 2 empty switches in `\minerva.$group_213'.
Removing empty process `minerva.$group_213'.
Found and cleaned up 2 empty switches in `\minerva.$group_212'.
Removing empty process `minerva.$group_212'.
Found and cleaned up 2 empty switches in `\minerva.$group_211'.
Removing empty process `minerva.$group_211'.
Found and cleaned up 2 empty switches in `\minerva.$group_210'.
Removing empty process `minerva.$group_210'.
Found and cleaned up 2 empty switches in `\minerva.$group_209'.
Removing empty process `minerva.$group_209'.
Found and cleaned up 2 empty switches in `\minerva.$group_208'.
Removing empty process `minerva.$group_208'.
Found and cleaned up 2 empty switches in `\minerva.$group_207'.
Removing empty process `minerva.$group_207'.
Found and cleaned up 2 empty switches in `\minerva.$group_206'.
Removing empty process `minerva.$group_206'.
Found and cleaned up 2 empty switches in `\minerva.$group_205'.
Removing empty process `minerva.$group_205'.
Found and cleaned up 2 empty switches in `\minerva.$group_204'.
Removing empty process `minerva.$group_204'.
Found and cleaned up 2 empty switches in `\minerva.$group_203'.
Removing empty process `minerva.$group_203'.
Found and cleaned up 2 empty switches in `\minerva.$group_202'.
Removing empty process `minerva.$group_202'.
Found and cleaned up 2 empty switches in `\minerva.$group_201'.
Removing empty process `minerva.$group_201'.
Found and cleaned up 2 empty switches in `\minerva.$group_200'.
Removing empty process `minerva.$group_200'.
Found and cleaned up 2 empty switches in `\minerva.$group_199'.
Removing empty process `minerva.$group_199'.
Found and cleaned up 2 empty switches in `\minerva.$group_198'.
Removing empty process `minerva.$group_198'.
Found and cleaned up 2 empty switches in `\minerva.$group_197'.
Removing empty process `minerva.$group_197'.
Found and cleaned up 2 empty switches in `\minerva.$group_196'.
Removing empty process `minerva.$group_196'.
Found and cleaned up 2 empty switches in `\minerva.$group_195'.
Removing empty process `minerva.$group_195'.
Found and cleaned up 2 empty switches in `\minerva.$group_194'.
Removing empty process `minerva.$group_194'.
Found and cleaned up 2 empty switches in `\minerva.$group_193'.
Removing empty process `minerva.$group_193'.
Found and cleaned up 2 empty switches in `\minerva.$group_192'.
Removing empty process `minerva.$group_192'.
Found and cleaned up 2 empty switches in `\minerva.$group_191'.
Removing empty process `minerva.$group_191'.
Found and cleaned up 2 empty switches in `\minerva.$group_190'.
Removing empty process `minerva.$group_190'.
Found and cleaned up 2 empty switches in `\minerva.$group_189'.
Removing empty process `minerva.$group_189'.
Found and cleaned up 2 empty switches in `\minerva.$group_188'.
Removing empty process `minerva.$group_188'.
Removing empty process `minerva.$group_187'.
Removing empty process `minerva.$group_186'.
Removing empty process `minerva.$group_185'.
Removing empty process `minerva.$group_184'.
Removing empty process `minerva.$group_183'.
Found and cleaned up 2 empty switches in `\minerva.$group_182'.
Removing empty process `minerva.$group_182'.
Found and cleaned up 1 empty switch in `\minerva.$group_181'.
Removing empty process `minerva.$group_181'.
Found and cleaned up 2 empty switches in `\minerva.$group_180'.
Removing empty process `minerva.$group_180'.
Removing empty process `minerva.$group_179'.
Removing empty process `minerva.$group_178'.
Removing empty process `minerva.$group_177'.
Removing empty process `minerva.$group_176'.
Removing empty process `minerva.$group_175'.
Removing empty process `minerva.$group_174'.
Found and cleaned up 1 empty switch in `\minerva.$group_173'.
Removing empty process `minerva.$group_173'.
Found and cleaned up 1 empty switch in `\minerva.$group_172'.
Removing empty process `minerva.$group_172'.
Found and cleaned up 1 empty switch in `\minerva.$group_171'.
Removing empty process `minerva.$group_171'.
Found and cleaned up 1 empty switch in `\minerva.$group_170'.
Removing empty process `minerva.$group_170'.
Removing empty process `minerva.$group_169'.
Removing empty process `minerva.$group_168'.
Removing empty process `minerva.$group_167'.
Removing empty process `minerva.$group_166'.
Removing empty process `minerva.$group_165'.
Removing empty process `minerva.$group_164'.
Removing empty process `minerva.$group_163'.
Removing empty process `minerva.$group_162'.
Removing empty process `minerva.$group_161'.
Removing empty process `minerva.$group_160'.
Removing empty process `minerva.$group_159'.
Removing empty process `minerva.$group_158'.
Removing empty process `minerva.$group_157'.
Removing empty process `minerva.$group_156'.
Removing empty process `minerva.$group_155'.
Removing empty process `minerva.$group_154'.
Removing empty process `minerva.$group_153'.
Removing empty process `minerva.$group_152'.
Removing empty process `minerva.$group_151'.
Removing empty process `minerva.$group_150'.
Removing empty process `minerva.$group_149'.
Removing empty process `minerva.$group_148'.
Removing empty process `minerva.$group_147'.
Removing empty process `minerva.$group_146'.
Removing empty process `minerva.$group_145'.
Removing empty process `minerva.$group_144'.
Removing empty process `minerva.$group_143'.
Removing empty process `minerva.$group_142'.
Removing empty process `minerva.$group_141'.
Removing empty process `minerva.$group_140'.
Removing empty process `minerva.$group_139'.
Removing empty process `minerva.$group_138'.
Removing empty process `minerva.$group_137'.
Removing empty process `minerva.$group_136'.
Removing empty process `minerva.$group_135'.
Removing empty process `minerva.$group_134'.
Removing empty process `minerva.$group_133'.
Removing empty process `minerva.$group_132'.
Removing empty process `minerva.$group_131'.
Removing empty process `minerva.$group_130'.
Removing empty process `minerva.$group_129'.
Removing empty process `minerva.$group_128'.
Removing empty process `minerva.$group_127'.
Removing empty process `minerva.$group_126'.
Removing empty process `minerva.$group_125'.
Removing empty process `minerva.$group_124'.
Removing empty process `minerva.$group_123'.
Removing empty process `minerva.$group_122'.
Removing empty process `minerva.$group_121'.
Removing empty process `minerva.$group_120'.
Removing empty process `minerva.$group_119'.
Removing empty process `minerva.$group_118'.
Removing empty process `minerva.$group_117'.
Removing empty process `minerva.$group_116'.
Removing empty process `minerva.$group_115'.
Removing empty process `minerva.$group_114'.
Removing empty process `minerva.$group_113'.
Removing empty process `minerva.$group_112'.
Found and cleaned up 2 empty switches in `\minerva.$group_111'.
Removing empty process `minerva.$group_111'.
Removing empty process `minerva.$group_110'.
Removing empty process `minerva.$group_109'.
Removing empty process `minerva.$group_108'.
Found and cleaned up 1 empty switch in `\minerva.$group_107'.
Removing empty process `minerva.$group_107'.
Removing empty process `minerva.$group_106'.
Removing empty process `minerva.$group_105'.
Removing empty process `minerva.$group_104'.
Removing empty process `minerva.$group_103'.
Removing empty process `minerva.$group_102'.
Removing empty process `minerva.$group_101'.
Removing empty process `minerva.$group_100'.
Removing empty process `minerva.$group_99'.
Removing empty process `minerva.$group_98'.
Removing empty process `minerva.$group_97'.
Removing empty process `minerva.$group_96'.
Removing empty process `minerva.$group_95'.
Removing empty process `minerva.$group_94'.
Removing empty process `minerva.$group_93'.
Removing empty process `minerva.$group_92'.
Removing empty process `minerva.$group_91'.
Removing empty process `minerva.$group_90'.
Removing empty process `minerva.$group_89'.
Removing empty process `minerva.$group_88'.
Removing empty process `minerva.$group_87'.
Removing empty process `minerva.$group_86'.
Removing empty process `minerva.$group_85'.
Removing empty process `minerva.$group_84'.
Removing empty process `minerva.$group_83'.
Removing empty process `minerva.$group_82'.
Removing empty process `minerva.$group_81'.
Removing empty process `minerva.$group_80'.
Removing empty process `minerva.$group_79'.
Removing empty process `minerva.$group_78'.
Removing empty process `minerva.$group_77'.
Removing empty process `minerva.$group_76'.
Removing empty process `minerva.$group_75'.
Removing empty process `minerva.$group_74'.
Removing empty process `minerva.$group_73'.
Removing empty process `minerva.$group_72'.
Removing empty process `minerva.$group_71'.
Removing empty process `minerva.$group_70'.
Removing empty process `minerva.$group_69'.
Removing empty process `minerva.$group_68'.
Removing empty process `minerva.$group_67'.
Removing empty process `minerva.$group_66'.
Removing empty process `minerva.$group_65'.
Removing empty process `minerva.$group_64'.
Removing empty process `minerva.$group_63'.
Removing empty process `minerva.$group_62'.
Removing empty process `minerva.$group_61'.
Removing empty process `minerva.$group_60'.
Removing empty process `minerva.$group_59'.
Removing empty process `minerva.$group_58'.
Removing empty process `minerva.$group_57'.
Removing empty process `minerva.$group_56'.
Removing empty process `minerva.$group_55'.
Removing empty process `minerva.$group_54'.
Removing empty process `minerva.$group_53'.
Removing empty process `minerva.$group_52'.
Removing empty process `minerva.$group_51'.
Removing empty process `minerva.$group_50'.
Removing empty process `minerva.$group_49'.
Removing empty process `minerva.$group_48'.
Removing empty process `minerva.$group_47'.
Removing empty process `minerva.$group_46'.
Removing empty process `minerva.$group_45'.
Removing empty process `minerva.$group_44'.
Removing empty process `minerva.$group_43'.
Removing empty process `minerva.$group_42'.
Removing empty process `minerva.$group_41'.
Removing empty process `minerva.$group_40'.
Removing empty process `minerva.$group_39'.
Removing empty process `minerva.$group_38'.
Removing empty process `minerva.$group_37'.
Removing empty process `minerva.$group_36'.
Removing empty process `minerva.$group_35'.
Removing empty process `minerva.$group_34'.
Removing empty process `minerva.$group_33'.
Removing empty process `minerva.$group_32'.
Removing empty process `minerva.$group_31'.
Removing empty process `minerva.$group_30'.
Removing empty process `minerva.$group_29'.
Removing empty process `minerva.$group_28'.
Removing empty process `minerva.$group_27'.
Removing empty process `minerva.$group_26'.
Removing empty process `minerva.$group_25'.
Removing empty process `minerva.$group_24'.
Removing empty process `minerva.$group_23'.
Removing empty process `minerva.$group_22'.
Removing empty process `minerva.$group_21'.
Removing empty process `minerva.$group_20'.
Removing empty process `minerva.$group_19'.
Removing empty process `minerva.$group_18'.
Removing empty process `minerva.$group_17'.
Removing empty process `minerva.$group_16'.
Removing empty process `minerva.$group_15'.
Removing empty process `minerva.$group_14'.
Removing empty process `minerva.$group_13'.
Removing empty process `minerva.$group_12'.
Removing empty process `minerva.$group_11'.
Removing empty process `minerva.$group_10'.
Removing empty process `minerva.$group_9'.
Removing empty process `minerva.$group_8'.
Removing empty process `minerva.$group_7'.
Removing empty process `minerva.$group_6'.
Removing empty process `minerva.$group_5'.
Removing empty process `minerva.$group_4'.
Removing empty process `minerva.$group_3'.
Removing empty process `minerva.$group_2'.
Removing empty process `minerva.$group_1'.
Removing empty process `minerva.$group_0'.
Removing empty process `shifter.$group_4'.
Found and cleaned up 2 empty switches in `\shifter.$group_3'.
Removing empty process `shifter.$group_3'.
Found and cleaned up 2 empty switches in `\shifter.$group_2'.
Removing empty process `shifter.$group_2'.
Removing empty process `shifter.$group_1'.
Removing empty process `shifter.$group_0'.
Removing empty process `predict.$group_1'.
Found and cleaned up 1 empty switch in `\predict.$group_0'.
Removing empty process `predict.$group_0'.
Found and cleaned up 1 empty switch in `\logic.$group_0'.
Removing empty process `logic.$group_0'.
Found and cleaned up 3 empty switches in `\loadstore.$group_7'.
Removing empty process `loadstore.$group_7'.
Found and cleaned up 3 empty switches in `\loadstore.$group_6'.
Removing empty process `loadstore.$group_6'.
Found and cleaned up 3 empty switches in `\loadstore.$group_5'.
Removing empty process `loadstore.$group_5'.
Found and cleaned up 3 empty switches in `\loadstore.$group_4'.
Removing empty process `loadstore.$group_4'.
Found and cleaned up 2 empty switches in `\loadstore.$group_3'.
Removing empty process `loadstore.$group_3'.
Found and cleaned up 3 empty switches in `\loadstore.$group_2'.
Removing empty process `loadstore.$group_2'.
Found and cleaned up 4 empty switches in `\loadstore.$group_1'.
Removing empty process `loadstore.$group_1'.
Found and cleaned up 4 empty switches in `\loadstore.$group_0'.
Removing empty process `loadstore.$group_0'.
Found and cleaned up 5 empty switches in `\anonymous$1.$group_2'.
Removing empty process `anonymous$1.$group_2'.
Found and cleaned up 1 empty switch in `\anonymous$1.$group_1'.
Removing empty process `anonymous$1.$group_1'.
Found and cleaned up 3 empty switches in `\anonymous$1.$group_0'.
Removing empty process `anonymous$1.$group_0'.
Found and cleaned up 2 empty switches in `\fetch.$group_8'.
Removing empty process `fetch.$group_8'.
Found and cleaned up 2 empty switches in `\fetch.$group_7'.
Removing empty process `fetch.$group_7'.
Found and cleaned up 2 empty switches in `\fetch.$group_6'.
Removing empty process `fetch.$group_6'.
Found and cleaned up 3 empty switches in `\fetch.$group_5'.
Removing empty process `fetch.$group_5'.
Found and cleaned up 3 empty switches in `\fetch.$group_4'.
Removing empty process `fetch.$group_4'.
Found and cleaned up 3 empty switches in `\fetch.$group_3'.
Removing empty process `fetch.$group_3'.
Found and cleaned up 3 empty switches in `\fetch.$group_2'.
Removing empty process `fetch.$group_2'.
Removing empty process `fetch.$group_1'.
Removing empty process `fetch.$group_0'.
Found and cleaned up 1 empty switch in `\anonymous.$group_1'.
Removing empty process `anonymous.$group_1'.
Found and cleaned up 1 empty switch in `\anonymous.$group_0'.
Removing empty process `anonymous.$group_0'.
Removing empty process `exception.$group_60'.
Removing empty process `exception.$group_59'.
Removing empty process `exception.$group_58'.
Found and cleaned up 2 empty switches in `\exception.$group_57'.
Removing empty process `exception.$group_57'.
Found and cleaned up 2 empty switches in `\exception.$group_56'.
Removing empty process `exception.$group_56'.
Found and cleaned up 2 empty switches in `\exception.$group_43'.
Removing empty process `exception.$group_43'.
Found and cleaned up 5 empty switches in `\exception.$group_41'.
Removing empty process `exception.$group_41'.
Found and cleaned up 5 empty switches in `\exception.$group_40'.
Removing empty process `exception.$group_40'.
Found and cleaned up 2 empty switches in `\exception.$group_39'.
Removing empty process `exception.$group_39'.
Found and cleaned up 2 empty switches in `\exception.$group_37'.
Removing empty process `exception.$group_37'.
Found and cleaned up 2 empty switches in `\exception.$group_24'.
Removing empty process `exception.$group_24'.
Found and cleaned up 2 empty switches in `\exception.$group_21'.
Removing empty process `exception.$group_21'.
Found and cleaned up 4 empty switches in `\exception.$group_0'.
Removing empty process `exception.$group_0'.
Removing empty process `interrupt_pe.$group_1'.
Found and cleaned up 16 empty switches in `\interrupt_pe.$group_0'.
Removing empty process `interrupt_pe.$group_0'.
Removing empty process `trap_pe.$group_1'.
Found and cleaned up 16 empty switches in `\trap_pe.$group_0'.
Removing empty process `trap_pe.$group_0'.
Removing empty process `decoder.$group_40'.
Removing empty process `decoder.$group_39'.
Removing empty process `decoder.$group_38'.
Removing empty process `decoder.$group_37'.
Removing empty process `decoder.$group_36'.
Removing empty process `decoder.$group_35'.
Removing empty process `decoder.$group_34'.
Removing empty process `decoder.$group_33'.
Removing empty process `decoder.$group_32'.
Removing empty process `decoder.$group_31'.
Removing empty process `decoder.$group_30'.
Removing empty process `decoder.$group_29'.
Removing empty process `decoder.$group_28'.
Removing empty process `decoder.$group_27'.
Removing empty process `decoder.$group_26'.
Removing empty process `decoder.$group_25'.
Removing empty process `decoder.$group_24'.
Removing empty process `decoder.$group_23'.
Removing empty process `decoder.$group_22'.
Removing empty process `decoder.$group_21'.
Removing empty process `decoder.$group_20'.
Removing empty process `decoder.$group_19'.
Removing empty process `decoder.$group_18'.
Removing empty process `decoder.$group_17'.
Removing empty process `decoder.$group_16'.
Removing empty process `decoder.$group_15'.
Removing empty process `decoder.$group_14'.
Removing empty process `decoder.$group_13'.
Removing empty process `decoder.$group_12'.
Removing empty process `decoder.$group_11'.
Found and cleaned up 1 empty switch in `\decoder.$group_10'.
Removing empty process `decoder.$group_10'.
Found and cleaned up 1 empty switch in `\decoder.$group_9'.
Removing empty process `decoder.$group_9'.
Removing empty process `decoder.$group_8'.
Removing empty process `decoder.$group_7'.
Removing empty process `decoder.$group_6'.
Removing empty process `decoder.$group_5'.
Removing empty process `decoder.$group_4'.
Removing empty process `decoder.$group_3'.
Removing empty process `decoder.$group_2'.
Removing empty process `decoder.$group_1'.
Removing empty process `decoder.$group_0'.
Found and cleaned up 1 empty switch in `\compare.$group_0'.
Removing empty process `compare.$group_0'.
Found and cleaned up 1 empty switch in `\adder.$group_2'.
Removing empty process `adder.$group_2'.
Found and cleaned up 1 empty switch in `\adder.$group_0'.
Removing empty process `adder.$group_0'.
Found and cleaned up 1 empty switch in `\csrf.$group_194'.
Removing empty process `csrf.$group_194'.
Found and cleaned up 1 empty switch in `\csrf.$group_193'.
Removing empty process `csrf.$group_193'.
Found and cleaned up 1 empty switch in `\csrf.$group_192'.
Removing empty process `csrf.$group_192'.
Found and cleaned up 1 empty switch in `\csrf.$group_191'.
Removing empty process `csrf.$group_191'.
Found and cleaned up 1 empty switch in `\csrf.$group_190'.
Removing empty process `csrf.$group_190'.
Found and cleaned up 1 empty switch in `\csrf.$group_189'.
Removing empty process `csrf.$group_189'.
Found and cleaned up 1 empty switch in `\csrf.$group_188'.
Removing empty process `csrf.$group_188'.
Found and cleaned up 1 empty switch in `\csrf.$group_187'.
Removing empty process `csrf.$group_187'.
Found and cleaned up 1 empty switch in `\csrf.$group_186'.
Removing empty process `csrf.$group_186'.
Found and cleaned up 1 empty switch in `\csrf.$group_185'.
Removing empty process `csrf.$group_185'.
Found and cleaned up 1 empty switch in `\csrf.$group_184'.
Removing empty process `csrf.$group_184'.
Found and cleaned up 1 empty switch in `\csrf.$group_183'.
Removing empty process `csrf.$group_183'.
Found and cleaned up 1 empty switch in `\csrf.$group_182'.
Removing empty process `csrf.$group_182'.
Found and cleaned up 1 empty switch in `\csrf.$group_181'.
Removing empty process `csrf.$group_181'.
Found and cleaned up 1 empty switch in `\csrf.$group_180'.
Removing empty process `csrf.$group_180'.
Found and cleaned up 1 empty switch in `\csrf.$group_179'.
Removing empty process `csrf.$group_179'.
Found and cleaned up 1 empty switch in `\csrf.$group_178'.
Removing empty process `csrf.$group_178'.
Found and cleaned up 1 empty switch in `\csrf.$group_177'.
Removing empty process `csrf.$group_177'.
Found and cleaned up 1 empty switch in `\csrf.$group_176'.
Removing empty process `csrf.$group_176'.
Found and cleaned up 1 empty switch in `\csrf.$group_175'.
Removing empty process `csrf.$group_175'.
Found and cleaned up 1 empty switch in `\csrf.$group_162'.
Removing empty process `csrf.$group_162'.
Found and cleaned up 1 empty switch in `\csrf.$group_161'.
Removing empty process `csrf.$group_161'.
Found and cleaned up 1 empty switch in `\csrf.$group_160'.
Removing empty process `csrf.$group_160'.
Found and cleaned up 1 empty switch in `\csrf.$group_159'.
Removing empty process `csrf.$group_159'.
Found and cleaned up 1 empty switch in `\csrf.$group_157'.
Removing empty process `csrf.$group_157'.
Found and cleaned up 1 empty switch in `\csrf.$group_156'.
Removing empty process `csrf.$group_156'.
Found and cleaned up 1 empty switch in `\csrf.$group_155'.
Removing empty process `csrf.$group_155'.
Found and cleaned up 1 empty switch in `\csrf.$group_154'.
Removing empty process `csrf.$group_154'.
Found and cleaned up 1 empty switch in `\csrf.$group_153'.
Removing empty process `csrf.$group_153'.
Found and cleaned up 1 empty switch in `\csrf.$group_152'.
Removing empty process `csrf.$group_152'.
Found and cleaned up 1 empty switch in `\csrf.$group_151'.
Removing empty process `csrf.$group_151'.
Found and cleaned up 1 empty switch in `\csrf.$group_150'.
Removing empty process `csrf.$group_150'.
Found and cleaned up 1 empty switch in `\csrf.$group_149'.
Removing empty process `csrf.$group_149'.
Found and cleaned up 1 empty switch in `\csrf.$group_148'.
Removing empty process `csrf.$group_148'.
Found and cleaned up 1 empty switch in `\csrf.$group_146'.
Removing empty process `csrf.$group_146'.
Found and cleaned up 1 empty switch in `\csrf.$group_145'.
Removing empty process `csrf.$group_145'.
Found and cleaned up 1 empty switch in `\csrf.$group_144'.
Removing empty process `csrf.$group_144'.
Found and cleaned up 1 empty switch in `\csrf.$group_143'.
Removing empty process `csrf.$group_143'.
Found and cleaned up 1 empty switch in `\csrf.$group_142'.
Removing empty process `csrf.$group_142'.
Found and cleaned up 1 empty switch in `\csrf.$group_141'.
Removing empty process `csrf.$group_141'.
Found and cleaned up 1 empty switch in `\csrf.$group_140'.
Removing empty process `csrf.$group_140'.
Found and cleaned up 1 empty switch in `\csrf.$group_139'.
Removing empty process `csrf.$group_139'.
Found and cleaned up 1 empty switch in `\csrf.$group_138'.
Removing empty process `csrf.$group_138'.
Found and cleaned up 1 empty switch in `\csrf.$group_137'.
Removing empty process `csrf.$group_137'.
Found and cleaned up 1 empty switch in `\csrf.$group_136'.
Removing empty process `csrf.$group_136'.
Found and cleaned up 1 empty switch in `\csrf.$group_135'.
Removing empty process `csrf.$group_135'.
Found and cleaned up 1 empty switch in `\csrf.$group_134'.
Removing empty process `csrf.$group_134'.
Found and cleaned up 1 empty switch in `\csrf.$group_133'.
Removing empty process `csrf.$group_133'.
Found and cleaned up 1 empty switch in `\csrf.$group_132'.
Removing empty process `csrf.$group_132'.
Found and cleaned up 1 empty switch in `\csrf.$group_119'.
Removing empty process `csrf.$group_119'.
Found and cleaned up 1 empty switch in `\csrf.$group_118'.
Removing empty process `csrf.$group_118'.
Found and cleaned up 1 empty switch in `\csrf.$group_117'.
Removing empty process `csrf.$group_117'.
Found and cleaned up 1 empty switch in `\csrf.$group_116'.
Removing empty process `csrf.$group_116'.
Found and cleaned up 1 empty switch in `\csrf.$group_115'.
Removing empty process `csrf.$group_115'.
Found and cleaned up 1 empty switch in `\csrf.$group_112'.
Removing empty process `csrf.$group_112'.
Found and cleaned up 1 empty switch in `\csrf.$group_111'.
Removing empty process `csrf.$group_111'.
Found and cleaned up 1 empty switch in `\csrf.$group_110'.
Removing empty process `csrf.$group_110'.
Found and cleaned up 1 empty switch in `\csrf.$group_109'.
Removing empty process `csrf.$group_109'.
Found and cleaned up 1 empty switch in `\csrf.$group_108'.
Removing empty process `csrf.$group_108'.
Found and cleaned up 1 empty switch in `\csrf.$group_107'.
Removing empty process `csrf.$group_107'.
Found and cleaned up 1 empty switch in `\csrf.$group_106'.
Removing empty process `csrf.$group_106'.
Found and cleaned up 1 empty switch in `\csrf.$group_105'.
Removing empty process `csrf.$group_105'.
Found and cleaned up 1 empty switch in `\csrf.$group_104'.
Removing empty process `csrf.$group_104'.
Found and cleaned up 1 empty switch in `\csrf.$group_103'.
Removing empty process `csrf.$group_103'.
Found and cleaned up 1 empty switch in `\csrf.$group_102'.
Removing empty process `csrf.$group_102'.
Found and cleaned up 1 empty switch in `\csrf.$group_101'.
Removing empty process `csrf.$group_101'.
Found and cleaned up 1 empty switch in `\csrf.$group_100'.
Removing empty process `csrf.$group_100'.
Found and cleaned up 1 empty switch in `\csrf.$group_99'.
Removing empty process `csrf.$group_99'.
Found and cleaned up 1 empty switch in `\csrf.$group_98'.
Removing empty process `csrf.$group_98'.
Found and cleaned up 1 empty switch in `\csrf.$group_97'.
Removing empty process `csrf.$group_97'.
Found and cleaned up 1 empty switch in `\csrf.$group_96'.
Removing empty process `csrf.$group_96'.
Found and cleaned up 1 empty switch in `\csrf.$group_95'.
Removing empty process `csrf.$group_95'.
Found and cleaned up 1 empty switch in `\csrf.$group_94'.
Removing empty process `csrf.$group_94'.
Found and cleaned up 1 empty switch in `\csrf.$group_93'.
Removing empty process `csrf.$group_93'.
Found and cleaned up 1 empty switch in `\csrf.$group_92'.
Removing empty process `csrf.$group_92'.
Found and cleaned up 1 empty switch in `\csrf.$group_91'.
Removing empty process `csrf.$group_91'.
Found and cleaned up 1 empty switch in `\csrf.$group_90'.
Removing empty process `csrf.$group_90'.
Found and cleaned up 1 empty switch in `\csrf.$group_69'.
Removing empty process `csrf.$group_69'.
Found and cleaned up 1 empty switch in `\csrf.$group_68'.
Removing empty process `csrf.$group_68'.
Found and cleaned up 1 empty switch in `\csrf.$group_67'.
Removing empty process `csrf.$group_67'.
Found and cleaned up 1 empty switch in `\csrf.$group_66'.
Removing empty process `csrf.$group_66'.
Found and cleaned up 1 empty switch in `\csrf.$group_65'.
Removing empty process `csrf.$group_65'.
Found and cleaned up 1 empty switch in `\csrf.$group_64'.
Removing empty process `csrf.$group_64'.
Found and cleaned up 1 empty switch in `\csrf.$group_63'.
Removing empty process `csrf.$group_63'.
Found and cleaned up 1 empty switch in `\csrf.$group_62'.
Removing empty process `csrf.$group_62'.
Found and cleaned up 1 empty switch in `\csrf.$group_61'.
Removing empty process `csrf.$group_61'.
Found and cleaned up 1 empty switch in `\csrf.$group_60'.
Removing empty process `csrf.$group_60'.
Found and cleaned up 1 empty switch in `\csrf.$group_59'.
Removing empty process `csrf.$group_59'.
Found and cleaned up 1 empty switch in `\csrf.$group_58'.
Removing empty process `csrf.$group_58'.
Found and cleaned up 1 empty switch in `\csrf.$group_57'.
Removing empty process `csrf.$group_57'.
Found and cleaned up 1 empty switch in `\csrf.$group_56'.
Removing empty process `csrf.$group_56'.
Found and cleaned up 1 empty switch in `\csrf.$group_55'.
Removing empty process `csrf.$group_55'.
Found and cleaned up 1 empty switch in `\csrf.$group_54'.
Removing empty process `csrf.$group_54'.
Found and cleaned up 1 empty switch in `\csrf.$group_53'.
Removing empty process `csrf.$group_53'.
Found and cleaned up 1 empty switch in `\csrf.$group_52'.
Removing empty process `csrf.$group_52'.
Found and cleaned up 1 empty switch in `\csrf.$group_51'.
Removing empty process `csrf.$group_51'.
Found and cleaned up 1 empty switch in `\csrf.$group_50'.
Removing empty process `csrf.$group_50'.
Found and cleaned up 1 empty switch in `\csrf.$group_49'.
Removing empty process `csrf.$group_49'.
Found and cleaned up 1 empty switch in `\csrf.$group_48'.
Removing empty process `csrf.$group_48'.
Found and cleaned up 1 empty switch in `\csrf.$group_47'.
Removing empty process `csrf.$group_47'.
Found and cleaned up 1 empty switch in `\csrf.$group_46'.
Removing empty process `csrf.$group_46'.
Found and cleaned up 1 empty switch in `\csrf.$group_45'.
Removing empty process `csrf.$group_45'.
Found and cleaned up 1 empty switch in `\csrf.$group_44'.
Removing empty process `csrf.$group_44'.
Found and cleaned up 1 empty switch in `\csrf.$group_43'.
Removing empty process `csrf.$group_43'.
Found and cleaned up 1 empty switch in `\csrf.$group_42'.
Removing empty process `csrf.$group_42'.
Found and cleaned up 1 empty switch in `\csrf.$group_41'.
Removing empty process `csrf.$group_41'.
Found and cleaned up 1 empty switch in `\csrf.$group_40'.
Removing empty process `csrf.$group_40'.
Found and cleaned up 1 empty switch in `\csrf.$group_39'.
Removing empty process `csrf.$group_39'.
Found and cleaned up 1 empty switch in `\csrf.$group_38'.
Removing empty process `csrf.$group_38'.
Found and cleaned up 1 empty switch in `\csrf.$group_37'.
Removing empty process `csrf.$group_37'.
Found and cleaned up 1 empty switch in `\csrf.$group_36'.
Removing empty process `csrf.$group_36'.
Found and cleaned up 1 empty switch in `\csrf.$group_35'.
Removing empty process `csrf.$group_35'.
Found and cleaned up 1 empty switch in `\csrf.$group_34'.
Removing empty process `csrf.$group_34'.
Found and cleaned up 1 empty switch in `\csrf.$group_33'.
Removing empty process `csrf.$group_33'.
Found and cleaned up 1 empty switch in `\csrf.$group_32'.
Removing empty process `csrf.$group_32'.
Found and cleaned up 1 empty switch in `\csrf.$group_31'.
Removing empty process `csrf.$group_31'.
Found and cleaned up 1 empty switch in `\csrf.$group_30'.
Removing empty process `csrf.$group_30'.
Found and cleaned up 1 empty switch in `\csrf.$group_29'.
Removing empty process `csrf.$group_29'.
Found and cleaned up 1 empty switch in `\csrf.$group_28'.
Removing empty process `csrf.$group_28'.
Found and cleaned up 1 empty switch in `\csrf.$group_27'.
Removing empty process `csrf.$group_27'.
Found and cleaned up 1 empty switch in `\csrf.$group_26'.
Removing empty process `csrf.$group_26'.
Found and cleaned up 1 empty switch in `\csrf.$group_25'.
Removing empty process `csrf.$group_25'.
Found and cleaned up 1 empty switch in `\csrf.$group_24'.
Removing empty process `csrf.$group_24'.
Found and cleaned up 1 empty switch in `\csrf.$group_23'.
Removing empty process `csrf.$group_23'.
Found and cleaned up 1 empty switch in `\csrf.$group_22'.
Removing empty process `csrf.$group_22'.
Found and cleaned up 1 empty switch in `\csrf.$group_21'.
Removing empty process `csrf.$group_21'.
Found and cleaned up 1 empty switch in `\csrf.$group_20'.
Removing empty process `csrf.$group_20'.
Found and cleaned up 1 empty switch in `\csrf.$group_19'.
Removing empty process `csrf.$group_19'.
Found and cleaned up 1 empty switch in `\csrf.$group_18'.
Removing empty process `csrf.$group_18'.
Found and cleaned up 1 empty switch in `\csrf.$group_17'.
Removing empty process `csrf.$group_17'.
Found and cleaned up 1 empty switch in `\csrf.$group_16'.
Removing empty process `csrf.$group_16'.
Found and cleaned up 1 empty switch in `\csrf.$group_15'.
Removing empty process `csrf.$group_15'.
Found and cleaned up 1 empty switch in `\csrf.$group_14'.
Removing empty process `csrf.$group_14'.
Found and cleaned up 1 empty switch in `\csrf.$group_13'.
Removing empty process `csrf.$group_13'.
Found and cleaned up 1 empty switch in `\csrf.$group_12'.
Removing empty process `csrf.$group_12'.
Found and cleaned up 1 empty switch in `\csrf.$group_11'.
Removing empty process `csrf.$group_11'.
Found and cleaned up 1 empty switch in `\csrf.$group_10'.
Removing empty process `csrf.$group_10'.
Found and cleaned up 1 empty switch in `\csrf.$group_9'.
Removing empty process `csrf.$group_9'.
Found and cleaned up 1 empty switch in `\csrf.$group_8'.
Removing empty process `csrf.$group_8'.
Found and cleaned up 1 empty switch in `\csrf.$group_7'.
Removing empty process `csrf.$group_7'.
Found and cleaned up 1 empty switch in `\csrf.$group_6'.
Removing empty process `csrf.$group_6'.
Found and cleaned up 1 empty switch in `\csrf.$group_5'.
Removing empty process `csrf.$group_5'.
Found and cleaned up 1 empty switch in `\csrf.$group_4'.
Removing empty process `csrf.$group_4'.
Found and cleaned up 1 empty switch in `\csrf.$group_3'.
Removing empty process `csrf.$group_3'.
Found and cleaned up 1 empty switch in `\csrf.$group_2'.
Removing empty process `csrf.$group_2'.
Found and cleaned up 1 empty switch in `\csrf.$group_1'.
Removing empty process `csrf.$group_1'.
Found and cleaned up 1 empty switch in `\csrf.$group_0'.
Removing empty process `csrf.$group_0'.
Removing empty process `w.$group_2'.
Removing empty process `w.$group_1'.
Removing empty process `w.$group_0'.
Removing empty process `m.$group_5'.
Removing empty process `m.$group_4'.
Removing empty process `m.$group_3'.
Found and cleaned up 2 empty switches in `\m.$group_2'.
Removing empty process `m.$group_2'.
Removing empty process `m.$group_1'.
Removing empty process `m.$group_0'.
Removing empty process `x.$group_5'.
Removing empty process `x.$group_4'.
Removing empty process `x.$group_3'.
Found and cleaned up 2 empty switches in `\x.$group_2'.
Removing empty process `x.$group_2'.
Removing empty process `x.$group_1'.
Removing empty process `x.$group_0'.
Removing empty process `d.$group_5'.
Removing empty process `d.$group_4'.
Removing empty process `d.$group_3'.
Found and cleaned up 2 empty switches in `\d.$group_2'.
Removing empty process `d.$group_2'.
Removing empty process `d.$group_1'.
Removing empty process `d.$group_0'.
Removing empty process `f.$group_5'.
Removing empty process `f.$group_4'.
Removing empty process `f.$group_3'.
Found and cleaned up 2 empty switches in `\f.$group_2'.
Removing empty process `f.$group_2'.
Removing empty process `f.$group_1'.
Removing empty process `f.$group_0'.
Removing empty process `a.$group_3'.
Removing empty process `a.$group_2'.
Removing empty process `a.$group_1'.
Found and cleaned up 2 empty switches in `\a.$group_0'.
Removing empty process `a.$group_0'.
Cleaned up 426 empty switches.

2.4. Executing FLATTEN pass (flatten design).
Using template minerva for cells of type minerva.
Using template adder for cells of type adder.
Using template loadstore for cells of type loadstore.
Using template decoder for cells of type decoder.
Using template predict for cells of type predict.
Using template csrf for cells of type csrf.
Using template exception for cells of type exception.
Using template a for cells of type a.
Using template f for cells of type f.
Using template d for cells of type d.
Using template fetch for cells of type fetch.
Using template w for cells of type w.
Using template m for cells of type m.
Using template x for cells of type x.
Using template shifter for cells of type shifter.
Using template logic for cells of type logic.
Using template compare for cells of type compare.
Using template anonymous$1 for cells of type anonymous$1.
Using template interrupt_pe for cells of type interrupt_pe.
Using template trap_pe for cells of type trap_pe.
Using template anonymous for cells of type anonymous.
<suppressed ~21 debug messages>
No more expansions possible.
Deleting now unused module minerva.
Deleting now unused module shifter.
Deleting now unused module predict.
Deleting now unused module logic.
Deleting now unused module loadstore.
Deleting now unused module anonymous$1.
Deleting now unused module fetch.
Deleting now unused module anonymous.
Deleting now unused module exception.
Deleting now unused module interrupt_pe.
Deleting now unused module trap_pe.
Deleting now unused module decoder.
Deleting now unused module compare.
Deleting now unused module adder.
Deleting now unused module csrf.
Deleting now unused module w.
Deleting now unused module m.
Deleting now unused module x.
Deleting now unused module d.
Deleting now unused module f.
Deleting now unused module a.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~426 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 267 unused cells and 1857 unused wires.
<suppressed ~289 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~816 debug messages>
Removed a total of 272 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $techmap\minerva.fetch.$procmux$504: \minerva.fetch.ibus__cyc -> 1'1
      Replacing known input bits on port B of cell $techmap\minerva.fetch.$procmux$500: \minerva.fetch.ibus__cyc -> 1'0
      Replacing known input bits on port B of cell $techmap\minerva.loadstore.$procmux$417: \minerva.loadstore.dbus__cyc -> 1'1
      Replacing known input bits on port A of cell $techmap\minerva.loadstore.$procmux$413: \minerva.loadstore.dbus__cyc -> 1'0
      Replacing known input bits on port A of cell $techmap\minerva.loadstore.$procmux$409: \minerva.loadstore.dbus__cyc -> 1'0
  Analyzing evaluation results.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1019.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1021.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1023.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1027.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1029.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1031.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1035.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1037.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1039.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1049.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1051.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1099.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1101.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1103.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1105.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1107.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1109.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1111.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1113.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1115.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1117.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1121.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1123.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1127.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1129.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1131.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1135.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1137.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1143.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1147.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1152.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1155.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1157.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1159.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1162.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1164.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1166.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1169.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1171.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1175.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1177.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1181.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1185.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1189.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1191.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1196.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1199.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1201.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1203.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1206.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1208.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1210.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1213.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1215.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1219.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1222.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1226.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1229.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1231.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1233.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1235.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1237.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1239.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1241.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1243.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1245.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1248.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1250.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1253.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1255.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1257.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1260.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$1262.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$893.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$899.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$933.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$935.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$937.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$941.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$943.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$945.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$949.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$951.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$953.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$961.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$963.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$969.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$975.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$983.
    dead port 2/2 on $mux $techmap\minerva.csrf.$procmux$985.
    dead port 1/2 on $mux $techmap\minerva.fetch.$7.
    dead port 2/2 on $mux $techmap\minerva.x.$procmux$1281.
Removed 92 multiplexer ports.
<suppressed ~152 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $techmap\minerva.decoder.$procmux$859: { $auto$opt_reduce.cc:132:opt_mux$1456 $techmap\minerva.decoder.$383 $techmap\minerva.decoder.$101 $techmap\minerva.decoder.$procmux$863_CMP $auto$opt_reduce.cc:132:opt_mux$1454 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1453: { $techmap\minerva.decoder.$procmux$862_CMP $techmap\minerva.decoder.$procmux$861_CMP $techmap\minerva.decoder.$505 $techmap\minerva.decoder.$403 $techmap\minerva.decoder.$391 }
  Optimizing cells in module \top.
Performed a total of 2 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $techmap\minerva.fetch.$procdff$1386 ($dff) from module top.
Removing $techmap\minerva.fetch.$procdff$1387 ($dff) from module top.
Removing $techmap\minerva.loadstore.$procdff$1380 ($dff) from module top.
Promoting init spec $techmap\minerva.$verilog_initial_trigger = 1'0 to constant driver in module top.
Promoting init spec \minerva.payload__exception$125 = 1'0 to constant driver in module top.
Promoting init spec \minerva.payload__multiply$123 = 1'0 to constant driver in module top.
Promoting init spec \minerva.payload__pc$110 = 30'000000000000000000000000000000 to constant driver in module top.
Promoting init spec \minerva.payload__store_data$94 = 0 to constant driver in module top.
Promoting init spec \minerva.payload__dbus_sel$93 = 4'0000 to constant driver in module top.
Promoting init spec \minerva.payload__store$92 = 1'0 to constant driver in module top.
Promoting init spec \minerva.payload__pc$78 = 30'000000000000000000000000000000 to constant driver in module top.
Promoting init spec \minerva.payload__fence_i$67 = 1'0 to constant driver in module top.
Promoting init spec $techmap\minerva.x.$verilog_initial_trigger = 1'0 to constant driver in module top.
Promoting init spec \minerva.loadstore.m_bus_error = 1'0 to constant driver in module top.
Promoting init spec \minerva.loadstore.dbus__we = 1'0 to constant driver in module top.
Promoting init spec \minerva.loadstore.dbus__stb = 1'0 to constant driver in module top.
Promoting init spec \minerva.loadstore.dbus__sel = 4'0000 to constant driver in module top.
Promoting init spec \minerva.loadstore.dbus__dat_w = 0 to constant driver in module top.
Promoting init spec \minerva.loadstore.dbus__adr = 30'000000000000000000000000000000 to constant driver in module top.
Promoting init spec \minerva.exception.mip_r__wiri3 = 20'00000000000000000000 to constant driver in module top.
Promoting init spec \minerva.exception.mip_r__wiri2 = 1'0 to constant driver in module top.
Promoting init spec \minerva.exception.mip_r__wiri1 = 1'0 to constant driver in module top.
Promoting init spec \minerva.exception.mip_r__wiri0 = 1'0 to constant driver in module top.
Promoting init spec \minerva.exception.mie_r__wpri3 = 20'00000000000000000000 to constant driver in module top.
Promoting init spec \minerva.exception.mie_r__wpri2 = 1'0 to constant driver in module top.
Promoting init spec \minerva.exception.mie_r__wpri1 = 1'0 to constant driver in module top.
Promoting init spec \minerva.exception.mie_r__wpri0 = 1'0 to constant driver in module top.
Promoting init spec \minerva.exception.misa_r__wiri0 = 4'0000 to constant driver in module top.
Promoting init spec \minerva.exception.mstatus_r__wpri3 = 8'00000000 to constant driver in module top.
Promoting init spec \minerva.exception.mstatus_r__wpri2 = 2'00 to constant driver in module top.
Promoting init spec \minerva.exception.mstatus_r__wpri1 = 1'0 to constant driver in module top.
Promoting init spec \minerva.exception.mstatus_r__wpri0 = 1'0 to constant driver in module top.
Promoting init spec \minerva.fetch.ibus__stb = 1'0 to constant driver in module top.
Promoting init spec \minerva.fetch.ibus__adr = 30'000000000000000000000000000000 to constant driver in module top.
Promoting init spec $techmap\minerva.w.$verilog_initial_trigger = 1'0 to constant driver in module top.
Promoting init spec $techmap\minerva.m.$verilog_initial_trigger = 1'0 to constant driver in module top.
Promoted 33 init specs to constant drivers.
Replaced 3 DFF cells.

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 3 unused cells and 281 unused wires.
<suppressed ~4 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~151 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $techmap\minerva.$procdff$1309 ($dff) from module top.
Removing $techmap\minerva.$procdff$1365 ($dff) from module top.
Promoting init spec \minerva.fetch.f_bus_error_r = 1'0 to constant driver in module top.
Promoted 1 init specs to constant drivers.
Replaced 2 DFF cells.

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>

2.10.16. Rerunning OPT passes. (Maybe there is more to do..)

2.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~149 debug messages>

2.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $techmap$techmap\minerva.loadstore.$1.$procmux$421: { $techmap$techmap\minerva.loadstore.$1.$procmux$444_CMP $techmap$techmap\minerva.loadstore.$1.$procmux$438_CMP }
    New ctrl vector for $pmux cell $techmap$techmap\minerva.loadstore.$1.$procmux$433: $auto$opt_reduce.cc:132:opt_mux$1458
    New ctrl vector for $pmux cell $techmap$techmap\minerva.loadstore.$1.$procmux$439: $auto$opt_reduce.cc:132:opt_mux$1460
  Optimizing cells in module \top.
Performed a total of 3 changes.

2.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.10.20. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $techmap\minerva.$procdff$1362 ($dff) from module top.
Replaced 1 DFF cells.

2.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 8 unused wires.
<suppressed ~5 debug messages>

2.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

2.10.23. Rerunning OPT passes. (Maybe there is more to do..)

2.10.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~148 debug messages>

2.10.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $techmap$techmap\minerva.loadstore.$1.$procmux$421: $auto$opt_reduce.cc:132:opt_mux$1462
  Optimizing cells in module \top.
Performed a total of 1 changes.

2.10.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.27. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.10.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.30. Rerunning OPT passes. (Maybe there is more to do..)

2.10.31. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~148 debug messages>

2.10.32. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.10.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.10.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.37. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 address bits (of 6) from memory init port top.$techmap\minerva.$23 (minerva.gprf).
Removed top 1 bits (of 31) from port Y of cell top.$techmap\minerva.$233 ($add).
Removed top 19 bits (of 32) from port A of cell top.$techmap\minerva.$208 ($eq).
Removed top 1 bits (of 4) from mux cell top.$techmap\minerva.$172 ($mux).
Removed top 3 bits (of 5) from port B of cell top.$techmap\minerva.decoder.$procmux$861_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell top.$techmap\minerva.decoder.$procmux$869_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell top.$techmap\minerva.decoder.$procmux$868_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell top.$techmap\minerva.decoder.$procmux$863_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell top.$techmap\minerva.decoder.$procmux$862_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$techmap\minerva.decoder.$procmux$858_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\minerva.decoder.$procmux$857_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$techmap\minerva.decoder.$procmux$856_CMP0 ($eq).
Removed top 1 bits (of 33) from port B of cell top.$techmap\minerva.predict.$11 ($add).
Removed top 3 bits (of 35) from port Y of cell top.$techmap\minerva.predict.$11 ($add).
Removed top 1 bits (of 33) from port A of cell top.$techmap\minerva.predict.$11 ($add).
Removed top 3 bits (of 13) from port B of cell top.$techmap\minerva.csrf.$procmux$1227_CMP0 ($eq).
Removed top 3 bits (of 13) from port B of cell top.$techmap\minerva.csrf.$procmux$1220_CMP0 ($eq).
Removed top 3 bits (of 13) from port B of cell top.$techmap\minerva.csrf.$procmux$1197_CMP0 ($eq).
Removed top 3 bits (of 13) from port B of cell top.$techmap\minerva.csrf.$procmux$1190_CMP0 ($eq).
Removed top 3 bits (of 13) from port B of cell top.$techmap\minerva.csrf.$procmux$1186_CMP0 ($eq).
Removed top 3 bits (of 13) from port B of cell top.$techmap\minerva.csrf.$procmux$1182_CMP0 ($eq).
Removed top 3 bits (of 13) from port B of cell top.$techmap\minerva.csrf.$procmux$1176_CMP0 ($eq).
Removed top 3 bits (of 13) from port B of cell top.$techmap\minerva.csrf.$procmux$1153_CMP0 ($eq).
Removed top 3 bits (of 13) from port B of cell top.$techmap\minerva.csrf.$procmux$1148_CMP0 ($eq).
Removed top 3 bits (of 13) from port B of cell top.$techmap\minerva.csrf.$procmux$1144_CMP0 ($eq).
Removed top 2 bits (of 12) from port B of cell top.$techmap\minerva.csrf.$procmux$1056_CMP0 ($eq).
Removed top 2 bits (of 12) from port B of cell top.$techmap\minerva.csrf.$procmux$1042_CMP0 ($eq).
Removed top 2 bits (of 12) from port B of cell top.$techmap\minerva.csrf.$procmux$1000_CMP0 ($eq).
Removed top 2 bits (of 12) from port B of cell top.$techmap\minerva.csrf.$procmux$978_CMP0 ($eq).
Removed top 2 bits (of 12) from port B of cell top.$techmap\minerva.csrf.$procmux$972_CMP0 ($eq).
Removed top 2 bits (of 12) from port B of cell top.$techmap\minerva.csrf.$procmux$966_CMP0 ($eq).
Removed top 2 bits (of 12) from port B of cell top.$techmap\minerva.csrf.$procmux$956_CMP0 ($eq).
Removed top 2 bits (of 12) from port B of cell top.$techmap\minerva.csrf.$procmux$902_CMP0 ($eq).
Removed top 2 bits (of 12) from port B of cell top.$techmap\minerva.csrf.$procmux$896_CMP0 ($eq).
Removed top 2 bits (of 12) from port B of cell top.$techmap\minerva.csrf.$procmux$890_CMP0 ($eq).
Removed top 27 bits (of 31) from mux cell top.$techmap\minerva.exception.$procmux$598 ($mux).
Removed top 31 bits (of 32) from port A of cell top.$techmap\minerva.exception.$36 ($and).
Removed top 1 bits (of 31) from port Y of cell top.$techmap\minerva.exception.$17 ($add).
Removed top 32 bits (of 64) from port Y of cell top.$techmap\minerva.shifter.$14 ($sshr).
Removed top 2 bits (of 3) from port B of cell top.$techmap\minerva.compare.$procmux$875_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell top.$techmap$techmap\minerva.loadstore.$1.$procmux$436_CMP0 ($eq).
Removed cell top.$techmap$techmap\minerva.loadstore.$1.$procmux$433 ($mux).
Removed cell top.$techmap$techmap\minerva.loadstore.$1.$procmux$421 ($mux).
Removed top 1 bits (of 31) from port Y of cell top.$techmap$techmap\minerva.fetch.$1.$17 ($add).
Removed top 1 bits (of 31) from wire top.$techmap$techmap\minerva.fetch.$1.$15.
Removed top 2 bits (of 34) from wire top.$techmap\minerva.$231.
Removed top 2 bits (of 34) from wire top.$techmap\minerva.exception.$11.
Removed top 27 bits (of 31) from wire top.$techmap\minerva.exception.$procmux$598_Y.
Removed top 32 bits (of 64) from wire top.$techmap\minerva.shifter.$12.
Removed top 4 bits (of 16) from wire top.minerva.exception.interrupt_pe.i.
Removed top 4 bits (of 16) from wire top.minerva.exception.trap_pe.i.
Removed top 4 bits (of 16) from wire top.minerva.exception.trap_pe_i.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 12 unused cells and 21 unused wires.
<suppressed ~13 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$d87a48a4cd82717ae6bd57e6fe5ce90d87c44016\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$4cde4291caf5aa85a196975f3624151774a86d78\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$169bae89c32dcc6f3626d16cf9f47ceb469145db\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$a6ffc318e97e2d88e3aa2c740afebfc2ba48d1b1\_90_lut_cmp_ for cells of type $ne.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5b7c8f37cb386acdf3ce7e528c09e6d15eb51b72\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5652dda64580ddd7861fd245e644fd33eae2e158\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d31416a5863a8a220e16d7940a75ab70541ab32a\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~800 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 72 unused wires.
<suppressed ~1 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $techmap$techmap\minerva.fetch.$1.$17 ($add).
  creating $macc model for $techmap\minerva.$233 ($add).
  creating $macc model for $techmap\minerva.adder.$2 ($sub).
  creating $macc model for $techmap\minerva.adder.$4 ($add).
  creating $macc model for $techmap\minerva.exception.$17 ($add).
  creating $macc model for $techmap\minerva.predict.$11 ($add).
  creating $alu model for $macc $techmap\minerva.predict.$11.
  creating $alu model for $macc $techmap\minerva.exception.$17.
  creating $alu model for $macc $techmap\minerva.adder.$4.
  creating $alu model for $macc $techmap\minerva.adder.$2.
  creating $alu model for $macc $techmap\minerva.$233.
  creating $alu model for $macc $techmap$techmap\minerva.fetch.$1.$17.
  creating $alu cell for $techmap$techmap\minerva.fetch.$1.$17: $auto$alumacc.cc:474:replace_alu$1503
  creating $alu cell for $techmap\minerva.$233: $auto$alumacc.cc:474:replace_alu$1506
  creating $alu cell for $techmap\minerva.adder.$2: $auto$alumacc.cc:474:replace_alu$1509
  creating $alu cell for $techmap\minerva.adder.$4: $auto$alumacc.cc:474:replace_alu$1512
  creating $alu cell for $techmap\minerva.exception.$17: $auto$alumacc.cc:474:replace_alu$1515
  creating $alu cell for $techmap\minerva.predict.$11: $auto$alumacc.cc:474:replace_alu$1518
  created 6 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~146 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1455: { \minerva.decoder.auipc \minerva.decoder.lui }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$1453: { $techmap\minerva.decoder.$procmux$861_CMP $techmap\minerva.decoder.$505 $techmap\minerva.decoder.$403 $techmap\minerva.decoder.$391 $techmap\minerva.decoder.$171 }
  Optimizing cells in module \top.
Performed a total of 2 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \minerva.payload__load_mask$120 = 3'000 to constant driver in module top.
Promoting init spec \minerva.payload__load_mask$90 = 3'000 to constant driver in module top.
Promoted 2 init specs to constant drivers.

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~146 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.minerva.fetch.f_instruction_r as FSM state register:
    Register has an initialization value.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\minerva.gprf' in module `\top':
  $techmap\minerva.$23 ($meminit)
  $techmap\minerva.$28 ($memwr)
  $techmap\minerva.$27 ($memrd)
  $techmap\minerva.$24 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 659 unused cells and 423 unused wires.
<suppressed ~660 debug messages>

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~409 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.9. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
No more expansions possible.

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.31.6. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
No more expansions possible.

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.39.6. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
No more expansions possible.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \top

2.43.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.44. Printing statistics.

=== top ===

   Number of wires:               1102
   Number of wire bits:           7272
   Number of public wires:        1102
   Number of public wire bits:    7272
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     SB_IO                           1

2.45. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

3. Executing JSON backend.

End of script. Logfile hash: 20140ebb25
CPU: user 3.28s system 0.05s, MEM: 80.45 MB total, 47.24 MB resident
Yosys 0.8+510 (git sha1 36120fcc, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 33% 19x opt_clean (1 sec), 12% 18x opt_expr (0 sec), ...
